<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Bing.Webs</name>
    </assembly>
    <members>
        <member name="T:Bing.Webs.Commons.Result">
            <summary>
            返回结果
            </summary>
        </member>
        <member name="P:Bing.Webs.Commons.Result.Code">
            <summary>
            状态码
            </summary>
        </member>
        <member name="P:Bing.Webs.Commons.Result.Message">
            <summary>
            消息
            </summary>
        </member>
        <member name="P:Bing.Webs.Commons.Result.Data">
            <summary>
            数据
            </summary>
        </member>
        <member name="P:Bing.Webs.Commons.Result.OperationTime">
            <summary>
            操作时间
            </summary>
        </member>
        <member name="M:Bing.Webs.Commons.Result.#ctor(System.Int32,System.String,System.Object)">
            <summary>
            初始化一个<see cref="T:Bing.Webs.Commons.Result"/>类型的实例
            </summary>
            <param name="code">状态码</param>
            <param name="message">消息</param>
            <param name="data">数据</param>
        </member>
        <member name="M:Bing.Webs.Commons.Result.#ctor(Bing.Webs.Commons.StateCode,System.String,System.Object)">
            <summary>
            初始化返回结果
            </summary>
            <param name="code">状态码</param>
            <param name="message">消息</param>
            <param name="data">数据</param>
        </member>
        <member name="M:Bing.Webs.Commons.Result.ExecuteResultAsync(Microsoft.AspNetCore.Mvc.ActionContext)">
            <summary>
            执行结果
            </summary>
        </member>
        <member name="T:Bing.Webs.Commons.StateCode">
            <summary>
            状态码
            </summary>
        </member>
        <member name="F:Bing.Webs.Commons.StateCode.Ok">
            <summary>
            成功
            </summary>
        </member>
        <member name="F:Bing.Webs.Commons.StateCode.Fail">
            <summary>
            失败
            </summary>
        </member>
        <member name="F:Bing.Webs.Commons.StateCode.NotLogin">
            <summary>
            尚未登录
            </summary>
        </member>
        <member name="T:Bing.Webs.Commons.ValidationFailedResult">
            <summary>
            验证失败结果
            </summary>
        </member>
        <member name="P:Bing.Webs.Commons.ValidationFailedResult.AllowMultipleResult">
            <summary>
            允许多个结果
            </summary>
        </member>
        <member name="P:Bing.Webs.Commons.ValidationFailedResult.Errors">
            <summary>
            错误列表
            </summary>
        </member>
        <member name="M:Bing.Webs.Commons.ValidationFailedResult.#ctor(System.Collections.Generic.List{Bing.Webs.Commons.ValidationError})">
            <summary>
            初始化一个<see cref="T:Bing.Webs.Commons.ValidationFailedResult"/>类型的实例
            </summary>
            <param name="errors">验证错误列表</param>
        </member>
        <member name="T:Bing.Webs.Commons.ValidationError">
            <summary>
            验证错误
            </summary>
        </member>
        <member name="P:Bing.Webs.Commons.ValidationError.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:Bing.Webs.Commons.ValidationError.Message">
            <summary>
            错误消息
            </summary>
        </member>
        <member name="T:Bing.Webs.Controllers.ApiControllerBase">
            <summary>
            WebApi控制器基类
            </summary>
        </member>
        <member name="F:Bing.Webs.Controllers.ApiControllerBase._log">
            <summary>
            日志
            </summary>
        </member>
        <member name="P:Bing.Webs.Controllers.ApiControllerBase.Log">
            <summary>
            日志
            </summary>
        </member>
        <member name="P:Bing.Webs.Controllers.ApiControllerBase.Session">
            <summary>
            会话
            </summary>
        </member>
        <member name="M:Bing.Webs.Controllers.ApiControllerBase.GetLog">
            <summary>
            获取日志操作
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bing.Webs.Controllers.ApiControllerBase.Success(System.Object,System.String)">
            <summary>
            返回成功消息
            </summary>
            <param name="data">数据</param>
            <param name="message">消息</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Webs.Controllers.ApiControllerBase.Fail(System.String)">
            <summary>
            返回失败消息
            </summary>
            <param name="message">消息</param>
            <returns></returns>
        </member>
        <member name="T:Bing.Webs.Controllers.AreaApiControllerBase">
            <summary>
            WebApi的区域控制器基类
            </summary>
        </member>
        <member name="T:Bing.Webs.Controllers.CrudControllerBase`2">
            <summary>
            Crud控制器
            </summary>
            <typeparam name="TDto">数据传输对象类型</typeparam>
            <typeparam name="TQuery">查询参数类型</typeparam>
        </member>
        <member name="M:Bing.Webs.Controllers.CrudControllerBase`2.#ctor(Bing.Applications.ICrudService{`0,`1})">
            <summary>
            初始化一个<see cref="T:Bing.Webs.Controllers.CrudControllerBase`2"/>类型的实例
            </summary>
            <param name="service">Crud服务</param>
        </member>
        <member name="T:Bing.Webs.Controllers.CrudControllerBase`3">
            <summary>
            Crud控制器
            </summary>
            <typeparam name="TDto">数据传输对象类型</typeparam>
            <typeparam name="TRequest">参数类型</typeparam>
            <typeparam name="TQuery">查询参数类型</typeparam>
        </member>
        <member name="M:Bing.Webs.Controllers.CrudControllerBase`3.#ctor(Bing.Applications.ICrudService{`0,`1,`2})">
            <summary>
            初始化一个<see cref="T:Bing.Webs.Controllers.CrudControllerBase`3"/>类型的实例
            </summary>
            <param name="service">Crud服务</param>
        </member>
        <member name="T:Bing.Webs.Controllers.CrudControllerBase`4">
            <summary>
            Crud控制器
            </summary>
            <typeparam name="TDto">数据传输对象类型</typeparam>
            <typeparam name="TCreateRequest">创建参数类型</typeparam>
            <typeparam name="TUpdateRequest">修改参数类型</typeparam>
            <typeparam name="TQuery">查询参数类型</typeparam>
        </member>
        <member name="F:Bing.Webs.Controllers.CrudControllerBase`4._service">
            <summary>
            Crud服务
            </summary>
        </member>
        <member name="M:Bing.Webs.Controllers.CrudControllerBase`4.#ctor(Bing.Applications.ICrudService{`0,`2,`1,`2,`3})">
            <summary>
            初始化一个<see cref="T:Bing.Webs.Controllers.CrudControllerBase`4"/>类型的实例
            </summary>
            <param name="service">Crud服务</param>
        </member>
        <member name="M:Bing.Webs.Controllers.CrudControllerBase`4.CreateAsync(`1)">
            <summary>
            创建
            </summary>
            <remarks>
            调用范例：
            POST
            /api/customer
            </remarks>
            <param name="request">创建参数</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Webs.Controllers.CrudControllerBase`4.CreateBefore(`1)">
            <summary>
            创建前操作
            </summary>
            <param name="dto">创建参数</param>
        </member>
        <member name="M:Bing.Webs.Controllers.CrudControllerBase`4.UpdateAsync(System.String,`2)">
            <summary>
            修改
            </summary>
            <remarks>
            调用范例：
            PUT
            /api/customers/1
            </remarks>
            <param name="id">标识</param>
            <param name="request">修改参数</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Webs.Controllers.CrudControllerBase`4.UpdateBefore(`2)">
            <summary>
            修改前操作
            </summary>
            <param name="dto">修改参数</param>
        </member>
        <member name="M:Bing.Webs.Controllers.CrudControllerBase`4.DeleteAsync(System.String)">
            <summary>
            删除
            注意：该方法用于删除单个实体，批量删除请使用POST请求，否则可能失败
            </summary>
            <remarks>
            调用范例：
            DELETE
            /api/customers/1
            </remarks>
            <param name="id">标识</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Webs.Controllers.CrudControllerBase`4.BatchDeleteAsync(System.String)">
            <summary>
            批量删除，注意：body参数需要添加引号，"'1,2,3'"而不是"1,2,3"
            </summary>
            <remarks>
            调用范例：
            POST
            /api/customers/delete
            body："'1,2,3'"
            </remarks>
            <param name="ids">标识列表，多个Id用逗号分隔，范例：1,2,3</param>
            <returns></returns>
        </member>
        <member name="T:Bing.Webs.Controllers.QueryControllerBase`2">
            <summary>
            查询控制器
            </summary>
            <typeparam name="TDto">数据传输对象类型</typeparam>
            <typeparam name="TQuery">查询参数类型</typeparam>
        </member>
        <member name="F:Bing.Webs.Controllers.QueryControllerBase`2._service">
            <summary>
            查询服务
            </summary>
        </member>
        <member name="M:Bing.Webs.Controllers.QueryControllerBase`2.#ctor(Bing.Applications.IQueryService{`0,`1})">
            <summary>
            初始化一个<see cref="T:Bing.Webs.Controllers.QueryControllerBase`2"/>类型的实例
            </summary>
            <param name="service">查询服务</param>
        </member>
        <member name="M:Bing.Webs.Controllers.QueryControllerBase`2.GetAsync(System.String)">
            <summary>
            获取单个实例
            </summary>
            <remarks>
            调用范例：
            GET
            /api/customers/1
            </remarks>
            <param name="id">标识</param>
        </member>
        <member name="M:Bing.Webs.Controllers.QueryControllerBase`2.PagerQueryAsync(`1)">
            <summary>
            分页查询
            </summary>
            <remarks>
            调用范例：
            GET
            /api/customers?name=a
            </remarks>
            <param name="query">查询参数</param>
        </member>
        <member name="M:Bing.Webs.Controllers.QueryControllerBase`2.PagerQueryBefore(`1)">
            <summary>
            分页查询前操作
            </summary>
            <param name="query">查询参数</param>
        </member>
        <member name="M:Bing.Webs.Controllers.QueryControllerBase`2.ToPagerQueryResult(Bing.Domains.Repositories.PagerList{`0})">
            <summary>
            转换分页查询结果
            </summary>
            <param name="result">分页查询结果</param>
        </member>
        <member name="M:Bing.Webs.Controllers.QueryControllerBase`2.QueryAsync(`1)">
            <summary>
            查询
            </summary>
            <remarks>
            调用范例：
            GET
            /api/customers/query?name=a
            </remarks>
            <param name="query">查询参数</param>
        </member>
        <member name="M:Bing.Webs.Controllers.QueryControllerBase`2.QueryBefore(`1)">
            <summary>
            查询前操作
            </summary>
            <param name="query">查询参数</param>
        </member>
        <member name="M:Bing.Webs.Controllers.QueryControllerBase`2.ToQueryResult(System.Collections.Generic.List{`0})">
            <summary>
            转换查询结果
            </summary>
            <param name="result">查询结果</param>
        </member>
        <member name="M:Bing.Webs.Controllers.QueryControllerBase`2.GetItemsAsync(`1)">
            <summary>
            获取项列表
            </summary>
            <param name="query">查询参数</param>
        </member>
        <member name="M:Bing.Webs.Controllers.QueryControllerBase`2.ToItem(`0)">
            <summary>
            将Dto转换为列表项
            </summary>
            <param name="dto">数据传输对象</param>
        </member>
        <member name="T:Bing.Webs.Controllers.Trees.ControllerBase`3">
            <summary>
            树型控制器基类
            </summary>
            <typeparam name="TDto">数据传输对象类型</typeparam>
            <typeparam name="TQuery">查询参数类型</typeparam>
            <typeparam name="TParentId">父标识类型</typeparam>
        </member>
        <member name="F:Bing.Webs.Controllers.Trees.ControllerBase`3._service">
            <summary>
            树形服务
            </summary>
        </member>
        <member name="M:Bing.Webs.Controllers.Trees.ControllerBase`3.#ctor(Bing.Applications.Trees.ITreeService{`0,`1,`2})">
            <summary>
            初始化一个<see cref="T:Bing.Webs.Controllers.Trees.ControllerBase`3"/>类型的实例
            </summary>
            <param name="service">树型服务</param>
        </member>
        <member name="M:Bing.Webs.Controllers.Trees.ControllerBase`3.GetLoadMode">
            <summary>
            获取加载模式
            </summary>
        </member>
        <member name="M:Bing.Webs.Controllers.Trees.ControllerBase`3.GetAsync(System.String)">
            <summary>
            获取单个实例
            </summary>
            <remarks>
            调用范例：
            GET
            /api/customer/1
            </remarks>
            <param name="id">标识</param>
        </member>
        <member name="M:Bing.Webs.Controllers.Trees.ControllerBase`3.DeleteAsync(System.String)">
            <summary>
            删除，注意：该方法用于删除单个实体，批量删除请使用POST提交，否则可能失败
            </summary>
            <remarks>
            调用范例：
            DELETE
            /api/customer/1
            </remarks>
            <param name="id">标识</param>
        </member>
        <member name="M:Bing.Webs.Controllers.Trees.ControllerBase`3.BatchDeleteAsync(System.String)">
            <summary>
            批量删除，注意：body参数需要添加引号，"'1,2,3'"而不是"1,2,3"
            </summary>
            <remarks>
            调用范例：
            POST
            /api/customers/delete
            body："'1,2,3'"
            </remarks>
            <param name="ids">标识列表，多个Id用逗号分隔，范例：1,2,3</param>
        </member>
        <member name="M:Bing.Webs.Controllers.Trees.ControllerBase`3.EnableAsync(System.String)">
            <summary>
            启用
            </summary>
            <param name="ids">标识列表</param>
        </member>
        <member name="M:Bing.Webs.Controllers.Trees.ControllerBase`3.DisableAsync(System.String)">
            <summary>
            冻结
            </summary>
            <param name="ids">标识列表</param>
        </member>
        <member name="M:Bing.Webs.Controllers.Trees.ControllerBase`3.SwapSortAsync(System.String)">
            <summary>
            交换排序
            </summary>
            <param name="ids">两个Id的标识列表，用逗号分隔，范例：1,2</param>
            <remarks>
            调用范例:
            POST   
            /api/customer/SwapSort
            body: "'1,2'"
            </remarks>
        </member>
        <member name="M:Bing.Webs.Controllers.Trees.ControllerBase`3.FixAsync(`1)">
            <summary>
            修正排序
            </summary>
            <param name="parameter">查询参数</param>
        </member>
        <member name="T:Bing.Webs.Controllers.Trees.ITreeTableResult`1">
            <summary>
            树型表格结果
            </summary>
        </member>
        <member name="M:Bing.Webs.Controllers.Trees.ITreeTableResult`1.GetResult">
            <summary>
            获取树型表格结果
            </summary>
            <returns></returns>
        </member>
        <member name="T:Bing.Webs.Controllers.Trees.TreeControllerBase`3">
            <summary>
            树型控制器基类
            </summary>
            <typeparam name="TTreeResult">树型结果</typeparam>
            <typeparam name="TDto">数据传输对象类型</typeparam>
            <typeparam name="TQuery">父标识类型</typeparam>
        </member>
        <member name="M:Bing.Webs.Controllers.Trees.TreeControllerBase`3.#ctor(Bing.Applications.Trees.ITreeService{`1,`2,System.Nullable{System.Guid}})">
            <summary>
            初始化一个<see cref="T:Bing.Webs.Controllers.Trees.TreeControllerBase`3"/>类型的实例
            </summary>
            <param name="service">树型服务</param>
        </member>
        <member name="T:Bing.Webs.Controllers.Trees.TreeControllerBase`4">
            <summary>
            树型控制器基类
            </summary>
            <typeparam name="TTreeResult">树型结果</typeparam>
            <typeparam name="TDto">数据传输对象类型</typeparam>
            <typeparam name="TQuery">查询参数类型</typeparam>
            <typeparam name="TParentId">父标识类型</typeparam>
        </member>
        <member name="F:Bing.Webs.Controllers.Trees.TreeControllerBase`4._service">
            <summary>
            树型服务
            </summary>
        </member>
        <member name="M:Bing.Webs.Controllers.Trees.TreeControllerBase`4.#ctor(Bing.Applications.Trees.ITreeService{`1,`2,`3})">
            <summary>
            初始化一个<see cref="T:Bing.Webs.Controllers.Trees.TreeControllerBase`4"/>类型的实例
            </summary>
            <param name="service">树型服务</param>
        </member>
        <member name="M:Bing.Webs.Controllers.Trees.TreeControllerBase`4.QueryAsync(`2)">
            <summary>
            查询
            </summary>
            <remarks>
            调用范例: 
            GET
            /api/role?name=a
            </remarks>
            <param name="query">查询参数</param>
        </member>
        <member name="M:Bing.Webs.Controllers.Trees.TreeControllerBase`4.QueryBefore(`2)">
            <summary>
            查询前操作
            </summary>
            <param name="query">查询参数</param>
        </member>
        <member name="M:Bing.Webs.Controllers.Trees.TreeControllerBase`4.InitParam(`2)">
            <summary>
            初始化参数
            </summary>
            <param name="query">查询参数</param>
        </member>
        <member name="M:Bing.Webs.Controllers.Trees.TreeControllerBase`4.GetOperation(`2)">
            <summary>
            获取操作
            </summary>
            <param name="query">查询参数</param>
        </member>
        <member name="M:Bing.Webs.Controllers.Trees.TreeControllerBase`4.FirstLoad(`2)">
            <summary>
            首次加载
            </summary>
            <param name="query">查询参数</param>
        </member>
        <member name="M:Bing.Webs.Controllers.Trees.TreeControllerBase`4.SyncFirstLoad(`2)">
            <summary>
            同步首次查询
            </summary>
            <param name="query">查询参数</param>
        </member>
        <member name="M:Bing.Webs.Controllers.Trees.TreeControllerBase`4.Query(`2)">
            <summary>
            查询
            </summary>
            <param name="query">查询参数</param>
        </member>
        <member name="M:Bing.Webs.Controllers.Trees.TreeControllerBase`4.ProcessData(System.Collections.Generic.List{`1},`2)">
            <summary>
            数据处理
            </summary>
            <param name="data">数据列表</param>
            <param name="query">查询参数</param>
        </member>
        <member name="M:Bing.Webs.Controllers.Trees.TreeControllerBase`4.ToResult(System.Collections.Generic.List{`1},System.Boolean)">
            <summary>
            转换为树型结果
            </summary>
            <param name="data">数据列表</param>
            <param name="async">是否异步</param>
        </member>
        <member name="M:Bing.Webs.Controllers.Trees.TreeControllerBase`4.AsyncFirstLoad(`2)">
            <summary>
            异步首次加载
            </summary>
            <param name="query">查询参数</param>
        </member>
        <member name="M:Bing.Webs.Controllers.Trees.TreeControllerBase`4.LoadChildren(`2)">
            <summary>
            加载子节点
            </summary>
            <param name="query">查询参数</param>
        </member>
        <member name="M:Bing.Webs.Controllers.Trees.TreeControllerBase`4.AsyncLoadChildren(`2)">
            <summary>
            异步加载子节点
            </summary>
            <param name="query">查询参数</param>
        </member>
        <member name="M:Bing.Webs.Controllers.Trees.TreeControllerBase`4.GetAsyncLoadChildrenQuery(`2)">
            <summary>
            获取异步加载子节点查询参数
            </summary>
            <param name="query">查询参数</param>
        </member>
        <member name="M:Bing.Webs.Controllers.Trees.TreeControllerBase`4.SyncLoadChildren(`2)">
            <summary>
            同步加载子节点
            </summary>
            <param name="query">查询参数</param>
        </member>
        <member name="M:Bing.Webs.Controllers.Trees.TreeControllerBase`4.GetSyncLoadChildrenQuery(`2)">
            <summary>
            获取同步加载子节点查询参数
            </summary>
            <param name="query">查询参数</param>
        </member>
        <member name="M:Bing.Webs.Controllers.Trees.TreeControllerBase`4.Search(`2)">
            <summary>
            搜索
            </summary>
            <param name="query">查询参数</param>
        </member>
        <member name="T:Bing.Webs.Controllers.Trees.TreeDto`1">
            <summary>
            树型数据传输对象
            </summary>
            <typeparam name="TNode">树节点类型</typeparam>
        </member>
        <member name="P:Bing.Webs.Controllers.Trees.TreeDto`1.Children">
            <summary>
            子节点列表
            </summary>
        </member>
        <member name="M:Bing.Webs.Controllers.Trees.TreeDto`1.#ctor">
            <summary>
            初始化一个<see cref="T:Bing.Webs.Controllers.Trees.TreeDto`1"/>类型的实例
            </summary>
        </member>
        <member name="T:Bing.Webs.Controllers.Trees.TreeDto">
            <summary>
            树型数据传输对象
            </summary>
        </member>
        <member name="P:Bing.Webs.Controllers.Trees.TreeDto.Text">
            <summary>
            标签文本
            </summary>
        </member>
        <member name="P:Bing.Webs.Controllers.Trees.TreeDto.Icon">
            <summary>
            图标
            </summary>
        </member>
        <member name="P:Bing.Webs.Controllers.Trees.TreeDto.DisableCheckbox">
            <summary>
            是否禁用复选框
            </summary>
        </member>
        <member name="P:Bing.Webs.Controllers.Trees.TreeDto.Selectable">
            <summary>
            是否可选中
            </summary>
        </member>
        <member name="P:Bing.Webs.Controllers.Trees.TreeDto.Checked">
            <summary>
            复选框是否被勾选
            </summary>
        </member>
        <member name="P:Bing.Webs.Controllers.Trees.TreeDto.Selected">
            <summary>
            节点是否被选中
            </summary>
        </member>
        <member name="P:Bing.Webs.Controllers.Trees.TreeDto.Leaf">
            <summary>
            是否叶节点
            </summary>
        </member>
        <member name="T:Bing.Webs.Controllers.Trees.TreeTableControllerBase`2">
            <summary>
            树型表格控制器
            </summary>
            <typeparam name="TDto">数据传输对象类型</typeparam>
            <typeparam name="TQuery">父标识类型</typeparam>
        </member>
        <member name="M:Bing.Webs.Controllers.Trees.TreeTableControllerBase`2.#ctor(Bing.Applications.Trees.ITreeService{`0,`1,System.Nullable{System.Guid}})">
            <summary>
            初始化一个<see cref="T:Bing.Webs.Controllers.Trees.TreeTableControllerBase`2"/>类型的实例
            </summary>
            <param name="service">树型服务</param>
        </member>
        <member name="T:Bing.Webs.Controllers.Trees.TreeTableControllerBase`3">
            <summary>
            树型表格控制器
            </summary>
            <typeparam name="TDto">数据传输对象类型</typeparam>
            <typeparam name="TQuery">查询参数类型</typeparam>
            <typeparam name="TParentId">父标识类型</typeparam>
        </member>
        <member name="F:Bing.Webs.Controllers.Trees.TreeTableControllerBase`3._service">
            <summary>
            树型服务
            </summary>
        </member>
        <member name="M:Bing.Webs.Controllers.Trees.TreeTableControllerBase`3.#ctor(Bing.Applications.Trees.ITreeService{`0,`1,`2})">
            <summary>
            初始化一个<see cref="T:Bing.Webs.Controllers.Trees.TreeTableControllerBase`3"/>类型的实例
            </summary>
            <param name="service">树型服务</param>
        </member>
        <member name="M:Bing.Webs.Controllers.Trees.TreeTableControllerBase`3.QueryAsync(`1)">
            <summary>
            查询
            </summary>
            <remarks>
            调用范例: 
            GET
            /api/role?name=a
            </remarks>
            <param name="query">查询参数</param>
        </member>
        <member name="M:Bing.Webs.Controllers.Trees.TreeTableControllerBase`3.QueryBefore(`1)">
            <summary>
            查询前操作
            </summary>
            <param name="query">查询参数</param>
        </member>
        <member name="M:Bing.Webs.Controllers.Trees.TreeTableControllerBase`3.InitParam(`1)">
            <summary>
            初始化参数
            </summary>
            <param name="query">查询参数</param>
        </member>
        <member name="M:Bing.Webs.Controllers.Trees.TreeTableControllerBase`3.GetOperation(`1)">
            <summary>
            获取操作
            </summary>
            <param name="query">查询参数</param>
        </member>
        <member name="M:Bing.Webs.Controllers.Trees.TreeTableControllerBase`3.FirstLoad(`1)">
            <summary>
            首次加载
            </summary>
            <param name="query">查询参数</param>
        </member>
        <member name="M:Bing.Webs.Controllers.Trees.TreeTableControllerBase`3.SyncFirstLoad(`1)">
            <summary>
            同步首次查询
            </summary>
            <param name="query">查询参数</param>
        </member>
        <member name="M:Bing.Webs.Controllers.Trees.TreeTableControllerBase`3.Query(`1)">
            <summary>
            查询
            </summary>
            <param name="query">查询参数</param>
        </member>
        <member name="M:Bing.Webs.Controllers.Trees.TreeTableControllerBase`3.ProcessData(System.Collections.Generic.List{`0},`1)">
            <summary>
            数据处理
            </summary>
            <param name="data">数据列表</param>
            <param name="query">查询参数</param>
        </member>
        <member name="M:Bing.Webs.Controllers.Trees.TreeTableControllerBase`3.ToResult(System.Collections.Generic.List{`0},System.Boolean)">
            <summary>
            转换为树型结果
            </summary>
            <param name="data">数据列表</param>
            <param name="async">是否异步</param>
        </member>
        <member name="M:Bing.Webs.Controllers.Trees.TreeTableControllerBase`3.AsyncFirstLoad(`1)">
            <summary>
            异步首次加载
            </summary>
            <param name="query">查询参数</param>
        </member>
        <member name="M:Bing.Webs.Controllers.Trees.TreeTableControllerBase`3.GetTreeTableResult(System.Collections.Generic.IEnumerable{`0},System.Boolean)">
            <summary>
            获取树型表格结果
            </summary>
            <param name="data">数据</param>
            <param name="async">是否异步</param>
        </member>
        <member name="M:Bing.Webs.Controllers.Trees.TreeTableControllerBase`3.LoadChildren(`1)">
            <summary>
            加载子节点
            </summary>
            <param name="query">查询参数</param>
        </member>
        <member name="M:Bing.Webs.Controllers.Trees.TreeTableControllerBase`3.AsyncLoadChildren(`1)">
            <summary>
            异步加载子节点
            </summary>
            <param name="query">查询参数</param>
        </member>
        <member name="M:Bing.Webs.Controllers.Trees.TreeTableControllerBase`3.GetAsyncLoadChildrenQuery(`1)">
            <summary>
            获取异步加载子节点查询参数
            </summary>
            <param name="query">查询参数</param>
        </member>
        <member name="M:Bing.Webs.Controllers.Trees.TreeTableControllerBase`3.SyncLoadChildren(`1)">
            <summary>
            同步加载子节点
            </summary>
            <param name="query">查询参数</param>
        </member>
        <member name="M:Bing.Webs.Controllers.Trees.TreeTableControllerBase`3.GetSyncLoadChildrenQuery(`1)">
            <summary>
            获取同步加载子节点查询参数
            </summary>
            <param name="query">查询参数</param>
        </member>
        <member name="M:Bing.Webs.Controllers.Trees.TreeTableControllerBase`3.Search(`1)">
            <summary>
            搜索
            </summary>
            <param name="query">查询参数</param>
        </member>
        <member name="T:Bing.Webs.Controllers.Trees.TreeTableResult`1">
            <summary>
            树型表格结果
            </summary>
            <typeparam name="TNode">树型节点类型</typeparam>
        </member>
        <member name="F:Bing.Webs.Controllers.Trees.TreeTableResult`1._data">
            <summary>
            树型参数列表
            </summary>
        </member>
        <member name="F:Bing.Webs.Controllers.Trees.TreeTableResult`1._result">
            <summary>
            树型表格结果
            </summary>
        </member>
        <member name="F:Bing.Webs.Controllers.Trees.TreeTableResult`1._async">
            <summary>
            是否异步加载
            </summary>
        </member>
        <member name="M:Bing.Webs.Controllers.Trees.TreeTableResult`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Boolean)">
            <summary>
            初始化一个<see cref="T:Bing.Webs.Controllers.Trees.TreeTableResult`1"/>类型的实例
            </summary>
            <param name="data">树型参数列表</param>
            <param name="async">是否异步加载</param>
        </member>
        <member name="M:Bing.Webs.Controllers.Trees.TreeTableResult`1.GetResult">
            <summary>
            获取树型表格结果
            </summary>
        </member>
        <member name="M:Bing.Webs.Controllers.Trees.TreeTableResult`1.IsRoot(`0)">
            <summary>
            是否根节点
            </summary>
            <param name="dto">节点</param>
        </member>
        <member name="M:Bing.Webs.Controllers.Trees.TreeTableResult`1.AddNode(`0)">
            <summary>
            添加节点
            </summary>
            <param name="node">节点</param>
        </member>
        <member name="M:Bing.Webs.Controllers.Trees.TreeTableResult`1.Init(`0)">
            <summary>
            初始化节点
            </summary>
            <param name="node">节点</param>
        </member>
        <member name="M:Bing.Webs.Controllers.Trees.TreeTableResult`1.InitExpanded(`0)">
            <summary>
            初始化节点展开状态
            </summary>
            <param name="node">节点</param>
        </member>
        <member name="M:Bing.Webs.Controllers.Trees.TreeTableResult`1.InitLeaf(`0)">
            <summary>
            初始化叶节点状态
            </summary>
            <param name="node">节点</param>
        </member>
        <member name="M:Bing.Webs.Controllers.Trees.TreeTableResult`1.IsLeaf(`0)">
            <summary>
            是否叶节点
            </summary>
            <param name="node">节点</param>
        </member>
        <member name="M:Bing.Webs.Controllers.Trees.TreeTableResult`1.GetChildren(`0)">
            <summary>
            获取节点直接下级
            </summary>
            <param name="node">节点</param>
        </member>
        <member name="T:Bing.Webs.Extensions.ActionContextExtensions">
            <summary>
            操作上下文(<see cref="T:Microsoft.AspNetCore.Mvc.ActionContext"/>) 扩展
            </summary>
        </member>
        <member name="M:Bing.Webs.Extensions.ActionContextExtensions.GetAreaName(Microsoft.AspNetCore.Mvc.ActionContext)">
            <summary>
            获取Area名称
            </summary>
            <param name="context">操作上下文</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Webs.Extensions.ActionContextExtensions.GetControllerName(Microsoft.AspNetCore.Mvc.ActionContext)">
            <summary>
            获取Controller名称
            </summary>
            <param name="context">操作上下文</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Webs.Extensions.ActionContextExtensions.GetActionName(Microsoft.AspNetCore.Mvc.ActionContext)">
            <summary>
            获取Action名称
            </summary>
            <param name="context">操作上下文</param>
            <returns></returns>
        </member>
        <member name="T:Bing.Webs.Extensions.ApplicationBuilderExtensions">
            <summary>
            应用构建器(<see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder"/>) 扩展
            </summary>
        </member>
        <member name="M:Bing.Webs.Extensions.ApplicationBuilderExtensions.UseMvcWithAreaRoute(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.Boolean)">
            <summary>
            添加MVC并Area路由支持
            </summary>
            <param name="app">应用构建器</param>
            <param name="area">是否支持区域路由</param>
            <returns></returns>
        </member>
        <member name="T:Bing.Webs.Extensions.Extensions">
            <summary>
            中间件扩展
            </summary>
            <summary>
            服务扩展
            </summary>
        </member>
        <member name="M:Bing.Webs.Extensions.Extensions.UseErrorLog(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            注册错误日志中间件
            </summary>
            <param name="builder">应用程序生成器</param>
        </member>
        <member name="M:Bing.Webs.Extensions.Extensions.UseRequestLog(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            注册请求日志中间件
            </summary>
            <param name="builder">应用程序生成器</param>
        </member>
        <member name="M:Bing.Webs.Extensions.Extensions.UseStaticHttpContext(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            启用静态请求上下文
            </summary>
            <param name="builder">应用程序生成器</param>
        </member>
        <member name="M:Bing.Webs.Extensions.Extensions.UseRealIp(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            注册真实IP中间件
            </summary>
            <param name="builder">应用程序生成器</param>
        </member>
        <member name="M:Bing.Webs.Extensions.Extensions.UseRealIp(Microsoft.AspNetCore.Hosting.IWebHostBuilder,System.String)">
            <summary>
            注册真实IP
            </summary>
            <param name="hostBuilder">Web主机生成器</param>
            <param name="headerKey">请求头键名</param>
        </member>
        <member name="M:Bing.Webs.Extensions.Extensions.AddRazorHtml(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            注册Razor静态Html生成器
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="T:Bing.Webs.Extensions.ServiceCollectionExtensions">
            <summary>
            服务集合(<see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>) 扩展
            </summary>
        </member>
        <member name="T:Bing.Webs.Extensions.ViewResultExtensions">
            <summary>
            视图结果 扩展
            </summary>
        </member>
        <member name="M:Bing.Webs.Extensions.ViewResultExtensions.ToHtml(Microsoft.AspNetCore.Mvc.ViewResult,Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            转换成Html
            </summary>
            <param name="result">视图结果</param>
            <param name="httpContext">Http上下文</param>
            <returns></returns>
        </member>
        <member name="T:Bing.Webs.Filters.AntiDuplicateRequestAttribute">
            <summary>
            防止重复提交过滤器
            </summary>
        </member>
        <member name="P:Bing.Webs.Filters.AntiDuplicateRequestAttribute.Key">
            <summary>
            业务标识
            </summary>
        </member>
        <member name="P:Bing.Webs.Filters.AntiDuplicateRequestAttribute.Type">
            <summary>
            锁类型
            </summary>
        </member>
        <member name="P:Bing.Webs.Filters.AntiDuplicateRequestAttribute.Interval">
            <summary>
            再次提交时间间隔，单位：秒
            </summary>
        </member>
        <member name="M:Bing.Webs.Filters.AntiDuplicateRequestAttribute.OnActionExecutionAsync(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext,Microsoft.AspNetCore.Mvc.Filters.ActionExecutionDelegate)">
            <summary>
            执行
            </summary>
            <param name="context">操作执行上下文</param>
            <param name="next">操作执行下一步委托</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Webs.Filters.AntiDuplicateRequestAttribute.CreateLock">
            <summary>
            创建业务锁
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bing.Webs.Filters.AntiDuplicateRequestAttribute.GetKey(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            获取锁定标识
            </summary>
            <param name="context">操作执行上下文</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Webs.Filters.AntiDuplicateRequestAttribute.GetExpiration">
            <summary>
            获取到期时间间隔
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bing.Webs.Filters.AntiDuplicateRequestAttribute.GetFailMessage">
            <summary>
            获取失败消息
            </summary>
            <returns></returns>
        </member>
        <member name="T:Bing.Webs.Filters.LockType">
            <summary>
            锁类型
            </summary>
        </member>
        <member name="F:Bing.Webs.Filters.LockType.User">
            <summary>
            用户锁，当用户发出多个执行该操作的请求，只有第一个请求被执行，其它请求被抛弃，其它用户不受影响
            </summary>
        </member>
        <member name="F:Bing.Webs.Filters.LockType.Global">
            <summary>
            全局锁，该操作同时只有一个用户请求被执行
            </summary>
        </member>
        <member name="T:Bing.Webs.Filters.ErrorLogAttribute">
            <summary>
            错误日志过滤器
            </summary>
        </member>
        <member name="M:Bing.Webs.Filters.ErrorLogAttribute.OnException(Microsoft.AspNetCore.Mvc.Filters.ExceptionContext)">
            <summary>
            异常处理
            </summary>
            <param name="context">异常上下文</param>
        </member>
        <member name="T:Bing.Webs.Filters.ExceptionHandlerAttribute">
            <summary>
            异常处理过滤器
            </summary>
        </member>
        <member name="M:Bing.Webs.Filters.ExceptionHandlerAttribute.OnException(Microsoft.AspNetCore.Mvc.Filters.ExceptionContext)">
            <summary>
            异常处理
            </summary>
            <param name="context">异常上下文</param>
        </member>
        <member name="T:Bing.Webs.Filters.IgnoreResultHandlerAttribute">
            <summary>
            忽略响应结果处理
            </summary>
        </member>
        <member name="T:Bing.Webs.Filters.NoCacheAttribute">
            <summary>
            无缓存过滤器
            </summary>
        </member>
        <member name="M:Bing.Webs.Filters.NoCacheAttribute.OnResultExecuting(Microsoft.AspNetCore.Mvc.Filters.ResultExecutingContext)">
            <summary>
            重写OnResultExecuting()方法，取消页面缓存
            </summary>
        </member>
        <member name="T:Bing.Webs.Filters.ResultHandlerAttribute">
            <summary>
            响应结果处理过滤器
            </summary>
        </member>
        <member name="M:Bing.Webs.Filters.ResultHandlerAttribute.OnResultExecuting(Microsoft.AspNetCore.Mvc.Filters.ResultExecutingContext)">
            <summary>
            结果处理
            </summary>
            <param name="context">结果执行上下文</param>
        </member>
        <member name="T:Bing.Webs.Filters.TraceLogAttribute">
            <summary>
            跟踪日志过滤器
            </summary>
        </member>
        <member name="F:Bing.Webs.Filters.TraceLogAttribute.LogName">
            <summary>
            日志名
            </summary>
        </member>
        <member name="P:Bing.Webs.Filters.TraceLogAttribute.Ignore">
            <summary>
            是否忽略，为true不记录日志
            </summary>
        </member>
        <member name="M:Bing.Webs.Filters.TraceLogAttribute.GetLog">
            <summary>
            获取日志操作
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bing.Webs.Filters.TraceLogAttribute.OnActionExecutionAsync(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext,Microsoft.AspNetCore.Mvc.Filters.ActionExecutionDelegate)">
            <summary>
            执行
            </summary>
            <param name="context">操作执行上下文</param>
            <param name="next">委托</param>
        </member>
        <member name="M:Bing.Webs.Filters.TraceLogAttribute.OnActionExecutingAsync(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext,Bing.Logs.ILog)">
            <summary>
            执行前
            </summary>
            <param name="context">操作执行上下文</param>
            <param name="log">日志</param>
        </member>
        <member name="M:Bing.Webs.Filters.TraceLogAttribute.WriteLogAsync(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext,Bing.Logs.ILog)">
            <summary>
            执行前日志
            </summary>
            <param name="context">操作执行上下文</param>
            <param name="log">日志</param>
        </member>
        <member name="M:Bing.Webs.Filters.TraceLogAttribute.AddRequestInfoAsync(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext,Bing.Logs.ILog)">
            <summary>
            添加请求信息参数
            </summary>
            <param name="context">操作执行上下文</param>
            <param name="log">日志</param>
        </member>
        <member name="M:Bing.Webs.Filters.TraceLogAttribute.AddHeaders(Microsoft.AspNetCore.Http.HttpRequest,Bing.Logs.ILog)">
            <summary>
            添加请求头
            </summary>
            <param name="request">Http请求</param>
            <param name="log">日志</param>
        </member>
        <member name="M:Bing.Webs.Filters.TraceLogAttribute.AddFormParamsAsync(Microsoft.AspNetCore.Http.HttpRequest,Bing.Logs.ILog)">
            <summary>
            添加表单参数
            </summary>
            <param name="request">Http请求</param>
            <param name="log">日志</param>
        </member>
        <member name="M:Bing.Webs.Filters.TraceLogAttribute.IsMultipart(System.String)">
            <summary>
            是否multipart内容类型
            </summary>
            <param name="contentType">内容类型</param>
        </member>
        <member name="M:Bing.Webs.Filters.TraceLogAttribute.AddCookie(Microsoft.AspNetCore.Http.HttpRequest,Bing.Logs.ILog)">
            <summary>
            添加Cookie
            </summary>
            <param name="request">Http请求</param>
            <param name="log">日志</param>
        </member>
        <member name="M:Bing.Webs.Filters.TraceLogAttribute.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext,Bing.Logs.ILog)">
            <summary>
            执行后
            </summary>
            <param name="context">操作执行上下文</param>
            <param name="log">日志</param>
        </member>
        <member name="M:Bing.Webs.Filters.TraceLogAttribute.WriteLog(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext,Bing.Logs.ILog)">
            <summary>
            执行后的日志
            </summary>
            <param name="context">操作执行上下文</param>
            <param name="log">日志</param>
        </member>
        <member name="M:Bing.Webs.Filters.TraceLogAttribute.AddResponseInfo(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext,Bing.Logs.ILog)">
            <summary>
            添加响应信息参数
            </summary>
            <param name="context">操作执行上下文</param>
            <param name="log">日志</param>
        </member>
        <member name="M:Bing.Webs.Filters.TraceLogAttribute.AddResult(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext,Bing.Logs.ILog)">
            <summary>
            记录响应结果
            </summary>
            <param name="context">操作执行上下文</param>
            <param name="log">日志</param>
        </member>
        <member name="T:Bing.Webs.Filters.ValidationModelAttribute">
            <summary>
            验证实体过滤器
            </summary>
        </member>
        <member name="P:Bing.Webs.Filters.ValidationModelAttribute.AllowNulls">
            <summary>
            允许空值
            </summary>
        </member>
        <member name="P:Bing.Webs.Filters.ValidationModelAttribute.AllowMultipleResult">
            <summary>
            允许多个结果
            </summary>
        </member>
        <member name="M:Bing.Webs.Filters.ValidationModelAttribute.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            操作执行
            </summary>
            <param name="context">操作执行上下文</param>
        </member>
        <member name="M:Bing.Webs.Filters.ValidationModelAttribute.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            操作执行完毕
            </summary>
            <param name="context">操作执行完毕上下文</param>
        </member>
        <member name="T:Bing.Webs.Middlewares.AdminSafeListMiddleware">
            <summary>
            安全管理列表中间件
            </summary>
        </member>
        <member name="F:Bing.Webs.Middlewares.AdminSafeListMiddleware._next">
            <summary>
            方法
            </summary>
        </member>
        <member name="F:Bing.Webs.Middlewares.AdminSafeListMiddleware._whitelist">
            <summary>
            IP白名单
            </summary>
        </member>
        <member name="M:Bing.Webs.Middlewares.AdminSafeListMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate,System.String)">
            <summary>
            初始化一个<see cref="T:Bing.Webs.Middlewares.AdminSafeListMiddleware"/>类型的实例
            </summary>
            <param name="next">方法</param>
            <param name="whitelist">IP白名单</param>
        </member>
        <member name="M:Bing.Webs.Middlewares.AdminSafeListMiddleware.Invoke(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            执行中间件拦截逻辑
            </summary>
            <param name="context">Http上下文</param>
            <returns></returns>
        </member>
        <member name="T:Bing.Webs.Middlewares.AllowCorsRequestMiddleware">
            <summary>
            允许CORS请求中间件
            </summary>
        </member>
        <member name="F:Bing.Webs.Middlewares.AllowCorsRequestMiddleware._next">
            <summary>
            方法
            </summary>
        </member>
        <member name="M:Bing.Webs.Middlewares.AllowCorsRequestMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate)">
            <summary>
            初始化一个<see cref="T:Bing.Webs.Middlewares.AllowCorsRequestMiddleware"/>类型的实例
            </summary>
            <param name="next">方法</param>
        </member>
        <member name="M:Bing.Webs.Middlewares.AllowCorsRequestMiddleware.Invoke(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            执行中间件拦截逻辑
            </summary>
            <param name="context">Http上下文</param>
        </member>
        <member name="T:Bing.Webs.Middlewares.ErrorLogMiddleware">
            <summary>
            错误日志中间件
            </summary>
        </member>
        <member name="F:Bing.Webs.Middlewares.ErrorLogMiddleware._next">
            <summary>
            方法
            </summary>
        </member>
        <member name="M:Bing.Webs.Middlewares.ErrorLogMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate)">
            <summary>
            初始化一个<see cref="T:Bing.Webs.Middlewares.ErrorLogMiddleware"/>类型的实例
            </summary>
            <param name="next">方法</param>
        </member>
        <member name="M:Bing.Webs.Middlewares.ErrorLogMiddleware.Invoke(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            执行方法
            </summary>
            <param name="context">Http上下文</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Webs.Middlewares.ErrorLogMiddleware.WriteLog(Microsoft.AspNetCore.Http.HttpContext,System.Exception)">
            <summary>
            记录错误日志
            </summary>
            <param name="context">Http上下文</param>
            <param name="ex">异常</param>
        </member>
        <member name="T:Bing.Webs.Middlewares.IMiddleware">
            <summary>
            定义AspNetCore中间件
            </summary>
        </member>
        <member name="M:Bing.Webs.Middlewares.IMiddleware.Invoke(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            执行中间件拦截逻辑
            </summary>
            <param name="context">Http上下文</param>
            <returns></returns>
        </member>
        <member name="T:Bing.Webs.Middlewares.RealIpMiddleware">
            <summary>
            真实IP中间件
            </summary>
        </member>
        <member name="F:Bing.Webs.Middlewares.RealIpMiddleware._next">
            <summary>
            方法
            </summary>
        </member>
        <member name="F:Bing.Webs.Middlewares.RealIpMiddleware._options">
            <summary>
            真实IP选项
            </summary>
        </member>
        <member name="M:Bing.Webs.Middlewares.RealIpMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate,Microsoft.Extensions.Options.IOptions{Bing.Webs.Middlewares.RealIpOptions})">
            <summary>
            初始化一个<see cref="T:Bing.Webs.Middlewares.RealIpMiddleware"/>类型的实例
            </summary>
            <param name="next">方法</param>
            <param name="options">真实IP选项</param>
        </member>
        <member name="M:Bing.Webs.Middlewares.RealIpMiddleware.Invoke(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            执行方法
            </summary>
            <param name="context">Http上下文</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Webs.Middlewares.RealIpMiddleware.WriteLog(Microsoft.AspNetCore.Http.HttpContext,System.Net.IPAddress)">
            <summary>
            写入日志
            </summary>
            <param name="context">Http上下文</param>
            <param name="address">IP地址</param>
        </member>
        <member name="T:Bing.Webs.Middlewares.RealIpOptions">
            <summary>
            真实IP选项
            </summary>
        </member>
        <member name="P:Bing.Webs.Middlewares.RealIpOptions.HeaderKey">
            <summary>
            请求头键名
            </summary>
        </member>
        <member name="T:Bing.Webs.Middlewares.RealIpFilter">
            <summary>
            真实IP过滤器
            </summary>
        </member>
        <member name="M:Bing.Webs.Middlewares.RealIpFilter.Configure(System.Action{Microsoft.AspNetCore.Builder.IApplicationBuilder})">
            <summary>
            配置
            </summary>
            <param name="next">方法</param>
        </member>
        <member name="T:Bing.Webs.Middlewares.RequestLogMiddleware">
            <summary>
            请求日志中间件
            </summary>
        </member>
        <member name="F:Bing.Webs.Middlewares.RequestLogMiddleware._next">
            <summary>
            方法
            </summary>
        </member>
        <member name="M:Bing.Webs.Middlewares.RequestLogMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate)">
            <summary>
            初始化一个<see cref="T:Bing.Webs.Middlewares.RequestLogMiddleware"/>类型的实例
            </summary>
            <param name="next">方法</param>
        </member>
        <member name="M:Bing.Webs.Middlewares.RequestLogMiddleware.Invoke(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            执行方法
            </summary>
            <param name="context">Http上下文</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Webs.Middlewares.RequestLogMiddleware.ExecuteInterception(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            是否执行拦截
            </summary>
            <param name="context">Http上下文</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Webs.Middlewares.RequestLogMiddleware.WriteLogAsync(Microsoft.AspNetCore.Http.HttpContext,System.Diagnostics.Stopwatch)">
            <summary>
            记录请求日志
            </summary>
            <param name="context">Http上下文</param>
            <param name="stopwatch">计时器</param>
        </member>
        <member name="M:Bing.Webs.Middlewares.RequestLogMiddleware.FormatRequestAsync(Microsoft.AspNetCore.Http.HttpRequest)">
            <summary>
            格式化请求内容
            </summary>
            <param name="request">Http请求</param>
        </member>
        <member name="M:Bing.Webs.Middlewares.RequestLogMiddleware.FormatResponseAsync(Microsoft.AspNetCore.Http.HttpResponse)">
            <summary>
            格式化响应内容
            </summary>
            <param name="response">Http响应</param>
        </member>
        <member name="M:Bing.Webs.Middlewares.RequestLogMiddleware.IgnoreOctetStream(Microsoft.AspNetCore.Http.HttpResponse)">
            <summary>
            忽略二进制流
            </summary>
            <param name="response">Http响应</param>
            <returns></returns>
        </member>
        <member name="T:Bing.Webs.Razors.DefaultRazorHtmlGenerator">
            <summary>
            Razor静态Html生成器
            </summary>
        </member>
        <member name="M:Bing.Webs.Razors.DefaultRazorHtmlGenerator.#ctor(Bing.Webs.Razors.IRouteAnalyzer)">
            <summary>
            初始化一个<see cref="T:Bing.Webs.Razors.DefaultRazorHtmlGenerator"/>类型的实例
            </summary>
            <param name="routeAnalyzer">路由分析器</param>
        </member>
        <member name="M:Bing.Webs.Razors.DefaultRazorHtmlGenerator.Generate">
            <summary>
            生成Html文件
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bing.Webs.Razors.DefaultRazorHtmlGenerator.RenderToStringAsync(Bing.Webs.Razors.RouteInformation)">
            <summary>
            渲染视图为字符串
            </summary>
            <param name="info">路由信息</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Webs.Razors.DefaultRazorHtmlGenerator.WriteViewToFileAsync(Bing.Webs.Razors.RouteInformation)">
            <summary>
            将视图写入文件
            </summary>
            <param name="info">路由信息</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Webs.Razors.DefaultRazorHtmlGenerator.GetPath(Bing.Webs.Razors.RouteInformation)">
            <summary>
            获取路径
            </summary>
            <param name="info">路由信息</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Webs.Razors.DefaultRazorHtmlGenerator.GetView(Microsoft.AspNetCore.Mvc.Razor.IRazorViewEngine,Microsoft.AspNetCore.Mvc.ActionContext,Bing.Webs.Razors.RouteInformation)">
            <summary>
            获取Razor视图
            </summary>
            <param name="razorViewEngine">Razor视图引擎</param>
            <param name="actionContext">操作上下文</param>
            <param name="info">路由信息</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Webs.Razors.DefaultRazorHtmlGenerator.GetRouteData(Bing.Webs.Razors.RouteInformation)">
            <summary>
            获取路由数据
            </summary>
            <param name="info">路由信息</param>
            <returns></returns>
        </member>
        <member name="T:Bing.Webs.Razors.IRazorHtmlGenerator">
            <summary>
            Razor Html生成器
            </summary>
        </member>
        <member name="M:Bing.Webs.Razors.IRazorHtmlGenerator.Generate">
            <summary>
            生成Html文件
            </summary>
            <returns></returns>
        </member>
        <member name="T:Bing.Webs.Razors.IRouteAnalyzer">
            <summary>
            路由分析器
            </summary>
        </member>
        <member name="M:Bing.Webs.Razors.IRouteAnalyzer.GetAllRouteInformations">
            <summary>
            获取所有路由信息
            </summary>
            <returns></returns>
        </member>
        <member name="T:Bing.Webs.Razors.RazorHtmlAttribute">
            <summary>
            Razor生成Html静态文件
            </summary>
        </member>
        <member name="P:Bing.Webs.Razors.RazorHtmlAttribute.Path">
            <summary>
            生成路径，相对根路径，范例：/Typings/app/app.component.html
            </summary>
        </member>
        <member name="P:Bing.Webs.Razors.RazorHtmlAttribute.Template">
            <summary>
            路径模板，范例：Typings/app/{area}/{controller}/{controller}-{action}.component.html
            </summary>
        </member>
        <member name="P:Bing.Webs.Razors.RazorHtmlAttribute.ViewName">
            <summary>
            视图名称，范例：/Home/Index
            </summary>
        </member>
        <member name="P:Bing.Webs.Razors.RazorHtmlAttribute.IsPartialView">
            <summary>
            是否部分视图，默认：false
            </summary>
        </member>
        <member name="T:Bing.Webs.Razors.RouteAnalyzer">
            <summary>
            路由分析器
            </summary>
        </member>
        <member name="F:Bing.Webs.Razors.RouteAnalyzer._actionDescriptorCollectionProvider">
            <summary>
            操作描述集合提供程序
            </summary>
        </member>
        <member name="M:Bing.Webs.Razors.RouteAnalyzer.#ctor(Microsoft.AspNetCore.Mvc.Infrastructure.IActionDescriptorCollectionProvider)">
            <summary>
            初始化一个<see cref="T:Bing.Webs.Razors.RouteAnalyzer"/>类型的实例
            </summary>
            <param name="actionDescriptorCollectionProvider">操作描述集合提供程序</param>
        </member>
        <member name="M:Bing.Webs.Razors.RouteAnalyzer.GetAllRouteInformations">
            <summary>
            获取所有路由信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bing.Webs.Razors.RouteAnalyzer.SetHtmlInfo(Bing.Webs.Razors.RouteInformation,Microsoft.AspNetCore.Mvc.Controllers.ControllerActionDescriptor)">
            <summary>
            设置Html信息
            </summary>
            <param name="routeInformation">路由信息</param>
            <param name="controllerActionDescriptor">控制器</param>
        </member>
        <member name="T:Bing.Webs.Razors.RouteInformation">
            <summary>
            路由信息
            </summary>
        </member>
        <member name="P:Bing.Webs.Razors.RouteInformation.AreaName">
            <summary>
            区域名称
            </summary>
        </member>
        <member name="P:Bing.Webs.Razors.RouteInformation.ControllerName">
            <summary>
            控制器名称
            </summary>
        </member>
        <member name="P:Bing.Webs.Razors.RouteInformation.ActionName">
            <summary>
            操作名称
            </summary>
        </member>
        <member name="P:Bing.Webs.Razors.RouteInformation.Path">
            <summary>
            Razor页面路径
            </summary>
        </member>
        <member name="P:Bing.Webs.Razors.RouteInformation.Invocation">
            <summary>
            调用方法
            </summary>
        </member>
        <member name="P:Bing.Webs.Razors.RouteInformation.FilePath">
            <summary>
            文件路径
            </summary>
        </member>
        <member name="P:Bing.Webs.Razors.RouteInformation.TemplatePath">
            <summary>
            模板路径
            </summary>
        </member>
        <member name="P:Bing.Webs.Razors.RouteInformation.ViewName">
            <summary>
            视图名称
            </summary>
        </member>
        <member name="P:Bing.Webs.Razors.RouteInformation.IsPartialView">
            <summary>
            是否部分视图
            </summary>
        </member>
        <member name="T:Bing.Webs.WebResource">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:Bing.Webs.WebResource.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:Bing.Webs.WebResource.Culture">
            <summary>
              重写当前线程的 CurrentUICulture 属性
              重写当前线程的 CurrentUICulture 属性。
            </summary>
        </member>
        <member name="P:Bing.Webs.WebResource.CreateRequestIsEmpty">
            <summary>
              查找类似 创建参数不能为空 的本地化字符串。
            </summary>
        </member>
        <member name="P:Bing.Webs.WebResource.IdIsEmpty">
            <summary>
              查找类似 Id不能为空 的本地化字符串。
            </summary>
        </member>
        <member name="P:Bing.Webs.WebResource.QueryIsEmpty">
            <summary>
              查找类似 查询参数不能为空 的本地化字符串。
            </summary>
        </member>
        <member name="P:Bing.Webs.WebResource.UpdateRequestIsEmpty">
            <summary>
              查找类似 修改参数不能为空 的本地化字符串。
            </summary>
        </member>
    </members>
</doc>
