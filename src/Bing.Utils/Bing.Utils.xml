<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Bing.Utils</name>
    </assembly>
    <members>
        <member name="T:Bing.Utils.Configs.ConfigHelper">
            <summary>
            配置文件 操作辅助类
            </summary>
        </member>
        <member name="M:Bing.Utils.Configs.ConfigHelper.GetJsonConfig(System.String,System.String)">
            <summary>
            获取Json配置文件
            </summary>
            <param name="configFileName">配置文件名。默认：appsettings.json</param>
            <param name="basePath">基路径</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Configs.ConfigHelper.GetXmlConfig(System.String,System.String)">
            <summary>
            获取Xml配置文件
            </summary>
            <param name="configFileName">配置文件名。默认：appsettings.xml</param>
            <param name="basePath">基路径</param>
            <returns></returns>
        </member>
        <member name="T:Bing.Utils.Develops.CodeRamer">
            <summary>
            代码性能测试内存计算工具
            </summary>
        </member>
        <member name="P:Bing.Utils.Develops.CodeRamer.WriteLine">
            <summary>
            输出内容
            </summary>
        </member>
        <member name="M:Bing.Utils.Develops.CodeRamer.Initialize">
            <summary>
            内存计算初始化，同时后续操作进行预热，以避免初次操作带来的性能影响
            </summary>
        </member>
        <member name="M:Bing.Utils.Develops.CodeRamer.Ram(System.String,System.Action)">
            <summary>
            内存计算，传入操作标识名，重复次数，操作过程获取操作的性能数据
            </summary>
            <param name="name">操作标识名</param>
            <param name="action">操作过程的Action</param>
        </member>
        <member name="T:Bing.Utils.Develops.CodeTimer">
            <summary>
            代码性能测试计时器
            </summary>
        </member>
        <member name="P:Bing.Utils.Develops.CodeTimer.WriteLine">
            <summary>
            输出内容
            </summary>
        </member>
        <member name="M:Bing.Utils.Develops.CodeTimer.GetCycleCount">
            <summary>
            获取当前CPU循环次数
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Develops.CodeTimer.Initialize">
            <summary>
            计时器初始化，对计时器进行初始化操作，同时对后续操作进行预热，以避免初次操作带来的性能影响
            </summary>
        </member>
        <member name="M:Bing.Utils.Develops.CodeTimer.Time(System.String,System.Int32,System.Action)">
            <summary>
            计时器，传入操作标识名，重复次数，操作过程获取操作的性能数据
            </summary>
            <param name="name">操作标识名</param>
            <param name="iteration">重复次数</param>
            <param name="action">操作过程的Action</param>
        </member>
        <member name="M:Bing.Utils.Develops.CodeTimer.InvokeAndGetTimeSpan(System.Action)">
            <summary>
            获取调用方法时间戳，执行一个方法并返回执行时间戳
            </summary>
            <param name="action">执行方法</param>
            <returns>执行时间戳</returns>
        </member>
        <member name="M:Bing.Utils.Develops.CodeTimer.InvokeAndWriteTimeSpan(System.Action)">
            <summary>
            输出调用方法实际执行时间间隔（毫秒）
            </summary>
            <param name="action">执行方法</param>                
        </member>
        <member name="M:Bing.Utils.Develops.CodeTimer.InvokeAndGetmemoryUsed(System.Action)">
            <summary>
            获取调用方法托管内存使用大小（可能内存回收会导致不准确）
            </summary>
            <param name="action">执行方法</param>
            <returns>托管内存使用大小</returns>
        </member>
        <member name="M:Bing.Utils.Develops.CodeTimer.InvokeAndWriteMemoryUsed(System.Action)">
            <summary>
            输出调用方法实际执行托管内存使用大小（字节）
            </summary>
            <param name="action">执行方法</param>
        </member>
        <member name="M:Bing.Utils.Develops.CodeTimer.InvokeAndWriteAll(System.Action)">
            <summary>
            输出调用方法实际执行的时间以及托管内存使用大小
            </summary>
            <param name="action">执行方法</param>
        </member>
        <member name="M:Bing.Utils.Develops.CodeTimer.CodeExecuteTime(System.Action)">
            <summary>
            输出代码执行时间
            </summary>
            <param name="action">执行方法</param>
        </member>
        <member name="T:Bing.Utils.Develops.NativeMethods">
            <summary>
            本地方法
            </summary>
        </member>
        <member name="M:Bing.Utils.Develops.NativeMethods.QueryThreadCycleTime(System.IntPtr,System.UInt64@)">
            <summary>
            查询线程循环时间
            </summary>
            <param name="threadHandle">线程句柄</param>
            <param name="cycleTime">循环时间</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Develops.NativeMethods.GetCurrentThread">
            <summary>
            获取当前线程
            </summary>
            <returns></returns>
        </member>
        <member name="T:Bing.Utils.Develops.UnitTester">
            <summary>
            单元测试辅助操作
            </summary>
        </member>
        <member name="P:Bing.Utils.Develops.UnitTester.WriteLine">
            <summary>
            输出内容
            </summary>
        </member>
        <member name="M:Bing.Utils.Develops.UnitTester.TestConcurrency(System.Action,System.Int32)">
            <summary>
            并发测试
            </summary>
            <param name="action">各线程执行的方法</param>
            <param name="threadNumber">启动线程数，默认1个</param>
        </member>
        <member name="T:Bing.Utils.DisposeAction">
            <summary>
            释放操作
            </summary>
        </member>
        <member name="F:Bing.Utils.DisposeAction._action">
            <summary>
            操作
            </summary>
        </member>
        <member name="M:Bing.Utils.DisposeAction.#ctor(System.Action)">
            <summary>
            初始化一个<see cref="T:Bing.Utils.DisposeAction"/>类型的实例
            </summary>
            <param name="action">操作</param>
        </member>
        <member name="M:Bing.Utils.DisposeAction.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="T:Bing.Utils.Expressions.ParameterRebinder">
            <summary>
            参数重绑定操作
            </summary>
        </member>
        <member name="F:Bing.Utils.Expressions.ParameterRebinder._map">
            <summary>
            参数字典
            </summary>
        </member>
        <member name="M:Bing.Utils.Expressions.ParameterRebinder.#ctor(System.Collections.Generic.Dictionary{System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.ParameterExpression})">
            <summary>
            初始化一个<see cref="T:Bing.Utils.Expressions.ParameterRebinder"/>类型的实例
            </summary>
            <param name="map">参数字典</param>
        </member>
        <member name="M:Bing.Utils.Expressions.ParameterRebinder.ReplaceParameters(System.Collections.Generic.Dictionary{System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression)">
            <summary>
            替换参数
            </summary>
            <param name="map">参数字典</param>
            <param name="exp">表达式</param>
        </member>
        <member name="M:Bing.Utils.Expressions.ParameterRebinder.VisitParameter(System.Linq.Expressions.ParameterExpression)">
            <summary>
            访问参数
            </summary>
            <param name="parameterExpression">参数表达式</param>
        </member>
        <member name="T:Bing.Utils.Expressions.PredicateExpressionBuilder`1">
            <summary>
            谓词表达式生成器
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
        </member>
        <member name="F:Bing.Utils.Expressions.PredicateExpressionBuilder`1._parameter">
            <summary>
            参数表达式
            </summary>
        </member>
        <member name="F:Bing.Utils.Expressions.PredicateExpressionBuilder`1._result">
            <summary>
            结果表达式
            </summary>
        </member>
        <member name="M:Bing.Utils.Expressions.PredicateExpressionBuilder`1.#ctor">
            <summary>
            初始化一个<see cref="T:Bing.Utils.Expressions.PredicateExpressionBuilder`1"/>类型的实例
            </summary>
        </member>
        <member name="M:Bing.Utils.Expressions.PredicateExpressionBuilder`1.GetParameter">
            <summary>
            获取参数表达式
            </summary>
        </member>
        <member name="M:Bing.Utils.Expressions.PredicateExpressionBuilder`1.Append``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},Bing.Utils.Operator,System.Object)">
            <summary>
            添加表达式
            </summary>
            <typeparam name="TProperty">属性类型</typeparam>
            <param name="propertyExpression">属性表达式</param>
            <param name="operator">运算符</param>
            <param name="value">值</param>
        </member>
        <member name="M:Bing.Utils.Expressions.PredicateExpressionBuilder`1.Append``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},Bing.Utils.Operator,System.Linq.Expressions.Expression)">
            <summary>
            添加表达式
            </summary>
            <typeparam name="TProperty">属性类型</typeparam>
            <param name="propertyExpression">属性表达式</param>
            <param name="operator">运算符</param>
            <param name="value">值</param>
        </member>
        <member name="M:Bing.Utils.Expressions.PredicateExpressionBuilder`1.Append(System.String,Bing.Utils.Operator,System.Object)">
            <summary>
            添加表达式
            </summary>
            <param name="property">属性名</param>
            <param name="operator">运算符</param>
            <param name="value">值</param>
        </member>
        <member name="M:Bing.Utils.Expressions.PredicateExpressionBuilder`1.Append(System.String,Bing.Utils.Operator,System.Linq.Expressions.Expression)">
            <summary>
            添加表达式
            </summary>
            <param name="property">属性名</param>
            <param name="operator">运算符</param>
            <param name="value">值</param>
        </member>
        <member name="M:Bing.Utils.Expressions.PredicateExpressionBuilder`1.Clear">
            <summary>
            清空
            </summary>
        </member>
        <member name="M:Bing.Utils.Expressions.PredicateExpressionBuilder`1.ToLambda">
            <summary>
            转换为Lambda表达式
            </summary>
        </member>
        <member name="T:Bing.Utils.Extensions.BooleanExtensions">
            <summary>
            布尔值(<see cref="T:System.Boolean"/>) 扩展
            </summary>
        </member>
        <member name="M:Bing.Utils.Extensions.BooleanExtensions.ToLower(System.Boolean)">
            <summary>
            将布尔值转换为小写字符串
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.BooleanExtensions.ToYesNoString(System.Boolean)">
            <summary>
            将布尔值转换为等效的字符串表示形式（Yes、No）
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.BooleanExtensions.ToBinaryTypeNumber(System.Boolean)">
            <summary>
            将布尔值转换为二进制数字类型（true:1、false:0）
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.BooleanExtensions.ToChineseString(System.Boolean)">
            <summary>
            将布尔值转换为等效中文字符串表示形式（true:是、false:否）
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.BooleanExtensions.ToChineseString(System.Boolean,System.String,System.String)">
            <summary>
            将布尔值转换为等效中文字符串表示形式
            </summary>
            <param name="value">值</param>
            <param name="trueStr">为True时的中文</param>
            <param name="falseStr">为False时的中文</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.BooleanExtensions.ToChineseString(System.Nullable{System.Boolean})">
            <summary>
            将布尔值转换为等效中文字符串表示形式（true:是、false:否）
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.BooleanExtensions.ToChineseString(System.Nullable{System.Boolean},System.String,System.String)">
            <summary>
            将布尔值转换为等效中文字符串表示形式（true:是、false:否）
            </summary>
            <param name="value">值</param>
            <param name="trueStr">为True时的中文</param>
            <param name="falseStr">为False时的中文</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.BooleanExtensions.IfTrue``1(System.Boolean,``0)">
            <summary>
            结果为true时，输出参数
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="value">值</param>
            <param name="t">输出参数</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.BooleanExtensions.IfTrue``1(System.Nullable{System.Boolean},``0)">
            <summary>
            结果为true时，输出参数
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="value">值</param>
            <param name="t">输出参数</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.BooleanExtensions.IfTrue(System.Boolean,System.Action)">
            <summary>
            结果为true时，执行方法
            </summary>
            <param name="value">值</param>
            <param name="action">执行方法</param>
        </member>
        <member name="M:Bing.Utils.Extensions.BooleanExtensions.IfTrue(System.Nullable{System.Boolean},System.Action)">
            <summary>
            结果为true时，执行方法
            </summary>
            <param name="value">值</param>
            <param name="action">执行方法</param>
        </member>
        <member name="M:Bing.Utils.Extensions.BooleanExtensions.IfFalse``1(System.Boolean,``0)">
            <summary>
            结果为false时，输出参数
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="value">值</param>
            <param name="t">输出参数</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.BooleanExtensions.IfFalse``1(System.Nullable{System.Boolean},``0)">
            <summary>
            结果为false时，输出参数
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="value">值</param>
            <param name="t">输出参数</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.BooleanExtensions.IfFalse(System.Boolean,System.Action)">
            <summary>
            结果为false时，执行方法
            </summary>
            <param name="value">值</param>
            <param name="action">执行方法</param>
        </member>
        <member name="M:Bing.Utils.Extensions.BooleanExtensions.IfFalse(System.Nullable{System.Boolean},System.Action)">
            <summary>
            结果为false时，执行方法
            </summary>
            <param name="value">值</param>
            <param name="action">执行方法</param>
        </member>
        <member name="T:Bing.Utils.Extensions.ByteExtensions">
            <summary>
            字节值(<see cref="T:System.Byte"/>) 扩展
            </summary>
        </member>
        <member name="M:Bing.Utils.Extensions.ByteExtensions.Max(System.Byte,System.Byte)">
            <summary>
            获取两个数中最大值
            </summary>
            <param name="value1">值1</param>
            <param name="value2">值2</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.ByteExtensions.Min(System.Byte,System.Byte)">
            <summary>
            获取两个数中最小值
            </summary>
            <param name="value1">值1</param>
            <param name="value2">值2</param>
            <returns></returns>
        </member>
        <member name="T:Bing.Utils.Extensions.CharExtensions">
            <summary>
            字符(<see cref="T:System.Char"/>) 扩展
            </summary>
        </member>
        <member name="M:Bing.Utils.Extensions.CharExtensions.In(System.Char,System.Char[])">
            <summary>
            判断当前字符是否在目标字符数组中
            </summary>
            <param name="this">字符</param>
            <param name="values">字符数组</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.CharExtensions.NotIn(System.Char,System.Char[])">
            <summary>
            判断当前字符是否不在目标字符数组中
            </summary>
            <param name="this">字符</param>
            <param name="values">字符数组</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.CharExtensions.Repeat(System.Char,System.Int32)">
            <summary>
            重复拼接字符
            </summary>
            <param name="this">字符</param>
            <param name="repeatCount">重复数</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.CharExtensions.GetAsciiCode(System.Char)">
            <summary>
            获取ASCII编码
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.CharExtensions.IsChinese(System.Char)">
            <summary>
            是否中文字符串
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.CharExtensions.IsLine(System.Char)">
            <summary>
            是否行标识
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.CharExtensions.IsDoubleByte(System.Char)">
            <summary>
            是否双字节字符
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.CharExtensions.ToDBC(System.Char)">
            <summary>
            转换为半角字符
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.CharExtensions.ToSBC(System.Char)">
            <summary>
            转换为全角字符
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="T:Bing.Utils.Extensions.Bases.DecimalExtensions">
            <summary>
            <see cref="T:System.Decimal"/> 扩展
            </summary>
        </member>
        <member name="M:Bing.Utils.Extensions.Bases.DecimalExtensions.Rounding(System.Decimal)">
            <summary>
            将数值四舍五入，保留两位小数
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.Bases.DecimalExtensions.Rounding(System.Decimal,System.Int32)">
            <summary>
            将数值四舍五入，保留指定小数位数
            </summary>
            <param name="value">值</param>
            <param name="decimals">小数位数</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.Bases.DecimalExtensions.Abs(System.Decimal)">
            <summary>
            返回数字的绝对值
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.Bases.DecimalExtensions.Abs(System.Collections.Generic.IEnumerable{System.Decimal})">
            <summary>
            返回数字的绝对值
            </summary>
            <param name="values">值</param>
            <returns></returns>
        </member>
        <member name="T:Bing.Utils.Extensions.DoubleExtensions">
            <summary>
            双精度浮点型(<see cref="T:System.Double"/>) 扩展
            </summary>
        </member>
        <member name="M:Bing.Utils.Extensions.DoubleExtensions.InRange(System.Double,System.Double,System.Double)">
            <summary>
            判断当前值是否在指定范围内
            </summary>
            <param name="value">double</param>
            <param name="minValue">最小值</param>
            <param name="maxValue">最大值</param>
            <returns>bool</returns>
        </member>
        <member name="M:Bing.Utils.Extensions.DoubleExtensions.InRange(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            判断值是否在指定范围内，否则返回默认值
            </summary>
            <param name="value">double</param>
            <param name="minValue">最小值</param>
            <param name="maxValue">最大值</param>
            <param name="defaultValue">默认值</param>
            <returns>double</returns>
        </member>
        <member name="M:Bing.Utils.Extensions.DoubleExtensions.Days(System.Double)">
            <summary>
            获取日期间隔，根据数值获取时间间隔
            </summary>
            <param name="days">double</param>
            <returns>日期间隔</returns>
        </member>
        <member name="M:Bing.Utils.Extensions.DoubleExtensions.Hours(System.Double)">
            <summary>
            获取小时间隔，根据数值获取时间间隔
            </summary>
            <param name="hours">double</param>
            <returns>小时间隔</returns>
        </member>
        <member name="M:Bing.Utils.Extensions.DoubleExtensions.Minutes(System.Double)">
            <summary>
            获取分钟间隔，根据数值获取时间间隔
            </summary>
            <param name="minutes">double</param>
            <returns>分钟间隔</returns>
        </member>
        <member name="M:Bing.Utils.Extensions.DoubleExtensions.Seconds(System.Double)">
            <summary>
            获取秒间隔，根据数值获取时间间隔
            </summary>
            <param name="seconds">double</param>
            <returns>秒间隔</returns>
        </member>
        <member name="M:Bing.Utils.Extensions.DoubleExtensions.Milliseconds(System.Double)">
            <summary>
            获取毫秒间隔，根据数值获取时间间隔
            </summary>
            <param name="milliseconds">double</param>
            <returns>毫秒间隔</returns>
        </member>
        <member name="M:Bing.Utils.Extensions.DoubleExtensions.Round(System.Double,System.Int32,System.Int32)">
            <summary>
            精确小数位数
            </summary>
            <param name="value">值</param>
            <param name="length">小数点后位数</param>
            <param name="multiple">倍数。如果是百分制则乘以100</param>
        </member>
        <member name="M:Bing.Utils.Extensions.DoubleExtensions.IsNaN(System.Double)">
            <summary>
            判断是否0/0的接口，不是一个数字
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:Bing.Utils.Extensions.DoubleExtensions.FixValue(System.Double,System.Double)">
            <summary>
            修复double类型当被除数为0时的异常
            </summary>
            <param name="value">值</param>
            <param name="defValue">默认值</param>
        </member>
        <member name="T:Bing.Utils.Extensions.FloatExtensions">
            <summary>
            单精度浮点型(<see cref="T:System.Single"/>) 扩展
            </summary>
        </member>
        <member name="M:Bing.Utils.Extensions.FloatExtensions.InRange(System.Single,System.Single,System.Single)">
            <summary>
            判断当前值是否在指定范围内
            </summary>
            <param name="value">float</param>
            <param name="minValue">最小值</param>
            <param name="maxValue">最大值</param>
            <returns>bool</returns>
        </member>
        <member name="M:Bing.Utils.Extensions.FloatExtensions.InRange(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            判断值是否在指定范围内，否则返回默认值
            </summary>
            <param name="value">float</param>
            <param name="minValue">最小值</param>
            <param name="maxValue">最大值</param>
            <param name="defaultValue">默认值</param>
            <returns>float</returns>
        </member>
        <member name="M:Bing.Utils.Extensions.FloatExtensions.Days(System.Single)">
            <summary>
            获取日期间隔，根据数值获取时间间隔
            </summary>
            <param name="days">float</param>
            <returns>日期间隔</returns>
        </member>
        <member name="M:Bing.Utils.Extensions.FloatExtensions.Hours(System.Single)">
            <summary>
            获取小时间隔，根据数值获取时间间隔
            </summary>
            <param name="hours">float</param>
            <returns>小时间隔</returns>
        </member>
        <member name="M:Bing.Utils.Extensions.FloatExtensions.Minutes(System.Single)">
            <summary>
            获取分钟间隔，根据数值获取时间间隔
            </summary>
            <param name="minutes">float</param>
            <returns>分钟间隔</returns>
        </member>
        <member name="M:Bing.Utils.Extensions.FloatExtensions.Seconds(System.Single)">
            <summary>
            获取秒间隔，根据数值获取时间间隔
            </summary>
            <param name="seconds">float</param>
            <returns>秒间隔</returns>
        </member>
        <member name="M:Bing.Utils.Extensions.FloatExtensions.Milliseconds(System.Single)">
            <summary>
            获取毫秒间隔，根据数值获取时间间隔
            </summary>
            <param name="milliseconds">float</param>
            <returns>毫秒间隔</returns>
        </member>
        <member name="T:Bing.Utils.Extensions.IntExtensions">
            <summary>
            整型(<see cref="T:System.Int32"/>) 扩展
            </summary>
        </member>
        <member name="M:Bing.Utils.Extensions.IntExtensions.Times(System.Int32,System.Action)">
            <summary>
            执行n次指定操作，基于底层int值
            </summary>
            <param name="value">int</param>
            <param name="action">操作</param>
        </member>
        <member name="M:Bing.Utils.Extensions.IntExtensions.Times(System.Int32,System.Action{System.Int32})">
            <summary>
            执行n次指定操作，基于底层int值
            </summary>
            <param name="value">int</param>
            <param name="action">操作</param>
        </member>
        <member name="M:Bing.Utils.Extensions.IntExtensions.IsEven(System.Int32)">
            <summary>
            是否偶数
            </summary>
            <param name="value">int</param>
            <returns>bool</returns>
        </member>
        <member name="M:Bing.Utils.Extensions.IntExtensions.IsOdd(System.Int32)">
            <summary>
            是否奇数
            </summary>
            <param name="value">int</param>
            <returns>bool</returns>
        </member>
        <member name="M:Bing.Utils.Extensions.IntExtensions.InRange(System.Int32,System.Int32,System.Int32)">
            <summary>
            判断当前值是否在指定范围内
            </summary>
            <param name="value">int</param>
            <param name="minValue">最小值</param>
            <param name="maxValue">最大值</param>
            <returns>bool</returns>
        </member>
        <member name="M:Bing.Utils.Extensions.IntExtensions.InRange(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            判断值是否在指定范围内，否则返回默认值
            </summary>
            <param name="value">long</param>
            <param name="minValue">最小值</param>
            <param name="maxValue">最大值</param>
            <param name="defaultValue">默认值</param>
            <returns>int</returns>
        </member>
        <member name="M:Bing.Utils.Extensions.IntExtensions.IsPrime(System.Int32)">
            <summary>
            是否质数（素数），一个质数（或素数）是具有两个不同约束的自然数：1和它本身
            </summary>
            <param name="value">int</param>
            <returns>bool</returns>
        </member>
        <member name="M:Bing.Utils.Extensions.IntExtensions.ToOrdinal(System.Int32)">
            <summary>
            将数值转换为顺序序号，（英语序号）
            </summary>
            <param name="i">int</param>
            <returns>返回的字符串包含序号标记毗邻的数字表示</returns>
        </member>
        <member name="M:Bing.Utils.Extensions.IntExtensions.ToOrdinal(System.Int32,System.String)">
            <summary>
            将数值转换为指定格式的序号字符串，（英语序号）
            </summary>
            <param name="i">int</param>
            <param name="format">自定义格式</param>
            <returns>返回的字符串包含序号标记毗邻的数字表示</returns>
        </member>
        <member name="M:Bing.Utils.Extensions.IntExtensions.AsLong(System.Int32)">
            <summary>
            Int转为Long类型
            </summary>
            <param name="i">int</param>
            <returns>long</returns>
        </member>
        <member name="M:Bing.Utils.Extensions.IntExtensions.IsIndexInArray(System.Int32,System.Array)">
            <summary>
            判断索引是否在数组指定范围内
            </summary>
            <param name="index">索引</param>
            <param name="array">数组</param>
            <returns>bool</returns>
        </member>
        <member name="M:Bing.Utils.Extensions.IntExtensions.GetArrayIndex(System.Int32)">
            <summary>
            获取真实数组索引
            </summary>
            <param name="at">int</param>
            <returns>数组索引</returns>
        </member>
        <member name="M:Bing.Utils.Extensions.IntExtensions.Days(System.Int32)">
            <summary>
            获取日期间隔，根据数值获取时间间隔
            </summary>
            <param name="days">int</param>
            <returns>日期间隔</returns>
        </member>
        <member name="M:Bing.Utils.Extensions.IntExtensions.Hours(System.Int32)">
            <summary>
            获取小时间隔，根据数值获取时间间隔
            </summary>
            <param name="hours">int</param>
            <returns>小时间隔</returns>
        </member>
        <member name="M:Bing.Utils.Extensions.IntExtensions.Minutes(System.Int32)">
            <summary>
            获取分钟间隔，根据数值获取时间间隔
            </summary>
            <param name="minutes">int</param>
            <returns>分钟间隔</returns>
        </member>
        <member name="M:Bing.Utils.Extensions.IntExtensions.Seconds(System.Int32)">
            <summary>
            获取秒间隔，根据数值获取时间间隔
            </summary>
            <param name="seconds">int</param>
            <returns>秒间隔</returns>
        </member>
        <member name="M:Bing.Utils.Extensions.IntExtensions.Milliseconds(System.Int32)">
            <summary>
            获取毫秒间隔，根据数值获取时间间隔
            </summary>
            <param name="milliseconds">int</param>
            <returns>毫秒间隔</returns>
        </member>
        <member name="M:Bing.Utils.Extensions.IntExtensions.Ticks(System.Int32)">
            <summary>
            获取刻度间隔，根据数值获取时间间隔
            </summary>
            <param name="ticks">int</param>
            <returns>刻度间隔</returns>
        </member>
        <member name="T:Bing.Utils.Extensions.LongExtensions">
            <summary>
            长整型(<see cref="T:System.Int64"/>) 扩展
            </summary>
        </member>
        <member name="M:Bing.Utils.Extensions.LongExtensions.Times(System.Int64,System.Action)">
            <summary>
            执行n次指定操作，基于底层long值
            </summary>
            <param name="value">值</param>
            <param name="action">操作-委托</param>
        </member>
        <member name="M:Bing.Utils.Extensions.LongExtensions.Times(System.Int64,System.Action{System.Int64})">
            <summary>
            执行n次指定操作，基于底层long值
            </summary>
            <param name="value">值</param>
            <param name="action">操作-委托</param>
        </member>
        <member name="M:Bing.Utils.Extensions.LongExtensions.IsEven(System.Int64)">
            <summary>
            是否偶数
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.LongExtensions.IsOdd(System.Int64)">
            <summary>
            是否奇数
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.LongExtensions.InRange(System.Int64,System.Int64,System.Int64)">
            <summary>
            判断值是否在指定范围内
            </summary>
            <param name="value">值</param>
            <param name="minValue">最小值</param>
            <param name="maxValue">最大值</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.LongExtensions.InRange(System.Int64,System.Int64,System.Int64,System.Int64)">
            <summary>
            判断值是否在指定范围内，否则返回默认值
            </summary>
            <param name="value">值</param>
            <param name="minValue">最小值</param>
            <param name="maxValue">最大值</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.LongExtensions.IsPrime(System.Int64)">
            <summary>
            是否质数（素数），一个质数（或素数）是具有两个不同约束的自然数：1和它本身
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.LongExtensions.ToOrdinal(System.Int64)">
            <summary>
            将数值转换为顺序序号，（英语序号）
            </summary>
            <param name="i">值</param>
            <returns>返回的字符串包含序号标记毗邻的数字表示</returns>
        </member>
        <member name="M:Bing.Utils.Extensions.LongExtensions.ToOrdinal(System.Int64,System.String)">
            <summary>
            将数值转换为指定格式的序号字符串，（英语序号）
            </summary>
            <param name="i">值</param>
            <param name="format">自定义格式</param>
            <returns>返回的字符串包含序号标记毗邻的数字表示</returns>
        </member>
        <member name="M:Bing.Utils.Extensions.LongExtensions.Days(System.Int64)">
            <summary>
            获取日期间隔，根据数值获取时间间隔
            </summary>
            <param name="days">值</param>
            <returns>日期间隔</returns>
        </member>
        <member name="M:Bing.Utils.Extensions.LongExtensions.Hours(System.Int64)">
            <summary>
            获取小时间隔，根据数值获取时间间隔
            </summary>
            <param name="hours">值</param>
            <returns>小时间隔</returns>
        </member>
        <member name="M:Bing.Utils.Extensions.LongExtensions.Minutes(System.Int64)">
            <summary>
            获取分钟间隔，根据数值获取时间间隔
            </summary>
            <param name="minutes">值</param>
            <returns>分钟间隔</returns>
        </member>
        <member name="M:Bing.Utils.Extensions.LongExtensions.Seconds(System.Int64)">
            <summary>
            获取秒间隔，根据数值获取时间间隔
            </summary>
            <param name="seconds">long</param>
            <returns>秒间隔</returns>
        </member>
        <member name="M:Bing.Utils.Extensions.LongExtensions.Milliseconds(System.Int64)">
            <summary>
            获取毫秒间隔，根据数值获取时间间隔
            </summary>
            <param name="milliseconds">long</param>
            <returns>毫秒间隔</returns>
        </member>
        <member name="M:Bing.Utils.Extensions.LongExtensions.Ticks(System.Int64)">
            <summary>
            获取刻度间隔，根据数值获取时间间隔
            </summary>
            <param name="ticks">long</param>
            <returns>刻度间隔</returns>
        </member>
        <member name="M:Bing.Utils.Extensions.LongExtensions.ToDateTime(System.Int64)">
            <summary>
            将给定 Unix 时间戳 转换为 DateTime 时间。
            </summary>
            <param name="unixTimeStamp">Unix 时间戳。</param>
        </member>
        <member name="T:Bing.Utils.Extensions.ObjectExtensions">
            <summary>
            对象(<see cref="T:System.Object"/>) 扩展
            </summary>
        </member>
        <member name="M:Bing.Utils.Extensions.ObjectExtensions.DeepClone``1(``0)">
            <summary>
            对象深度拷贝，复制相同数据，但指向内存位置不一样的数据
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="obj">值</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.ObjectExtensions.ClonePropertyFrom(System.Object,System.Object)">
            <summary>
            从源对象赋值到当前对象
            </summary>
            <param name="destination">当前对象</param>
            <param name="source">数据源对象</param>
            <returns>成功复制的值个数</returns>
        </member>
        <member name="M:Bing.Utils.Extensions.ObjectExtensions.ClonePropertyFrom(System.Object,System.Object,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            从源对象赋值到当前对象
            </summary>
            <param name="destination">当前对象</param>
            <param name="source">数据源对象</param>
            <param name="excludeName">排除下不要复制的属性名称</param>
            <returns>成功复制的值个数</returns>
        </member>
        <member name="M:Bing.Utils.Extensions.ObjectExtensions.ClonePropertyFrom(System.Object,System.Object,System.Type,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            从源对象赋值到当前对象
            </summary>
            <param name="this">当前对象</param>
            <param name="source">数据源对象</param>
            <param name="type">复制的属性的类型</param>
            <param name="excludeName">排除不要复制属性名称</param>
            <returns>成功复制的值个数</returns>
        </member>
        <member name="M:Bing.Utils.Extensions.ObjectExtensions.ClonePropertyTo(System.Object,System.Object)">
            <summary>
            从当前对象赋值到目标对象
            </summary>
            <param name="source">当前对象</param>
            <param name="destination">目标对象</param>
            <returns>成功复制的值个数</returns>
        </member>
        <member name="M:Bing.Utils.Extensions.ObjectExtensions.ClonePropertyTo(System.Object,System.Object,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            从当前对象赋值到目标对象
            </summary>
            <param name="source">当前对象</param>
            <param name="destination">目标对象</param>
            <param name="excludeName">排除下列名称的属性不要复制</param>
            <returns>成功复制的值个数</returns>
        </member>
        <member name="M:Bing.Utils.Extensions.ObjectExtensions.ToNullable``1(``0)">
            <summary>
            将指定值转换为对应的可空类型
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.ObjectExtensions.Locking(System.Object,System.Action)">
            <summary>
            锁定
            </summary>
            <param name="source">锁定对象</param>
            <param name="action">操作</param>
        </member>
        <member name="M:Bing.Utils.Extensions.ObjectExtensions.Locking``1(``0,System.Action{``0})">
            <summary>
            锁定
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="source">锁定对象</param>
            <param name="action">操作</param>
        </member>
        <member name="M:Bing.Utils.Extensions.ObjectExtensions.Locking``1(System.Object,System.Func{``0})">
            <summary>
            锁定
            </summary>
            <typeparam name="TResult">结果类型</typeparam>
            <param name="source">锁定对象</param>
            <param name="func">执行函数</param>
        </member>
        <member name="M:Bing.Utils.Extensions.ObjectExtensions.Locking``2(``0,System.Func{``0,``1})">
            <summary>
            锁定
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <typeparam name="TResult">结果类型</typeparam>
            <param name="source">锁定对象</param>
            <param name="func">执行函数</param>
        </member>
        <member name="T:Bing.Utils.Extensions.RandomExtensions">
            <summary>
            随机数(<see cref="T:System.Random"/>) 扩展
            </summary>
        </member>
        <member name="M:Bing.Utils.Extensions.RandomExtensions.NextLong(System.Random)">
            <summary>
            获取下一个随机数。范围：[0,long.MaxValue]
            </summary>
            <param name="random">范围</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.RandomExtensions.NextLong(System.Random,System.Int64)">
            <summary>
            获取下一个随机数。范围：[0,max]
            </summary>
            <param name="random">随机数</param>
            <param name="max">最大值</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.RandomExtensions.NextLong(System.Random,System.Int64,System.Int64)">
            <summary>
            获取下一个随机数。范围：[min,max]
            </summary>
            <param name="random">随机数</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.RandomExtensions.NextDouble(System.Random,System.Double)">
            <summary>
            获取下一个随机数。范围：[0.0,max]
            </summary>
            <param name="random">随机数</param>
            <param name="max">最大值</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.RandomExtensions.NextDouble(System.Random,System.Double,System.Double)">
            <summary>
            获取下一个随机数。范围：[min,max]
            </summary>
            <param name="random">随机数</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.RandomExtensions.NormalDouble(System.Random)">
            <summary>
            标准正态分布生成随机双精度浮点数
            </summary>
            <param name="random">随机数</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.RandomExtensions.NormalDouble(System.Random,System.Double,System.Double)">
            <summary>
            标准正态分布生成随机双精度浮点数
            </summary>
            <param name="random">随机数</param>
            <param name="mean">均值</param>
            <param name="deviation">偏差</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.RandomExtensions.NextFloat(System.Random)">
            <summary>
            获取下一个随机数。范围：[0.0,1.0]
            </summary>
            <param name="random">随机数</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.RandomExtensions.NextFloat(System.Random,System.Single)">
            <summary>
            获取下一个随机数。范围：[0.0,max]
            </summary>
            <param name="random">随机数</param>
            <param name="max">最大值</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.RandomExtensions.NextFloat(System.Random,System.Single,System.Single)">
            <summary>
            获取下一个随机数。范围：[min,max]
            </summary>
            <param name="random">随机数</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.RandomExtensions.NormalFloat(System.Random)">
            <summary>
            标准正态分布生成随机单精度浮点数
            </summary>
            <param name="random">随机数</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.RandomExtensions.NormalFloat(System.Random,System.Single,System.Single)">
            <summary>
            标准正态分布生成随机单精度浮点数
            </summary>
            <param name="random">随机数</param>
            <param name="mean">均值</param>
            <param name="deviation">偏差</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.RandomExtensions.NextSign(System.Random)">
            <summary>
            获取下一个随机数。范围：[-1,1]
            </summary>
            <param name="random">随机数</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.RandomExtensions.NextBool(System.Random)">
            <summary>
            获取下一个随机数。范围：[true,false]
            </summary>
            <param name="random">随机数</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.RandomExtensions.NextBool(System.Random,System.Double)">
            <summary>
            获取下一个随机数。范围：[true,false]
            </summary>
            <param name="random">随机数</param>
            <param name="probability">true的概率。范围：[0.0,1.0]</param>
            <returns></returns>
        </member>
        <member name="T:Bing.Utils.Extensions.StringExtensions">
            <summary>
            字符串(<see cref="T:System.String"/>) 扩展 - 转换
            </summary>
            <summary>
            字符串(<see cref="T:System.String"/>) 扩展 - 操作
            </summary>
            <summary>
            字符串(<see cref="T:System.String"/>) 扩展 - 格式化
            </summary>
            <summary>
            字符串(<see cref="T:System.String"/>) 扩展 - 正则表达式
            </summary>
            <summary>
            字符串(<see cref="T:System.String"/>) 扩展 - 安全
            </summary>
            <summary>
            字符串(<see cref="T:System.String"/>) 扩展 - 验证
            </summary>
        </member>
        <member name="M:Bing.Utils.Extensions.StringExtensions.ToBytes(System.String,System.Text.Encoding)">
            <summary>
            将字符串转为byte[]数组，默认编码为<see cref="P:System.Text.Encoding.UTF8"/>
            </summary>
            <param name="value">字符串</param>
            <param name="encoding">编码格式</param>
        </member>
        <member name="M:Bing.Utils.Extensions.StringExtensions.ToXDocument(System.String)">
            <summary>
            字符串转为XDocument（Linq to Xml Dom）
            </summary>
            <param name="xml">xml字符串</param>
        </member>
        <member name="M:Bing.Utils.Extensions.StringExtensions.ToXElement(System.String)">
            <summary>
            字符串转为XElement对象（Linq to Xml XElement）
            </summary>
            <param name="xml">xml字符串</param>
        </member>
        <member name="M:Bing.Utils.Extensions.StringExtensions.ToXmlDocument(System.String)">
            <summary>
            字符串转为XmlDocument对象（Xml Dom）
            </summary>
            <param name="xml">xml字符串</param>
        </member>
        <member name="M:Bing.Utils.Extensions.StringExtensions.ToXPath(System.String)">
            <summary>
            字符串转为XmlPathDom对象（Xml XPath Dom）
            </summary>
            <param name="xml">xml字符串</param>
        </member>
        <member name="M:Bing.Utils.Extensions.StringExtensions.HexStringToBytes(System.String)">
            <summary>
            16进制字符串转换为字节数组
            </summary>
            <param name="value">16进制字符串</param>
        </member>
        <member name="M:Bing.Utils.Extensions.StringExtensions.ToUnicodeString(System.String)">
            <summary>
            转换成Unicode字符串
            </summary>
            <param name="source">源字符串</param>
        </member>
        <member name="M:Bing.Utils.Extensions.StringExtensions.ToSecureString(System.String,System.Boolean)">
            <summary>
            将字符串转为安全字符串
            </summary>
            <param name="value">普通字符串</param>
            <param name="markReadOnly">是否只读</param>
        </member>
        <member name="M:Bing.Utils.Extensions.StringExtensions.ToUnSecureString(System.Security.SecureString)">
            <summary>
            将安全字符串转为普通字符串
            </summary>
            <param name="value">安全字符串</param>
        </member>
        <member name="M:Bing.Utils.Extensions.StringExtensions.ToSbcCase(System.String)">
            <summary>
            将字符串转换成全角字符串(SBC Case)
            </summary>
            <param name="input">任意字符串</param>
        </member>
        <member name="M:Bing.Utils.Extensions.StringExtensions.ToDbcCase(System.String)">
            <summary>
            将字符串转换成半角字符串(DBC Case)
            </summary>
            <param name="input">任意字符串</param>
        </member>
        <member name="M:Bing.Utils.Extensions.StringExtensions.ToDateTime(System.String)">
            <summary>
            将时间戳转换成时间
            </summary>
            <param name="timeStamp">时间戳格式字符串</param>
        </member>
        <member name="M:Bing.Utils.Extensions.StringExtensions.Repeat(System.String,System.Int32)">
            <summary>
            重复指定字符串，根据指定重复次数
            </summary>
            <param name="value">值</param>
            <param name="repeatCount">重复次数</param>
        </member>
        <member name="M:Bing.Utils.Extensions.StringExtensions.ExtractAround(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            提取指定范围字符串
            </summary>
            <param name="value">值</param>
            <param name="index">索引值</param>
            <param name="left">左偏移值</param>
            <param name="right">右偏移值</param>
        </member>
        <member name="M:Bing.Utils.Extensions.StringExtensions.ExtractLettersNumbers(System.String)">
            <summary>
            提取字符串中所有字母以及数字
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:Bing.Utils.Extensions.StringExtensions.ExtractNumbers(System.String)">
            <summary>
            提取字符串中所有数字
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:Bing.Utils.Extensions.StringExtensions.ExtractLetters(System.String)">
            <summary>
            提取字符串中所有字母
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:Bing.Utils.Extensions.StringExtensions.ExtractChinese(System.String)">
            <summary>
            提取字符串中所有汉字
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:Bing.Utils.Extensions.StringExtensions.FilterChars(System.String,System.Predicate{System.Char})">
            <summary>
            过滤字符
            </summary>
            <param name="value">值</param>
            <param name="predicate">过滤字符条件</param>
        </member>
        <member name="M:Bing.Utils.Extensions.StringExtensions.Remove(System.String,System.Char[])">
            <summary>
            从当前字符串中移除任何指定的字符
            </summary>
            <param name="value">值</param>
            <param name="removeChar">需要移除的字符</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.StringExtensions.Remove(System.String,System.String[])">
            <summary>
            从当前字符串中移除任何指定的字符串
            </summary>
            <param name="value">值</param>
            <param name="strings">需要移除的字符串</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.StringExtensions.Remove(System.String,System.Int32,System.Boolean)">
            <summary>
            从当前字符串中移除指定索引的字符串
            </summary>
            <param name="value">值</param>
            <param name="index">索引</param>
            <param name="isLeft">是否左侧</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.StringExtensions.RemoveAllSpecialCharacters(System.String)">
            <summary>
            移除当前字符串中的所有特殊字符
            </summary>
            <param name="value">输入字符串</param>
            <returns>调整后的字符串</returns>
        </member>
        <member name="M:Bing.Utils.Extensions.StringExtensions.RemoveEnd(System.String,System.String)">
            <summary>
            去除字符串末尾指定的符号
            </summary>
            <param name="value">值</param>
            <param name="defaultChar">需要去除的符号，默认：,</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.StringExtensions.Remove(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            指定清除标签的内容
            </summary>
            <param name="str">内容</param>
            <param name="tag">标签</param>
            <param name="options">选项</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.StringExtensions.ReverseString(System.String)">
            <summary>
            反转字符串
            </summary>
            <param name="value">要反转的字符串</param>
            <returns>反转后的字符串</returns>
        </member>
        <member name="M:Bing.Utils.Extensions.StringExtensions.Split(System.String,System.String,System.Boolean)">
            <summary>
            以指定字符串作为分隔符将指定字符串分隔成数组
            </summary>
            <param name="value">要分割的字符串</param>
            <param name="strSplit">字符串类型的分隔符</param>
            <param name="removeEmptyEntries">是否移除数据中元素为空字符串的项</param>
            <returns>分割后的数据</returns>
        </member>
        <member name="M:Bing.Utils.Extensions.StringExtensions.GetTextLength(System.String)">
            <summary>
            获取字符串长度，支持汉字，每个汉字长度为2个字节
            </summary>
            <param name="value">参数字符串</param>
            <returns>当前字符串的长度，每个汉字长度为2个字节</returns>
        </member>
        <member name="M:Bing.Utils.Extensions.StringExtensions.TrimToMaxLength(System.String,System.Int32)">
            <summary>
            切割字符串，指定最大长度
            </summary>
            <param name="value">值</param>
            <param name="maxLength">指定最大长度</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.StringExtensions.TrimToMaxLength(System.String,System.Int32,System.String)">
            <summary>
            切割字符串，并指定最大长度和添加后缀
            </summary>
            <param name="value">值</param>
            <param name="maxLength">指定最大长度</param>
            <param name="suffix">后缀</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.StringExtensions.Truncate(System.String,System.Int32,System.Boolean)">
            <summary>
            截断字符串，是否添加圆点
            </summary>
            <param name="value">字符串</param>
            <param name="length">截断长度</param>
            <param name="userElipse">是否使用圆点</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.StringExtensions.PadBoth(System.String,System.Int32,System.Char,System.Boolean)">
            <summary>
            指定字符串长度，如果字符串长度大于指定的字符串长度，则截断字符串，若字符串长度小于指定字符串长度，则填充字符到指定字符串长度
            </summary>
            <param name="value">值</param>
            <param name="width">指定字符串长度</param>
            <param name="padChar">填充字符</param>
            <param name="truncate">是否截断</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.StringExtensions.EnsureStartsWith(System.String,System.String)">
            <summary>
            确保字符串包含指定前缀
            </summary>
            <param name="value">值</param>
            <param name="prefix">前缀</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.StringExtensions.EnsureEndWith(System.String,System.String)">
            <summary>
            确保字符串包含指定后缀
            </summary>
            <param name="value">值</param>
            <param name="suffix">后缀</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.StringExtensions.ConcatWith(System.String,System.String[])">
            <summary>
            连接两个字符串
            </summary>
            <param name="value">目标字符串</param>
            <param name="values">源字符串</param>
            <returns>连接后的字符串</returns>
        </member>
        <member name="M:Bing.Utils.Extensions.StringExtensions.Join``1(System.String,System.String,``0[])">
            <summary>
            连接字符串数组的所有元素，根据指定分隔符
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="value">值</param>
            <param name="separator">分隔符</param>
            <param name="obj">对象数组</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.StringExtensions.JoinNotNullOrEmpty(System.String[],System.String)">
            <summary>
            将字符串数组连接为字符串，如果值不为null或System.String.Empty，则将字符串数组连接
            </summary>
            <param name="values">字符串数组</param>
            <param name="separator">分隔符</param>
            <returns>字符串</returns>
        </member>
        <member name="M:Bing.Utils.Extensions.StringExtensions.GetBefore(System.String,System.String)">
            <summary>
            获取指定字符串参数之前的字符串
            </summary>
            <param name="value">值</param>
            <param name="x">指定字符串参数</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.StringExtensions.GetBetween(System.String,System.String,System.String)">
            <summary>
            获取指定字符串参数之间的字符串
            </summary>
            <param name="value">值</param>
            <param name="x">指定左侧字符串参数</param>
            <param name="y">指定右侧字符串参数</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.StringExtensions.GetAfter(System.String,System.String)">
            <summary>
            获取指定字符串参数之后的字符串
            </summary>
            <param name="value">值</param>
            <param name="x">指定字符串参数</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.StringExtensions.SubstringFrom(System.String,System.Int32)">
            <summary>
            获取字符串指定索引部分
            </summary>
            <param name="value">值</param>
            <param name="index">指定索引</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.StringExtensions.ToUpperFirstLetter(System.String)">
            <summary>
            首字母大写
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.StringExtensions.ToLowerFirstLetter(System.String)">
            <summary>
            首字母小写
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.StringExtensions.ToFirstLetter(System.String,System.Boolean)">
            <summary>
            首字母大小写
            </summary>
            <param name="value">值</param>
            <param name="isUpper">是否大写</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.StringExtensions.ToTitleCase(System.String)">
            <summary>
            将指定字符串转为词首字母大写
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.StringExtensions.ToTitleCase(System.String,System.Globalization.CultureInfo)">
            <summary>
            将指定字符串转为词首字母大写
            </summary>
            <param name="value">值</param>
            <param name="culture">区域性信息</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.StringExtensions.ToPlural(System.String)">
            <summary>
            将单词的单数形式转为复数形式
            </summary>
            <param name="singular">单数形式的单词</param>
            <returns>复数形式的单词</returns>
        </member>
        <member name="M:Bing.Utils.Extensions.StringExtensions.ReplaceAll(System.String,System.Collections.Generic.IEnumerable{System.String},System.Func{System.String,System.String})">
            <summary>
            替换字符串中指定的所有值
            </summary>
            <param name="value">值</param>
            <param name="oldValues">需要替换的值</param>
            <param name="replacePredicate">替换谓词</param>
            <example>
            <code>
                    var str = "White Red Blue Green Yellow Black Gray";
                    var achromaticColors = new[] {"White", "Black", "Gray"};
                    str = str.ReplaceAll(achromaticColors, v => "[" + v + "]");
                    // str == "[White] Red Blue Green Yellow [Black] [Gray]"
            </code>
            </example>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.StringExtensions.ReplaceAll(System.String,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            替换字符串中指定的所有值
            </summary>
            <param name="value">值</param>
            <param name="oldValues">需要替换的值</param>
            <param name="newValue">新值</param>
            <example>
            	<code>
                    var str = "White Red Blue Green Yellow Black Gray";
                    var achromaticColors = new[] {"White", "Black", "Gray"};
                    str = str.ReplaceAll(achromaticColors, "[AchromaticColor]");
                    // str == "[AchromaticColor] Red Blue Green Yellow [AchromaticColor] [AchromaticColor]"
            	</code>
            </example>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.StringExtensions.ReplaceAll(System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            替换字符串中指定的所有值
            </summary>
            <param name="value">值</param>
            <param name="oldValues">需要替换的值</param>
            <param name="newValues">新的值</param>
            <example>
            	<code>
                    var str = "White Red Blue Green Yellow Black Gray";
                    var achromaticColors = new[] {"White", "Black", "Gray"};
                    var exquisiteColors = new[] {"FloralWhite", "Bistre", "DavyGrey"};
                    str = str.ReplaceAll(achromaticColors, exquisiteColors);
                    // str == "FloralWhite Red Blue Green Yellow Bistre DavyGrey"
            	</code>
            </example>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.StringExtensions.ParseCommandlineParams(System.String[])">
            <summary>
            解析命令行参数
            </summary>
            <param name="value">值</param>
            <returns>一个命令行参数字符串字典对象</returns>
        </member>
        <member name="M:Bing.Utils.Extensions.StringExtensions.ParseStringToEnum``1(System.String,System.Boolean)">
            <summary>
            如果存在该枚举，解析字符串到字符串枚举项，否则返回默认枚举
            </summary>
            <typeparam name="TEnum">泛型枚举</typeparam>
            <param name="value">需转换为枚举的字符串</param>
            <param name="ignorecase">是否区分大小写</param>
            <returns>枚举项</returns>
            <example>
            	<code>
            		public enum EnumTwo {  None, One,}
            		object[] items = new object[] { "One".ParseStringToEnum《EnumTwo》(), "Two".ParseStringToEnum《EnumTwo》() };
            	</code>
            </example>
        </member>
        <member name="M:Bing.Utils.Extensions.StringExtensions.EncodeEmailAddress(System.String)">
            <summary>
            将电子邮件地址进行编码，以便于链接仍然有效
            </summary>
            <param name="emailAddress">邮箱地址</param>
            <returns>编码后的邮箱地址</returns>
        </member>
        <member name="M:Bing.Utils.Extensions.StringExtensions.RepairZero(System.String,System.Int32)">
            <summary>
            补足位数，指定字符串的固定长度，如果字符串小于固定长度，则在字符串的前面补足零，可设置的固定长度最大为9位
            </summary>
            <param name="text">原始字符串</param>
            <param name="limitedLength">字符串的固定长度</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.StringExtensions.ReplaceFirst(System.String,System.String,System.String)">
            <summary>
            替换字符串-首匹配
            </summary>
            <param name="this">当前值</param>
            <param name="oldValue">旧值</param>
            <param name="newValue">新值</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.StringExtensions.ReplaceFirst(System.String,System.Int32,System.String,System.String)">
            <summary>
            替换字符串-首匹配
            </summary>
            <param name="this">当前值</param>
            <param name="number">替换数</param>
            <param name="oldValue">旧值</param>
            <param name="newValue">新值</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.StringExtensions.ReplaceLast(System.String,System.String,System.String)">
            <summary>
            替换字符串-尾匹配
            </summary>
            <param name="this">当前值</param>
            <param name="oldValue">旧值</param>
            <param name="newValue">新值</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.StringExtensions.ReplaceLast(System.String,System.Int32,System.String,System.String)">
            <summary>
            替换字符串-尾匹配
            </summary>
            <param name="this">当前值</param>
            <param name="number">替换数</param>
            <param name="oldValue">旧值</param>
            <param name="newValue">新值</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.StringExtensions.Left(System.String,System.Int32)">
            <summary>
            获取从字符串开头指定长度的子字符串
            </summary>
            <param name="value">值</param>
            <param name="length">指定字符串长度</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Bing.Utils.Extensions.StringExtensions.Right(System.String,System.Int32)">
            <summary>
            获取从字符串末尾指定长度的子字符串
            </summary>
            <param name="value">值</param>
            <param name="length">指定字符串长度</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Bing.Utils.Extensions.StringExtensions.FormatWith(System.String,System.Object[])">
            <summary>
            将指定字符串中的格式项替换为指定数组中相应对象的字符串表示形式
            </summary>
            <param name="format">字符串格式，占位符以{n}表示</param>
            <param name="args">用于填充占位符的参数</param>
        </member>
        <member name="M:Bing.Utils.Extensions.StringExtensions.RegexSplit(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            根据正则表达式将字符串拆分为字符串数组
            </summary>
            <param name="value">值</param>
            <param name="pattern">正则表达式</param>
            <param name="options">比较规则</param>
        </member>
        <member name="M:Bing.Utils.Extensions.StringExtensions.GetWords(System.String)">
            <summary>
            将给定的字符串拆分为单词并返回一个字符串数组
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:Bing.Utils.Extensions.StringExtensions.GetWordByIndex(System.String,System.Int32)">
            <summary>
            获取指定索引的单词
            </summary>
            <param name="value">值</param>
            <param name="index">索引</param>
        </member>
        <member name="M:Bing.Utils.Extensions.StringExtensions.SpaceOnUpper(System.String)">
            <summary>
            在每个大写字母上添加空格
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:Bing.Utils.Extensions.StringExtensions.ReplaceWith(System.String,System.String,System.String)">
            <summary>
            使用正则表达式替换符合规则的字符串
            </summary>
            <param name="value">值</param>
            <param name="pattern">正则表达式</param>
            <param name="replaceValue">替换值</param>
            <example>
            	<code>
            		var s = "12345";
            		var replaced = s.ReplaceWith(@"\d", m => string.Concat(" -", m.Value, "- "));
            	</code>
            </example>
        </member>
        <member name="M:Bing.Utils.Extensions.StringExtensions.ReplaceWith(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            使用正则表达式替换符合规则的字符串
            </summary>
            <param name="value">值</param>
            <param name="pattern">正则表达式</param>
            <param name="replaceValue">替换值</param>
            <param name="options">比较规则</param>
            <example>
            	<code>
            		var s = "12345";
            		var replaced = s.ReplaceWith(@"\d", m => string.Concat(" -", m.Value, "- "));
            	</code>
            </example>
        </member>
        <member name="M:Bing.Utils.Extensions.StringExtensions.ReplaceWith(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator)">
            <summary>
            使用正则表达式替换符合规则的字符串
            </summary>
            <param name="value">值</param>
            <param name="pattern">正则表达式</param>
            <param name="evaluator">替换方法/Lambda表达式</param>
            <example>
            	<code>
            		var s = "12345";
            		var replaced = s.ReplaceWith(@"\d", m => string.Concat(" -", m.Value, "- "));
            	</code>
            </example>
        </member>
        <member name="M:Bing.Utils.Extensions.StringExtensions.ReplaceWith(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.Text.RegularExpressions.MatchEvaluator)">
            <summary>
            使用正则表达式替换符合规则的字符串
            </summary>
            <param name="value">值</param>
            <param name="pattern">正则表达式</param>
            <param name="options">比较规则</param>
            <param name="evaluator">替换方法/Lambda表达式</param>
            <example>
            	<code>
            		var s = "12345";
            		var replaced = s.ReplaceWith(@"\d", m => string.Concat(" -", m.Value, "- "));
            	</code>
            </example>
        </member>
        <member name="M:Bing.Utils.Extensions.StringExtensions.UrlEncode(System.String,System.Text.Encoding)">
            <summary>
            Url编码
            </summary>
            <param name="source">url编码字符串</param>
            <param name="encoding">编码格式</param>
        </member>
        <member name="M:Bing.Utils.Extensions.StringExtensions.UrlDecode(System.String,System.Text.Encoding)">
            <summary>
            Url解码
            </summary>
            <param name="source">url编码字符串</param>
            <param name="encoding">编码格式</param>
        </member>
        <member name="M:Bing.Utils.Extensions.StringExtensions.ToHtmlSafe(System.String)">
            <summary>
            Html字符串进行安全编码。返回安全的Html字符串
            </summary>
            <param name="value">当前Html字符串实例</param>
        </member>
        <member name="M:Bing.Utils.Extensions.StringExtensions.ToHtmlSafe(System.String,System.Boolean)">
            <summary>
            Html字符串进行安全编码。返回安全的Html字符串
            </summary>
            <param name="value">当前Html字符串实例</param>
            <param name="all">是否所有字符进行安全编码，或只是部分需要</param>
        </member>
        <member name="M:Bing.Utils.Extensions.StringExtensions.ToHtmlSafe(System.String,System.Boolean,System.Boolean)">
            <summary>
            Html字符串进行安全编码。返回安全的Html字符串
            </summary>
            <param name="value">当前Html字符串实例</param>
            <param name="all">是否所有字符进行安全编码，或只是部分需要</param>
            <param name="replace">是否对空格以及换行符进行编码</param>
        </member>
        <member name="M:Bing.Utils.Extensions.StringExtensions.EncodeBase64(System.String,System.Text.Encoding)">
            <summary>
            对字符串进行Base64字符串编码，默认编码为<see cref="P:System.Text.Encoding.UTF8"/>
            </summary>
            <param name="value">字符串</param>
            <param name="encoding">编码格式</param>
        </member>
        <member name="M:Bing.Utils.Extensions.StringExtensions.DecodeBase64(System.String,System.Text.Encoding)">
            <summary>
            对字符串进行Base64字符串解码
            </summary>
            <param name="value">字符串</param>
            <param name="encoding">编码格式</param>
        </member>
        <member name="M:Bing.Utils.Extensions.StringExtensions.EncryptToBytes(System.String,System.String)">
            <summary>
            将字符串加密成字节数组
            </summary>
            <param name="value">值，需要加密的字符串</param>
            <param name="pwd">密匙，使用密匙来加密字符串</param>
        </member>
        <member name="M:Bing.Utils.Extensions.StringExtensions.CryptBytes(System.String,System.Byte[],System.Boolean)">
            <summary>
            加密或解密字节数组，使用Rfc2898DeriveBytes与TripleDESCryptoServiceProvider的加密提供程序生成的密匙和初始化向量
            </summary>
            <param name="pwd">需要加密或解密的密码字符串</param>
            <param name="bytes">用来加密的字节数组</param>
            <param name="encrypt">true：加密，false：解密</param>
        </member>
        <member name="M:Bing.Utils.Extensions.StringExtensions.MakeKeyAndIv(System.String,System.Byte[],System.Int32,System.Int32,System.Byte[]@,System.Byte[]@)">
            <summary>
            使用密码生成密匙和一个初始化向量（Rfc2898DeriveBytes）
            </summary>
            <param name="pwd">用于生成字节的输入密码</param>
            <param name="salt">用于生成字节的salt值</param>
            <param name="keySizeBits">生成密匙的大小</param>
            <param name="blockSizeBits">加密提供程序所使用的输入块的大小</param>
            <param name="key">生成输出密匙字节</param>
            <param name="iv">生成输出初始化向量</param>
        </member>
        <member name="M:Bing.Utils.Extensions.StringExtensions.DecryptFromBytes(System.Byte[],System.String)">
            <summary>
            将字节数组解密成字符串，前提该字节数组已加密
            </summary>
            <param name="value">值，要解密的字节数组</param>
            <param name="pwd">密匙，使用密匙来解密字符串</param>
        </member>
        <member name="M:Bing.Utils.Extensions.StringExtensions.EncryptToString(System.String,System.String)">
            <summary>
            字符串加密
            </summary>
            <param name="value">值，需要加密的字符串</param>
            <param name="pwd">密匙，使用密匙来加密字符串</param>
        </member>
        <member name="M:Bing.Utils.Extensions.StringExtensions.DecryptFromString(System.String,System.String)">
            <summary>
            字符串解密，前提字符串已加密
            </summary>
            <param name="value">值，要解密的字符串</param>
            <param name="pwd">密匙，使用密匙来解密字符串</param>
        </member>
        <member name="M:Bing.Utils.Extensions.StringExtensions.FilterHtml(System.String)">
            <summary>
            过滤Html标签
            </summary>
            <param name="value">值，待过滤的字符串</param>
        </member>
        <member name="M:Bing.Utils.Extensions.StringExtensions.IsImageFile(System.String)">
            <summary>
            判断指定路径是否图片文件
            </summary>
            <param name="fileName">文件名</param>
        </member>
        <member name="M:Bing.Utils.Extensions.StringExtensions.IsLikeAny(System.String,System.String[])">
            <summary>
            任何模式通配符比较
            </summary>
            <param name="value">值</param>
            <param name="patterns">模式</param>
        </member>
        <member name="M:Bing.Utils.Extensions.StringExtensions.IsLike(System.String,System.String)">
            <summary>
            通配符比较
            </summary>
            <param name="value">值</param>
            <param name="pattern">模式</param>
        </member>
        <member name="M:Bing.Utils.Extensions.StringExtensions.IsItemInEnum``1(System.String)">
            <summary>
            判断数据是否在给定的枚举定义中
            </summary>
            <typeparam name="TEnum">泛型枚举</typeparam>
            <param name="value">匹配的枚举</param>
        </member>
        <member name="M:Bing.Utils.Extensions.StringExtensions.IsRangeLength(System.String,System.Int32,System.Int32)">
            <summary>
            判断字符串长度是否在指定范围内
            </summary>
            <param name="source">源字符串</param>
            <param name="minLength">最小长度</param>
            <param name="maxLength">最大长度</param>
        </member>
        <member name="M:Bing.Utils.Extensions.StringExtensions.EqualsAny(System.String,System.StringComparison,System.String[])">
            <summary>
            确定字符串是否与所提供的值相等
            </summary>
            <param name="value">值</param>
            <param name="comparisonType">区域性比较</param>
            <param name="values">提供的值</param>
        </member>
        <member name="M:Bing.Utils.Extensions.StringExtensions.EquivalentTo(System.String,System.String,System.StringComparison)">
            <summary>
            确定两个指定的字符串具有相同的值，参数指定区域性、大小写及比较所选用的规则
            </summary>
            <param name="value">值</param>
            <param name="whateverCaseString">比较字符串</param>
            <param name="comparison">区域性</param>
        </member>
        <member name="M:Bing.Utils.Extensions.StringExtensions.Contains(System.String,System.String,System.StringComparison)">
            <summary>
            确定输入字符串是否包含指定字符串
            </summary>
            <param name="inputValue">输入字符串</param>
            <param name="comparisonValue">包含字符串</param>
            <param name="comparisonType">区域</param>
        </member>
        <member name="M:Bing.Utils.Extensions.StringExtensions.ContainsEquivalenceTo(System.String,System.String)">
            <summary>
            确定输入字符串是否包含指定字符串，且字符串不为空
            </summary>
            <param name="inputValue">输入字符串</param>
            <param name="comparisonValue">指定字符串</param>
        </member>
        <member name="M:Bing.Utils.Extensions.StringExtensions.BothStringsAreEmpty(System.String,System.String)">
            <summary>
            两个字符串是否均为空
            </summary>
            <param name="inputValue">字符串1</param>
            <param name="comparisonValue">字符串2</param>
        </member>
        <member name="M:Bing.Utils.Extensions.StringExtensions.StringContainsEquivalence(System.String,System.String)">
            <summary>
            确定输入字符串是否包含指定字符串，且两个字符串不为空
            </summary>
            <param name="inputValue">输入字符串</param>
            <param name="comparisonValue">指定字符串</param>
        </member>
        <member name="M:Bing.Utils.Extensions.StringExtensions.ContainsAny(System.String,System.String[])">
            <summary>
            确定字符串是否包含所提供的值
            </summary>
            <param name="value">值</param>
            <param name="values">提供的值</param>
        </member>
        <member name="M:Bing.Utils.Extensions.StringExtensions.ContainsAny(System.String,System.StringComparison,System.String[])">
            <summary>
            确定字符串是否包含所提供的值
            </summary>
            <param name="value">值</param>
            <param name="comparisonType">区域性比较</param>
            <param name="values">提供的值</param>
        </member>
        <member name="M:Bing.Utils.Extensions.StringExtensions.ContainsAll(System.String,System.String[])">
            <summary>
            确定字符串是否包含所有提供的值
            </summary>
            <param name="value">值</param>
            <param name="values">提供的值</param>
        </member>
        <member name="M:Bing.Utils.Extensions.StringExtensions.ContainsAll(System.String,System.StringComparison,System.String[])">
            <summary>
            确定字符串是否包含所有提供的值
            </summary>
            <param name="value">值</param>
            <param name="comparisonType">区域性比较</param>
            <param name="values">提供的值</param>
        </member>
        <member name="T:Bing.Utils.Extensions.ArrayExtensions">
            <summary>
            数组(<see cref="T:System.Array"/>) 扩展
            </summary>
        </member>
        <member name="M:Bing.Utils.Extensions.ArrayExtensions.WithInIndex(System.Array,System.Int32)">
            <summary>
            判断索引是否在数组中
            </summary>
            <param name="source">数组</param>
            <param name="index">索引</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.ArrayExtensions.WithInIndex(System.Array,System.Int32,System.Int32)">
            <summary>
            判断索引是否在数组中
            </summary>
            <param name="source">数组</param>
            <param name="index">索引</param>
            <param name="dimension">数组维度</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.ArrayExtensions.CombineArray``1(``0[],``0[])">
            <summary>
            合并数组，合并两个数组到一个新的数组
            </summary>
            <typeparam name="T">数组类型</typeparam>
            <param name="combineWith">源数组</param>
            <param name="arrayToCombine">目标数组</param>
            <example>
            	<code>
            		int[] arrayOne = new[] { 1, 2, 3, 4 };
            		int[] arrayTwo = new[] { 5, 6, 7, 8 };
            		Array combinedArray = arrayOne.CombineArray&lt;int&gt;(arrayTwo);
            	</code>
            </example>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.ArrayExtensions.ClearAll(System.Array)">
            <summary>
            清空数组内容
            </summary>
            <param name="source">源数组</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.ArrayExtensions.ClearAll``1(``0[])">
            <summary>
            清空数组内容
            </summary>
            <typeparam name="T">数组类型</typeparam>
            <param name="source">源数组</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.ArrayExtensions.ClearAt(System.Array,System.Int32)">
            <summary>
            清除数组中指定索引的内容
            </summary>
            <param name="array">数组</param>
            <param name="index">索引</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.ArrayExtensions.ClearAt``1(``0[],System.Int32)">
            <summary>
            清除数组中指定索引的内容
            </summary>
            <typeparam name="T">数组类型</typeparam>
            <param name="array">数组</param>
            <param name="index">索引</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.ArrayExtensions.BlockCopy``1(``0[],System.Int32,System.Int32)">
            <summary>
            复制数据块，复制数组内容到新数组
            </summary>
            <typeparam name="T">数组类型</typeparam>
            <param name="source">数据源</param>
            <param name="index">索引</param>
            <param name="length">复制长度</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.ArrayExtensions.BlockCopy``1(``0[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            复制数据块，复制数组内容到新数组
            </summary>
            <typeparam name="T">数组类型</typeparam>
            <param name="source">数据源</param>
            <param name="index">索引</param>
            <param name="length">复制长度</param>
            <param name="padToLength">是否填充指定长度</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.ArrayExtensions.BlockCopy``1(``0[],System.Int32,System.Boolean)">
            <summary>
            复制数据块，复制数组内容到新数组
            </summary>
            <typeparam name="T">数组类型</typeparam>
            <param name="source">数据源</param>
            <param name="length">复制长度</param>
            <param name="padToLength">是否填充指定长度</param>
            <returns></returns>
        </member>
        <member name="T:Bing.Utils.Extensions.ByteArrayExtensions">
            <summary>
            字节数组(<see cref="T:System.Byte"/>[]) 扩展
            </summary>
        </member>
        <member name="M:Bing.Utils.Extensions.ByteArrayExtensions.ToString(System.Byte[],System.Text.Encoding)">
            <summary>
            将byte[]转换成字符串，默认字符编码：<see cref="P:System.Text.Encoding.UTF8"/>
            </summary>
            <param name="value">值</param>
            <param name="encoding">字符编码</param>
        </member>
        <member name="M:Bing.Utils.Extensions.ByteArrayExtensions.ToHexString(System.Byte[])">
            <summary>
            将byte[]转换成16进制字符串表示形式
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.ByteArrayExtensions.ToInt(System.Byte[])">
            <summary>
            将byte[]转换成int
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.ByteArrayExtensions.ToLong(System.Byte[])">
            <summary>
            将byte[]转换成long
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.ByteArrayExtensions.ToBase64String(System.Byte[])">
            <summary>
            将byte[]转换成Base64字符串
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.ByteArrayExtensions.ToMemoryStream(System.Byte[])">
            <summary>
            将byte[]转换成内存流
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.ByteArrayExtensions.Copy(System.Byte[0:,0:])">
            <summary>
            复制一份二维数组的副本
            </summary>
            <param name="bytes">二维数组</param>
            <returns></returns>
        </member>
        <member name="T:Bing.Utils.Extensions.CollectionExtensions">
            <summary>
            集合(<see cref="T:System.Collections.Generic.ICollection`1"/>) 扩展
            </summary>
        </member>
        <member name="M:Bing.Utils.Extensions.CollectionExtensions.AddIfNotContains``1(System.Collections.Generic.ICollection{``0},``0)">
            <summary>
            添加项。如果未包含，则添加
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="source">集合</param>
            <param name="item">项</param>
        </member>
        <member name="M:Bing.Utils.Extensions.CollectionExtensions.AddIfNotContains``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            添加项集合。如果未包含，则添加
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="source">集合</param>
            <param name="items">项集合</param>
        </member>
        <member name="M:Bing.Utils.Extensions.CollectionExtensions.AddIfNotContains``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Boolean},System.Func{``0})">
            <summary>
            添加项。如果未包含
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="source">集合</param>
            <param name="predicate">条件</param>
            <param name="itemFactory">获取项函数</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.CollectionExtensions.RemoveAll``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            移除项。指定集合
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="source">集合</param>
            <param name="items">集合项</param>
        </member>
        <member name="M:Bing.Utils.Extensions.CollectionExtensions.RemoveAll``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Boolean})">
            <summary>
            移除项。按条件移除
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="source">集合</param>
            <param name="predicate">条件</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.CollectionExtensions.AddRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            添加批量项。
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="collection">集合</param>
            <param name="enumerable">元素集合</param>
            <exception cref="T:System.ArgumentNullException">源集合对象为空、添加的集合项为空</exception>
        </member>
        <member name="M:Bing.Utils.Extensions.CollectionExtensions.Sort``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            排序
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="collection">集合</param>
            <param name="comparer">比较器</param>
        </member>
        <member name="M:Bing.Utils.Extensions.CollectionExtensions.ReplaceItems``2(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``1,``0})">
            <summary>
            替换项
            </summary>
            <typeparam name="TItem">项类型</typeparam>
            <typeparam name="TNewItem">新项类型</typeparam>
            <param name="collection">集合</param>
            <param name="newItems">新项集合</param>
            <param name="createItemAction">创建项操作</param>
        </member>
        <member name="M:Bing.Utils.Extensions.CollectionExtensions.ReplaceItems``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            替换项
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="collection">集合</param>
            <param name="newItems">新项集合</param>
        </member>
        <member name="T:Bing.Utils.Extensions.DictionaryExtensions">
            <summary>
            字典(<see cref="T:System.Collections.Generic.IDictionary`2"/>) 扩展
            </summary>
        </member>
        <member name="M:Bing.Utils.Extensions.DictionaryExtensions.GetOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            获取指定Key对应的Value，若未找到则返回默认值
            </summary>
            <typeparam name="TKey">键类型</typeparam>
            <typeparam name="TValue">值类型</typeparam>
            <param name="dictionary">字典</param>
            <param name="key">键</param>
            <param name="defaultValue">默认值</param>
        </member>
        <member name="M:Bing.Utils.Extensions.DictionaryExtensions.AddRange``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Boolean)">
            <summary>
            批量添加键值对到字典中
            </summary>
            <typeparam name="TKey">键类型</typeparam>
            <typeparam name="TValue">值类型</typeparam>
            <param name="dict">字典</param>
            <param name="values">键值对集合</param>
            <param name="replaceExisted">是否替换已存在的键值对</param>
        </member>
        <member name="M:Bing.Utils.Extensions.DictionaryExtensions.GetOrAdd``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``0,``1})">
            <summary>
            获取指定键的值，不存在则按指定委托添加值
            </summary>
            <typeparam name="TKey">键类型</typeparam>
            <typeparam name="TValue">值类型</typeparam>
            <param name="dict">字典</param>
            <param name="key">键</param>
            <param name="setValue">添加值的委托</param>
        </member>
        <member name="M:Bing.Utils.Extensions.DictionaryExtensions.GetOrAdd``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``1})">
            <summary>
            获取指定键的值，不存在则按指定委托添加值
            </summary>
            <typeparam name="TKey">键类型</typeparam>
            <typeparam name="TValue">值类型</typeparam>
            <param name="dictionary">字典</param>
            <param name="key">键</param>
            <param name="addFunc">添加值的委托</param>
        </member>
        <member name="M:Bing.Utils.Extensions.DictionaryExtensions.Sort``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            对指定的字典进行排序
            </summary>
            <typeparam name="TKey">键类型</typeparam>
            <typeparam name="TValue">值类型</typeparam>
            <param name="dictionary">字典</param>
        </member>
        <member name="M:Bing.Utils.Extensions.DictionaryExtensions.Sort``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IComparer{``0})">
            <summary>
            对指定的字典进行排序
            </summary>
            <typeparam name="TKey">键类型</typeparam>
            <typeparam name="TValue">值类型</typeparam>
            <param name="dictionary">字典</param>
            <param name="comparer">比较器，用于排序字典</param>
        </member>
        <member name="M:Bing.Utils.Extensions.DictionaryExtensions.SortByValue``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            对指定的字典进行排序，根据值元素进行排序
            </summary>
            <typeparam name="TKey">键类型</typeparam>
            <typeparam name="TValue">值类型</typeparam>
            <param name="dictionary">字典</param>
        </member>
        <member name="M:Bing.Utils.Extensions.DictionaryExtensions.ToQueryString``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            将字典转换成查询字符串
            </summary>
            <typeparam name="TKey">键类型</typeparam>
            <typeparam name="TValue">值类型</typeparam>
            <param name="dictionary">字典</param>
        </member>
        <member name="M:Bing.Utils.Extensions.DictionaryExtensions.GetKey``2(System.Collections.Generic.IDictionary{``0,``1},``1)">
            <summary>
            根据Value反向查找Key
            </summary>
            <typeparam name="TKey">键类型</typeparam>
            <typeparam name="TValue">值类型</typeparam>
            <param name="dictionary">字典</param>
            <param name="value">值</param>
        </member>
        <member name="M:Bing.Utils.Extensions.DictionaryExtensions.TryAdd``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            尝试将键值对添加到字典中。如果不存在，则添加；存在，不添加也不抛异常
            </summary>
            <typeparam name="TKey">键类型</typeparam>
            <typeparam name="TValue">值类型</typeparam>
            <param name="dictionary">字典</param>
            <param name="key">键</param>
            <param name="value">值</param>
        </member>
        <member name="M:Bing.Utils.Extensions.DictionaryExtensions.ToHashTable``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            将字典转换成哈希表
            </summary>
            <typeparam name="TKey">键类型</typeparam>
            <typeparam name="TValue">值类型</typeparam>
            <param name="dictionary">字典</param>
        </member>
        <member name="M:Bing.Utils.Extensions.DictionaryExtensions.Reverse``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            对指定字典进行颠倒键值对，创建新字典（值为键，键为值）
            </summary>
            <typeparam name="TKey">键类型</typeparam>
            <typeparam name="TValue">值类型</typeparam>
            <param name="dictionary">字典</param>
        </member>
        <member name="M:Bing.Utils.Extensions.DictionaryExtensions.AsReadOnly``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            转换成只读字典
            </summary>
            <typeparam name="TKey">键类型</typeparam>
            <typeparam name="TValue">值类型</typeparam>
            <param name="dictionary">字典</param>
        </member>
        <member name="M:Bing.Utils.Extensions.DictionaryExtensions.EqualsTo``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            判断两个字典中的元素是否相等
            </summary>
            <typeparam name="TKey">键类型</typeparam>
            <typeparam name="TValue">值类型</typeparam>
            <param name="sourceDict">源字典</param>
            <param name="targetDict">目标字典</param>
            <exception cref="T:System.ArgumentNullException">源字典对象为空、目标字典对象为空</exception>
        </member>
        <member name="M:Bing.Utils.Extensions.DictionaryExtensions.FillFormDataStream(System.Collections.Generic.IDictionary{System.String,System.String},System.IO.Stream)">
            <summary>
            填充表单信息的Stream
            </summary>
            <param name="formData">表单数据</param>
            <param name="stream">流</param>
        </member>
        <member name="M:Bing.Utils.Extensions.DictionaryExtensions.FillFormDataStreamAsync(System.Collections.Generic.IDictionary{System.String,System.String},System.IO.Stream)">
            <summary>
            填充表单信息的Stream
            </summary>
            <param name="formData">表单数据</param>
            <param name="stream">流</param>
        </member>
        <member name="T:Bing.Utils.Extensions.EnumerableExtensions">
            <summary>
            可枚举类型<see cref="T:System.Collections.Generic.IEnumerable`1"/> 扩展
            </summary>
        </member>
        <member name="M:Bing.Utils.Extensions.EnumerableExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            对指定集合中的每个元素执行指定操作
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="enumerable">值</param>
            <param name="action">操作</param>
            <exception cref="T:System.ArgumentNullException">源集合对象为空、操作表达式为空</exception>
        </member>
        <member name="M:Bing.Utils.Extensions.EnumerableExtensions.ForEachAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task})">
            <summary>
            对指定集合中的每个元素执行指定操作
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="enumerable">值</param>
            <param name="action">操作</param>
            <exception cref="T:System.ArgumentNullException">源集合对象为空、操作表达式为空</exception>
        </member>
        <member name="M:Bing.Utils.Extensions.EnumerableExtensions.EqualsTo``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            判断两个集合中的元素是否相等
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="sourceList">源集合</param>
            <param name="targetList">目标集合</param>
            <exception cref="T:System.ArgumentNullException">源集合对象为空、目标集合对象为空</exception>
        </member>
        <member name="M:Bing.Utils.Extensions.EnumerableExtensions.DistinctBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            根据指定条件返回集合中不重复的元素
            </summary>
            <typeparam name="T">动态类型</typeparam>
            <typeparam name="TKey">动态筛选条件类型</typeparam>
            <param name="enumerable">源集合</param>
            <param name="keySelector">字段选择委托</param>
            <exception cref="T:System.ArgumentNullException">源集合对象为空、参照字段表达式为空</exception>
        </member>
        <member name="M:Bing.Utils.Extensions.EnumerableExtensions.ExpandAndToString``1(System.Collections.Generic.IEnumerable{``0},System.String,System.String)">
            <summary>
            将集合展开并分别转换成字符串，再以指定的分隔符衔接，拼成一个字符串返回。默认分隔符为逗号
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="collection">要处理的集合</param>
            <param name="separator">分隔符，默认为逗号</param>
            <param name="wrapItem">项目包裹符</param>
        </member>
        <member name="M:Bing.Utils.Extensions.EnumerableExtensions.ExpandAndToString``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.String,System.String)">
            <summary>
            将集合展开并转为字符串，循环集合每一项，调用委托生成字符串，返回合并后的字符串。默认分隔符为逗号
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="collection">要处理的集合</param>
            <param name="itemFormatFunc">单个集合项的转换委托</param>
            <param name="separator">分隔符，默认为逗号</param>
            <param name="wrapItem">项目包裹符</param>
        </member>
        <member name="M:Bing.Utils.Extensions.EnumerableExtensions.ToDataTable``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            泛型集合转换为DataTable
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="enumerable">集合</param>
            <param name="tableName">表名</param>
            <exception cref="T:System.ArgumentNullException">源集合对象为空</exception>
        </member>
        <member name="M:Bing.Utils.Extensions.EnumerableExtensions.WhereIf``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Boolean)">
            <summary>
            是否执行指定条件的查询，根据第三方条件是否为真来决定
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="enumerable">源集合</param>
            <param name="predicate">查询条件</param>
            <param name="condition">第三方条件</param>
        </member>
        <member name="T:Bing.Utils.Extensions.ListExtensions">
            <summary>
            列表(<see cref="T:System.Collections.Generic.IList`1"/>) 扩展
            </summary>
        </member>
        <member name="M:Bing.Utils.Extensions.ListExtensions.InsertIfNotExists``1(System.Collections.Generic.IList{``0},System.Int32,``0)">
            <summary>
            插入项。如果不存在，则插入
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="list">列表</param>
            <param name="index">索引</param>
            <param name="item">项</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.ListExtensions.InsertIfNotExists``1(System.Collections.Generic.IList{``0},System.Int32,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            批量插入项。如果不存在，则插入
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="list">列表</param>
            <param name="startIndex">开始位置索引</param>
            <param name="items">列表项</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.ListExtensions.IndexOf``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Boolean})">
            <summary>
            获取第一匹配项的索引
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="list">列表</param>
            <param name="comparison">条件</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.ListExtensions.Join``1(System.Collections.Generic.IList{``0},System.Char)">
            <summary>
            将列表连接为字符串，根据指定的字符进行分割
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="list">列表</param>
            <param name="joinChar">分割符</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.ListExtensions.Join``1(System.Collections.Generic.IList{``0},System.String)">
            <summary>
            将列表连接为字符串，根据指定的字符串进行连接
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="list">列表</param>
            <param name="joinString">分割字符串</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.ListExtensions.EqualsAll``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0})">
            <summary>
            是否完全相等
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="list">待比较列表</param>
            <param name="other">待比较列表</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.ListExtensions.Slice``1(System.Collections.Generic.IList{``0},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            获取列表指定范围的列表
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="list">列表</param>
            <param name="start">开始索引</param>
            <param name="end">结束索引</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.ListExtensions.Slice``1(System.Collections.Generic.IList{``0},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            获取列表指定范围的列表
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="list">列表</param>
            <param name="start">开始索引</param>
            <param name="end">结束索引</param>
            <param name="step">递增值</param>
            <returns></returns>
        </member>
        <member name="T:Bing.Utils.Extensions.NameValueCollectionExtensions">
            <summary>
            键值对集合(<see cref="T:System.Collections.Specialized.NameValueCollection"/>) 扩展
            </summary>
        </member>
        <member name="M:Bing.Utils.Extensions.NameValueCollectionExtensions.ToQueryString(System.Collections.Specialized.NameValueCollection)">
            <summary>
            将键值对集合转换成查询字符串
            </summary>
            <param name="collection">键值对集合</param>
            <returns></returns>
        </member>
        <member name="T:Bing.Utils.Extensions.Extensions">
            <summary>
            系统扩展 - 参数检查
            </summary>
            <summary>
            系统扩展 - 公共扩展
            </summary>
            <summary>
            系统扩展 - 类型转换
            </summary>
            <summary>
            系统扩展 - 日期
            </summary>
            <summary>
            系统扩展 - 格式化扩展
            </summary>
            <summary>
            系统扩展 - Lambda表达式扩展
            </summary>
            <summary>
            系统扩展 - 锁定扩展
            </summary>
            <summary>
            系统扩展 - 反射
            </summary>
            <summary>
            系统扩展 - 类型
            </summary>
            <summary>
            系统扩展 - 验证
            </summary>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)">
            <summary>
            验证指定值的断言表达式是否为真，不为值抛出<see cref="T:System.Exception"/>异常
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="value">要判断的值</param>
            <param name="assertionFunc">要验证的断言</param>
            <param name="message">异常消息</param>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)">
            <summary>
            验证指定值的断言表达式是否为真，不为真抛出<see cref="T:System.Exception"/>异常
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <typeparam name="TException">异常类型</typeparam>
            <param name="value">要判断的值</param>
            <param name="assertionFunc">要验证的断言</param>
            <param name="message">异常消息</param>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.CheckNotNull``1(``0,System.String)">
            <summary>
            检查参数不能为空引用，否则抛出<see cref="T:System.ArgumentNullException"/>异常
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="value">要判断的值</param>
            <param name="paramName">参数名</param>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.CheckNotNullOrEmpty(System.String,System.String)">
            <summary>
            检查字符串不能为空引用或空字符串，否则抛出<see cref="T:System.ArgumentNullException"/>异常或<see cref="T:System.ArgumentException"/>异常
            </summary>
            <param name="value">要判断的值</param>
            <param name="paramName">参数名</param>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.CheckNotEmpty(System.Guid,System.String)">
            <summary>
            检查Guid值不能为Guid.Empty，否则抛出<see cref="T:System.ArgumentException"/>异常
            </summary>
            <param name="value">要判断的值</param>
            <param name="paramName">参数名</param>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.CheckNotNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            检查集合不能为空引用或空集合，否则抛出<see cref="T:System.ArgumentNullException"/>异常或<see cref="T:System.ArgumentException"/>异常。
            </summary>
            <typeparam name="T">集合项的类型</typeparam>
            <param name="collection">要判断的值</param>
            <param name="paramName">参数名</param>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.CheckLessThan``1(``0,System.String,``0,System.Boolean)">
            <summary>
            检查参数必须小于[或可等于，参数canEqual]指定值，否则抛出<see cref="T:System.ArgumentOutOfRangeException"/>异常
            </summary>
            <typeparam name="T">参数类型</typeparam>
            <param name="value">要判断的值</param>
            <param name="paramName">参数名</param>
            <param name="target">要比较的值</param>
            <param name="canEqual">是否可等于</param>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.CheckGreaterThan``1(``0,System.String,``0,System.Boolean)">
            <summary>
            检查参数必须大于[或可等于，参数canEqual]指定值，否则抛出<see cref="T:System.ArgumentOutOfRangeException"/>异常
            </summary>
            <typeparam name="T">参数类型</typeparam>
            <param name="value">要判断的值</param>
            <param name="paramName">参数名</param>
            <param name="target">要比较的值</param>
            <param name="canEqual">是否可等于</param>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.CheckBetween``1(``0,System.String,``0,``0,System.Boolean,System.Boolean)">
            <summary>
            检查参数必须在指定范围之间，否则抛出<see cref="T:System.ArgumentOutOfRangeException"/>异常
            </summary>
            <typeparam name="T">参数类型</typeparam>
            <param name="value">要判断的值</param>
            <param name="paramName">参数名</param>
            <param name="start">比较范围的起始值</param>
            <param name="end">比较范围的结束值</param>
            <param name="startEqual">是否可等于起始值</param>
            <param name="endEqual">是否可等于结束值</param>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.CheckDirectoryExists(System.String,System.String)">
            <summary>
            检查指定路径的文件夹必须存在，否则抛出<see cref="T:System.IO.DirectoryNotFoundException"/>异常
            </summary>
            <param name="directory">目录路径</param>
            <param name="paramName">参数名</param>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.CheckFileExists(System.String,System.String)">
            <summary>
            检查指定路径的文件必须存在，否则抛出<see cref="T:System.IO.FileNotFoundException"/>异常。
            </summary>
            <param name="fileName">文件路径，包含文件名</param>
            <param name="paramName">参数名</param>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.SafeValue``1(System.Nullable{``0})">
            <summary>
            安全获取值，当值为null时，不会抛出异常
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="value">可空值</param>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.Value(System.Enum)">
            <summary>
            获取枚举值
            </summary>
            <param name="instance">枚举实例</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.Value``1(System.Enum)">
            <summary>
            获取枚举值
            </summary>
            <typeparam name="TResult">返回值类型</typeparam>
            <param name="instance">枚举实例</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.Description(System.Enum)">
            <summary>
            获取枚举描述，使用<see cref="T:System.ComponentModel.DescriptionAttribute"/>特性设置描述
            </summary>
            <param name="instance">枚举实例</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.Join``1(System.Collections.Generic.IEnumerable{``0},System.String,System.String)">
            <summary>
            转换为用分隔符连接的字符串
            </summary>
            <typeparam name="T">集合元素类型</typeparam>
            <param name="list">集合</param>
            <param name="quotes">引号，默认不带引号，范例：单引号"'"</param>
            <param name="separator">分隔符，默认使用逗号分隔</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.IsMatch(System.String,System.String)">
            <summary>
            确定所指定的正则表达式在指定的输入字符串中是否找到了匹配项
            </summary>
            <param name="value">要搜索匹配项的字符串</param>
            <param name="pattern">要匹配的正则表达式模式</param>
            <returns>如果正则表达式找到匹配项，则为 true；否则，为 false</returns>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            确定所指定的正则表达式在指定的输入字符串中找到匹配项
            </summary>
            <param name="value">要搜索匹配项的字符串</param>
            <param name="pattern">要匹配的正则表达式模式</param>
            <param name="options">规则</param>
            <returns>如果正则表达式找到匹配项，则为 true；否则，为 false</returns>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.GetMatch(System.String,System.String)">
            <summary>
            在指定的输入字符串中搜索指定的正则表达式的第一个匹配项
            </summary>
            <param name="value">要搜索匹配项的字符串</param>
            <param name="pattern">要匹配的正则表达式模式</param>
            <returns>一个对象，包含有关匹配项的信息</returns>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.GetMatchingValues(System.String,System.String)">
            <summary>
            在指定的输入字符串中搜索指定的正则表达式的所有匹配项的字符串集合
            </summary>
            <param name="value">要搜索匹配项的字符串</param>
            <param name="pattern">要匹配的正则表达式模式</param>
            <returns> 一个集合，包含有关匹配项的字符串值</returns>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.GetMatchingValues(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            使用正则表达式来确定一个给定的正则表达式模式的所有匹配的字符串返回的枚举
            </summary>
            <param name="value">输入字符串</param>
            <param name="pattern">正则表达式</param>
            <param name="options">比较规则</param>
            <returns>匹配字符串的枚举</returns>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.GetMatches(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            使用正则表达式来确定指定的正则表达式模式的所有匹配项
            </summary>
            <param name="value">值</param>
            <param name="pattern">正则表达式</param>
            <param name="options">比较规则</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.SafeString(System.Object)">
            <summary>
            安全转换为字符串，去除两端空格，当值为null时返回""
            </summary>
            <param name="input">输入值</param>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.ToBool(System.String)">
            <summary>
            转换为bool
            </summary>
            <param name="obj">数据</param>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.ToBoolOrNull(System.String)">
            <summary>
            转换为可空bool
            </summary>
            <param name="obj">数据</param>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.ToInt(System.String)">
            <summary>
            转换为int
            </summary>
            <param name="obj">数据</param>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.ToIntOrNull(System.String)">
            <summary>
            转换为可空int
            </summary>
            <param name="obj">数据</param>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.ToLong(System.String)">
            <summary>
            转换为long
            </summary>
            <param name="obj">数据</param>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.ToLongOrNull(System.String)">
            <summary>
            转换为可空long
            </summary>
            <param name="obj">数据</param>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.ToDouble(System.String)">
            <summary>
            转换为double
            </summary>
            <param name="obj">数据</param>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.ToDoubleOrNull(System.String)">
            <summary>
            转换为可空double
            </summary>
            <param name="obj">数据</param>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.ToDecimal(System.String)">
            <summary>
            转换为decimal
            </summary>
            <param name="obj">数据</param>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.ToDecimalOrNull(System.String)">
            <summary>
            转换为可空decimal
            </summary>
            <param name="obj">数据</param>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.ToDate(System.String)">
            <summary>
            转换为日期
            </summary>
            <param name="obj">数据</param>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.ToDateOrNull(System.String)">
            <summary>
            转换为可空日期
            </summary>
            <param name="obj">数据</param>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.ToGuid(System.String)">
            <summary>
            转化为Guid
            </summary>
            <param name="obj">数据</param>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.ToGuidOrNull(System.String)">
            <summary>
            转换为可空Guid
            </summary>
            <param name="obj">数据</param>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.ToGuidList(System.String)">
            <summary>
            转换为Guid集合
            </summary>
            <param name="obj">数据，范例："83B0233C-A24F-49FD-8083-1337209EBC9A,EAB523C6-2FE7-47BE-89D5-C6D440C3033A"</param>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.ToGuidList(System.Collections.Generic.IList{System.String})">
            <summary>
            转换为Guid集合
            </summary>
            <param name="obj">字符串集合</param>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.ToSnakeCase(System.String)">
            <summary>
            将字符串转换为蛇形策略
            </summary>
            <param name="str">字符串</param>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.ToCamelCase(System.String)">
            <summary>
            将字符串转换为骆驼策略
            </summary>
            <param name="str">字符串</param>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.ToDateTimeString(System.DateTime,System.Boolean)">
            <summary>
            获取格式化字符串，带时分秒，格式："yyyy-MM-dd HH:mm:ss"
            </summary>
            <param name="dateTime">日期</param>
            <param name="isRemoveSecond">是否移除秒,true:是,false:否</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.ToDateTimeString(System.Nullable{System.DateTime},System.Boolean)">
            <summary>
            获取格式化字符串，带时分秒，格式："yyyy-MM-dd HH:mm:ss"
            </summary>
            <param name="dateTime">日期</param>
            <param name="isRemoveSecond">是否移除秒,true:是,false:否</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.ToDateString(System.DateTime)">
            <summary>
            获取格式化字符串，不带时分秒，格式："yyyy-MM-dd"
            </summary>
            <param name="dateTime">日期</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.ToDateString(System.Nullable{System.DateTime})">
            <summary>
            获取格式化字符串，不带时分秒，格式："yyyy-MM-dd"
            </summary>
            <param name="dateTime">日期</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.ToTimeString(System.DateTime)">
            <summary>
            获取格式化字符串，不带年月日，格式："HH:mm:ss"
            </summary>
            <param name="dateTime">日期</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.ToTimeString(System.Nullable{System.DateTime})">
            <summary>
            获取格式化字符串，不带年月日，格式："HH:mm:ss"
            </summary>
            <param name="dateTime">日期</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.ToMillisecondString(System.DateTime)">
            <summary>
            获取格式化字符串，带毫秒，格式："yyyy-MM-dd HH:mm:ss.fff"
            </summary>
            <param name="dateTime">日期</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.ToMillisecondString(System.Nullable{System.DateTime})">
            <summary>
            获取格式化字符串，带毫秒，格式："yyyy-MM-dd HH:mm:ss.fff"
            </summary>
            <param name="dateTime">日期</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.ToChineseDateString(System.DateTime)">
            <summary>
            获取格式化字符串，不带时分秒，格式："yyyy年MM月dd日"
            </summary>
            <param name="dateTime">日期</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.ToChineseDateString(System.Nullable{System.DateTime})">
            <summary>
            获取格式化字符串，不带时分秒，格式："yyyy年MM月dd日"
            </summary>
            <param name="dateTime">日期</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.ToChineseDateTimeString(System.DateTime,System.Boolean)">
            <summary>
            获取格式化字符串，带时分秒，格式："yyyy年MM月dd日 HH时mm分"
            </summary>
            <param name="dateTime">日期</param>
            <param name="isRemoveSecond">是否移除秒</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.ToChineseDateTimeString(System.Nullable{System.DateTime},System.Boolean)">
            <summary>
            获取格式化字符串，带时分秒，格式："yyyy年MM月dd日 HH时mm分"
            </summary>
            <param name="dateTime">日期</param>
            <param name="isRemoveSecond">是否移除秒</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.Description(System.TimeSpan)">
            <summary>
            获取描述
            </summary>
            <param name="span">时间间隔</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.Description(System.Boolean)">
            <summary>
            获取布尔值描述
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.Description(System.Nullable{System.Boolean})">
            <summary>
            获取布尔值描述
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.FormatInvariant(System.String,System.Object[])">
            <summary>
            格式化字符串，不依赖区域性
            </summary>
            <param name="format">格式化字符串</param>
            <param name="args">参数</param>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.FormatCurrent(System.String,System.Object[])">
            <summary>
            格式化字符串，依赖当前区域性
            </summary>
            <param name="format">格式化字符串</param>
            <param name="args">参数</param>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.FormatCurrentUI(System.String,System.Object[])">
            <summary>
            格式化字符串，依赖当前UI区域性
            </summary>
            <param name="format">格式化字符串</param>
            <param name="args">参数</param>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.FormatMessage(System.Exception,System.Boolean)">
            <summary>
            格式化异常消息
            </summary>
            <param name="e">异常对象</param>
            <param name="isHideStackTrace">是否隐藏异常规模信息</param>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.Property(System.Linq.Expressions.Expression,System.String)">
            <summary>
            创建属性表达式
            </summary>
            <param name="expression">表达式</param>
            <param name="propertyName">属性名，支持多级属性名，与句点分隔，范例：Customer.Name</param>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.Property(System.Linq.Expressions.Expression,System.Reflection.MemberInfo)">
            <summary>
            创建属性表达式
            </summary>
            <param name="expression">表达式</param>
            <param name="member">属性</param>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            与操作表达式
            </summary>
            <param name="left">左操作数</param>
            <param name="right">右操作数</param>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.And``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            与操作表达式
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="left">左操作数</param>
            <param name="right">右操作数</param>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            或操作表达式
            </summary>
            <param name="left">左操作数</param>
            <param name="right">右操作数</param>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.Or``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            或操作表达式
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="left">左操作数</param>
            <param name="right">右操作数</param>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.Value``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            获取Lambda表达式的值
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="expression">表达式</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            创建等于运算表达式
            </summary>
            <param name="left">左操作数</param>
            <param name="right">右操作数</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.Equal(System.Linq.Expressions.Expression,System.Object)">
            <summary>
            创建等于运算表达式
            </summary>
            <param name="left">左操作数</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            创建不等于运算表达式
            </summary>
            <param name="left">左操作数</param>
            <param name="right">右操作数</param>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.NotEqual(System.Linq.Expressions.Expression,System.Object)">
            <summary>
            创建不等于运算表达式
            </summary>
            <param name="left">左操作数</param>
            <param name="value">值</param>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.Greater(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            创建大于运算表达式
            </summary>
            <param name="left">左操作数</param>
            <param name="right">右操作数</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.Greater(System.Linq.Expressions.Expression,System.Object)">
            <summary>
            创建大于运算表达式
            </summary>
            <param name="left">左操作数</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.GreaterEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            创建大于等于运算表达式
            </summary>
            <param name="left">左操作数</param>
            <param name="right">右操作数</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.GreaterEqual(System.Linq.Expressions.Expression,System.Object)">
            <summary>
            创建大于等于运算表达式
            </summary>
            <param name="left">左操作数</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.Less(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            创建小于运算表达式
            </summary>
            <param name="left">左操作数</param>
            <param name="right">右操作数</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.Less(System.Linq.Expressions.Expression,System.Object)">
            <summary>
            创建小于运算表达式
            </summary>
            <param name="left">左操作数</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.LessEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            创建小于等于运算表达式
            </summary>
            <param name="left">左操作数</param>
            <param name="right">右操作数</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.LessEqual(System.Linq.Expressions.Expression,System.Object)">
            <summary>
            创建小于等于运算表达式
            </summary>
            <param name="left">左操作数</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.StartsWith(System.Linq.Expressions.Expression,System.Object)">
            <summary>
            创建大于运算表达式
            </summary>
            <param name="left">左操作数</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.EndsWith(System.Linq.Expressions.Expression,System.Object)">
            <summary>
            尾匹配
            </summary>
            <param name="left">左操作数</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.Contains(System.Linq.Expressions.Expression,System.Object)">
            <summary>
            模糊匹配
            </summary>
            <param name="left">左操作数</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.Operation(System.Linq.Expressions.Expression,Bing.Utils.Operator,System.Object)">
            <summary>
            操作
            </summary>
            <param name="left">左操作数</param>
            <param name="operator">运算符</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.Operation(System.Linq.Expressions.Expression,Bing.Utils.Operator,System.Linq.Expressions.Expression)">
            <summary>
            操作
            </summary>
            <param name="left">左操作数</param>
            <param name="operator">运算符</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.Call(System.Linq.Expressions.Expression,System.String,System.Linq.Expressions.Expression[])">
            <summary>
            创建调用方法表达式
            </summary>
            <param name="instance">调用的实例</param>
            <param name="methodName">方法名</param>
            <param name="values">参数值列表</param>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.Call(System.Linq.Expressions.Expression,System.String,System.Object[])">
            <summary>
            创建调用方法表达式
            </summary>
            <param name="instance">调用的实例</param>
            <param name="methodName">方法名</param>
            <param name="values">参数值列表</param>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.Call(System.Linq.Expressions.Expression,System.String,System.Type[],System.Object[])">
            <summary>
            创建调用方法表达式
            </summary>
            <param name="instance">调用的实例</param>
            <param name="methodName">方法名</param>
            <param name="paramTypes">参数类型列表</param>
            <param name="values">参数值列表</param>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.Compose``1(System.Linq.Expressions.Expression{``0},System.Linq.Expressions.Expression{``0},System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})">
            <summary>
            组合表达式
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="first">左操作数</param>
            <param name="second">右操作数</param>
            <param name="merge">合并操作</param>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.ToLambda``1(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
            <summary>
            创建Lambda表达式
            </summary>
            <typeparam name="TDelegate">委托类型</typeparam>
            <param name="body">表达式</param>
            <param name="parameters">参数列表</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.ToPredicate``1(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
            <summary>
            创建谓词表达式
            </summary>
            <typeparam name="T">委托类型</typeparam>
            <param name="body">表达式</param>
            <param name="parameters">参数列表</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.Locking(System.Object,System.Action)">
            <summary>
            锁定给定对象标识，执行委托
            </summary>
            <param name="source">对象标识</param>
            <param name="action">操作</param>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.Locking``1(``0,System.Action{``0})">
            <summary>
            锁定给定源数据，执行委托
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="source">源数据</param>
            <param name="action">操作</param>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.Locking``1(System.Object,System.Func{``0})">
            <summary>
            锁定给定对象标识，执行委托
            </summary>
            <typeparam name="TResult">结果类型</typeparam>
            <param name="source">对象标识</param>
            <param name="func">操作</param>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.Locking``2(``0,System.Func{``0,``1})">
            <summary>
            锁定给定源数据，执行委托
            </summary>
            <typeparam name="TSource">源类型</typeparam>
            <typeparam name="TResult">结果类型</typeparam>
            <param name="source">源数据</param>
            <param name="func">操作</param>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.GetPropertyValue(System.Reflection.MemberInfo,System.Object)">
            <summary>
            获取实例上的属性值
            </summary>
            <param name="member">成员信息</param>
            <param name="instance">成员所在的类实例</param>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.IsNullableType(System.Type)">
            <summary>
            是否可空类型
            </summary>
            <param name="type">类型</param>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.IsNullableType(System.Type,System.Type)">
            <summary>
            是否可空类型
            </summary>
            <param name="type">类型</param>
            <param name="genericParameterType">通用参数类型</param>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.IsNullableEnum(System.Type)">
            <summary>
            是否可空枚举类型
            </summary>
            <param name="type">类型</param>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.HasAttribute``1(System.Type,System.Boolean)">
            <summary>
            是否有指定特性
            </summary>
            <typeparam name="T">特性类型</typeparam>
            <param name="type">类型</param>
            <param name="inherit">是否允许继承链搜索</param>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.GetAttributes``1(System.Type,System.Boolean)">
            <summary>
            获取指定特性集合
            </summary>
            <typeparam name="T">特性类型</typeparam>
            <param name="type">类型</param>
            <param name="inherit">是否允许继承链搜索</param>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.GetAttribute``1(System.Type,System.Boolean)">
            <summary>
            获取指定特性
            </summary>
            <typeparam name="T">特性类型</typeparam>
            <param name="type">类型</param>
            <param name="inherit">是否允许继承链搜索</param>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.IsCustomType(System.Type)">
            <summary>
            是否自定义类型
            </summary>
            <param name="type">类型</param>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.IsAnonymousType(System.Type)">
            <summary>
            是否匿名类型
            </summary>
            <param name="type">类型</param>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.IsBaseType(System.Type,System.Type)">
            <summary>
            是否基类型
            </summary>
            <param name="type">类型</param>
            <param name="checkingType">检查类型</param>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.CanUseForDb(System.Type)">
            <summary>
            能否用于数据库存储
            </summary>
            <param name="type">类型</param>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.IsDeriveClassFrom``1(System.Type,System.Boolean)">
            <summary>
            判断当前类型是否可由指定类型派生
            </summary>
            <typeparam name="TBaseType">基类型</typeparam>
            <param name="type">当前类型</param>
            <param name="canAbstract">能否是抽象类</param>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.IsDeriveClassFrom(System.Type,System.Type,System.Boolean)">
            <summary>
            判断当前类型是否可由指定类型派生
            </summary>
            <param name="type">当前类型</param>
            <param name="baseType">基类型</param>
            <param name="canAbstract">能否是抽象类</param>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.IsBaseOn``1(System.Type)">
            <summary>
            返回当前类型是否是指定基类的派生类
            </summary>
            <typeparam name="TBaseType">基类型</typeparam>
            <param name="type">类型</param>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.IsBaseOn(System.Type,System.Type)">
            <summary>
            返回当前类型是否是指定基类的派生类
            </summary>
            <param name="type">类型</param>
            <param name="baseType">基类类型</param>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.IsGenericAssignableFrom(System.Type,System.Type)">
            <summary>
            判断当前泛型类型是否可由指定类型的实例填充
            </summary>
            <param name="genericType">泛型类型</param>
            <param name="type">指定类型</param>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.IsIntegerType(System.Type)">
            <summary>
            是否整数类型
            </summary>
            <param name="type">类型</param>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.IsCollectionType(System.Type)">
            <summary>
            是否集合类型
            </summary>
            <param name="type">类型</param>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.IsValueType(System.Type)">
            <summary>
            是否值类型
            </summary>
            <param name="type">类型</param>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.CheckNull(System.Object,System.String)">
            <summary>
            检查对象是否为null，为null则抛出<see cref="T:System.ArgumentNullException"/>异常
            </summary>
            <param name="obj">对象</param>
            <param name="parameterName">参数名</param>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.IsEmpty(System.String)">
            <summary>
            判断 字符串 是否为空、null或空白字符串
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.IsEmpty(System.Guid)">
            <summary>
            判断 Guid 是否为空、null或Guid.Empty
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.IsEmpty(System.Nullable{System.Guid})">
            <summary>
            判断 Guid 是否为空、null或Guid.Empty
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.IsEmpty(System.Text.StringBuilder)">
            <summary>
            判断 StringBuilder 是否为空
            </summary>
            <param name="sb">数据</param>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.IsEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            判断 迭代集合 是否为空
            </summary>
            <typeparam name="T">泛型对象</typeparam>
            <param name="list">数据</param>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.IsEmpty``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            判断 字典 是否为空
            </summary>
            <typeparam name="TKey">键类型</typeparam>
            <typeparam name="TValue">值类型</typeparam>
            <param name="dictionary">数据</param>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.IsEmpty(System.Collections.IDictionary)">
            <summary>
            判断 字典 是否为空
            </summary>
            <param name="dictionary">数据</param>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.IsNull(System.Object)">
            <summary>
            判断目标对象是否为空
            </summary>
            <param name="target">目标对象</param>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.IsNull``1(``0)">
            <summary>
            判断目标对象是否为空
            </summary>
            <typeparam name="T">目标对象类型</typeparam>
            <param name="target">目标对象</param>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.NotEmpty(System.String)">
            <summary>
            判断 字符串 是否非空
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.NotEmpty(System.Guid)">
            <summary>
            判断 Guid 是否非空
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.NotEmpty(System.Nullable{System.Guid})">
            <summary>
            判断 Guid? 是否非空
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.NotEmpty(System.Text.StringBuilder)">
            <summary>
            判断 StringBuilder 是否为空
            </summary>
            <param name="sb">数据</param>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.NotEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            判断 迭代集合 是否非空
            </summary>
            <typeparam name="T">泛型对象</typeparam>
            <param name="enumerable">数据</param>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.IsZeroOrMinus(System.Int16)">
            <summary>
            判断 short 是否为0或负数
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.IsZeroOrMinus(System.Int32)">
            <summary>
            判断 int 是否为0或负数
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.IsZeroOrMinus(System.Int64)">
            <summary>
            判断 long 是否为0或负数
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.IsZeroOrMinus(System.Single)">
            <summary>
            判断 float 是否为0或负数
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.IsZeroOrMinus(System.Double)">
            <summary>
            判断 double 是否为0或负数
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.IsZeroOrMinus(System.Decimal)">
            <summary>
            判断 decimal 是否为0或负数
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.IsPercentage(System.Single)">
            <summary>
            判断 float 是否为百分数
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.IsPercentage(System.Double)">
            <summary>
            判断 double 是否为百分数
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.IsPercentage(System.Decimal)">
            <summary>
            判断 decimal 是否为百分数
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.IsZeroOrPercentage(System.Single)">
            <summary>
            判断 float 是否为0或百分数
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.IsZeroOrPercentage(System.Double)">
            <summary>
            判断 double 是否为0或百分数
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:Bing.Utils.Extensions.Extensions.IsZeroOrPercentage(System.Decimal)">
            <summary>
            判断 decimal 是否为0或百分数
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="T:Bing.Utils.Extensions.Common.Extensions">
            <summary>
            系统扩展 - 数字
            </summary>
        </member>
        <member name="M:Bing.Utils.Extensions.Common.Extensions.KeepDigits(System.Single,System.Int32)">
            <summary>
            保留小数位数。四舍五入
            </summary>
            <param name="value">数据</param>
            <param name="digits">小数位数</param>
        </member>
        <member name="M:Bing.Utils.Extensions.Common.Extensions.KeepDigits(System.Double,System.Int32)">
            <summary>
            保留小数位数。四舍五入
            </summary>
            <param name="value">数据</param>
            <param name="digits">小数位数</param>
        </member>
        <member name="M:Bing.Utils.Extensions.Common.Extensions.KeepDigits(System.Decimal,System.Int32)">
            <summary>
            保留小数位数。四舍五入
            </summary>
            <param name="value">数据</param>
            <param name="digits">小数位数</param>
        </member>
        <member name="M:Bing.Utils.Extensions.Common.Extensions.IsIn(System.Byte,System.Byte,System.Byte)">
            <summary>
            判断 byte 是否在给定闭区间
            </summary>
            <param name="value">数据</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
        </member>
        <member name="M:Bing.Utils.Extensions.Common.Extensions.IsIn(System.Int16,System.Int16,System.Int16)">
            <summary>
            判断 short 是否在给定闭区间
            </summary>
            <param name="value">数据</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
        </member>
        <member name="M:Bing.Utils.Extensions.Common.Extensions.IsIn(System.Int32,System.Int32,System.Int32)">
            <summary>
            判断 int 是否在给定闭区间
            </summary>
            <param name="value">数据</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
        </member>
        <member name="M:Bing.Utils.Extensions.Common.Extensions.IsIn(System.Int64,System.Int64,System.Int64)">
            <summary>
            判断 long 是否在给定闭区间
            </summary>
            <param name="value">数据</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
        </member>
        <member name="M:Bing.Utils.Extensions.Common.Extensions.IsIn(System.Single,System.Single,System.Single)">
            <summary>
            判断 float 是否在给定闭区间
            </summary>
            <param name="value">数据</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
        </member>
        <member name="M:Bing.Utils.Extensions.Common.Extensions.IsIn(System.Double,System.Double,System.Double)">
            <summary>
            判断 double 是否在给定闭区间
            </summary>
            <param name="value">数据</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
        </member>
        <member name="M:Bing.Utils.Extensions.Common.Extensions.IsIn(System.Decimal,System.Decimal,System.Decimal)">
            <summary>
            判断 decimal 是否在给定闭区间
            </summary>
            <param name="value">数据</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
        </member>
        <member name="T:Bing.Utils.Extensions.Datas.DataTableExtensions">
            <summary>
            数据表(<see cref="T:System.Data.DataTable"/>) 扩展
            </summary>
        </member>
        <member name="M:Bing.Utils.Extensions.Datas.DataTableExtensions.ToList``1(System.Data.DataTable)">
            <summary>
            DataTable转换为泛型集合
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="dataTable">数据表</param>
        </member>
        <member name="T:Bing.Utils.Extensions.AutoRegisterData">
            <summary>
            自动注册数据
            </summary>
        </member>
        <member name="P:Bing.Utils.Extensions.AutoRegisterData.Services">
            <summary>
            服务集合
            </summary>
        </member>
        <member name="P:Bing.Utils.Extensions.AutoRegisterData.InjectionTypes">
            <summary>
            注入类型集合
            </summary>
        </member>
        <member name="P:Bing.Utils.Extensions.AutoRegisterData.TypeFilter">
            <summary>
            类型过滤器
            </summary>
        </member>
        <member name="M:Bing.Utils.Extensions.AutoRegisterData.#ctor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            初始化一个<see cref="T:Bing.Utils.Extensions.AutoRegisterData"/>类型的实例
            </summary>
            <param name="services">服务集合</param>
            <param name="injectionTypes">注入类型集合</param>
        </member>
        <member name="T:Bing.Utils.Extensions.AutoRegisterDataExtensions">
            <summary>
            自动注册数据(<see cref="T:Bing.Utils.Extensions.AutoRegisterData"/>) 扩展
            </summary>
        </member>
        <member name="M:Bing.Utils.Extensions.AutoRegisterDataExtensions.Where(Bing.Utils.Extensions.AutoRegisterData,System.Func{System.Type,System.Boolean})">
            <summary>
            条件查询
            </summary>
            <param name="autoRegisterData">自动注册数据</param>
            <param name="predicate">查询条件</param>
        </member>
        <member name="M:Bing.Utils.Extensions.AutoRegisterDataExtensions.AsPublicImplementedInterfaces(Bing.Utils.Extensions.AutoRegisterData,Microsoft.Extensions.DependencyInjection.ServiceLifetime)">
            <summary>
            将类实现的任何公共接口(IDisposable除外)进行注册
            </summary>
            <param name="autoRegisterData">自动注册数据</param>
            <param name="lifetime">生命周期</param>
        </member>
        <member name="T:Bing.Utils.Extensions.ServiceCollectionExtensions">
            <summary>
            服务集合(<see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>) 扩展
            </summary>
        </member>
        <member name="M:Bing.Utils.Extensions.ServiceCollectionExtensions.RegisterAssemblyPublicNonGenericClasses(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Reflection.Assembly[])">
            <summary>
            注册程序集中的所有公共的、非泛型的、非嵌套的类。
            </summary>
            <param name="services">服务集合</param>
            <param name="assemblies">程序集列表</param>
        </member>
        <member name="T:Bing.Utils.Extensions.BitmapExtensions">
            <summary>
            图像(<see cref="T:System.Drawing.Bitmap"/>) 扩展
            </summary>
        </member>
        <member name="M:Bing.Utils.Extensions.BitmapExtensions.ToPixelArray2D(System.Drawing.Bitmap)">
            <summary>
            将图像转换为 Color[,]颜色值二维数组
            </summary>
            <param name="bitmap">图像</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.BitmapExtensions.ToGrayArray2D(System.Drawing.Bitmap)">
            <summary>
            将图像转换为 byte[,]灰度值二维数组，后续所有操作都以二维数组作为中间变量
            </summary>
            <param name="bitmap">图像</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.BitmapExtensions.GetGrayValue(System.Byte,System.Byte,System.Byte)">
            <summary>
            获取灰度值
            </summary>
            <param name="red">红</param>
            <param name="green">绿</param>
            <param name="blue">蓝</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.BitmapExtensions.ToGrayArray2D(System.Drawing.Color[0:,0:])">
            <summary>
            将颜色二维数组转换为 byte[,]灰度值二维数组
            </summary>
            <param name="pixels">颜色二维数组</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.BitmapExtensions.GetGrayValue(System.Drawing.Color)">
            <summary>
            获取灰度值
            </summary>
            <param name="pixel">颜色</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.BitmapExtensions.ToBitmap(System.Drawing.Color[0:,0:])">
            <summary>
            将颜色二维数组转换为图像
            </summary>
            <param name="pixels">颜色二维数组</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.BitmapExtensions.ToBitmap(System.Byte[0:,0:])">
            <summary>
            将灰度值二维数组转换为图像
            </summary>
            <param name="grayBytes">灰度值二维数组</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.BitmapExtensions.Binaryzation(System.Byte[0:,0:],System.Byte)">
            <summary>
            将灰度值二维数组二值化
            </summary>
            <param name="grayBytes">灰度值二维数组</param>
            <param name="gray">灰度值</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.BitmapExtensions.DeepFore(System.Byte[0:,0:],System.Byte)">
            <summary>
            将灰度值二维数组前景色加黑
            </summary>
            <param name="grayBytes">灰度值二维数组</param>
            <param name="gray">灰度值</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.BitmapExtensions.ClearNoiseRound(System.Byte[0:,0:],System.Byte,System.Int32)">
            <summary>
            去除附近噪音，周边有效点数的方式（适合杂点/细线）
            </summary>
            <param name="binBytes">二进制数组</param>
            <param name="gray">灰度值</param>
            <param name="maxNearPoints">噪点阀值</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.BitmapExtensions.ClearNoiseArea(System.Byte[0:,0:],System.Byte,System.Int32)">
            <summary>
            去除区域噪音，联通域降噪方式，去除连通点数小于阀值的连通区域
            </summary>
            <param name="binBytes">二进制数组</param>
            <param name="gray">灰度值</param>
            <param name="minAreaPoints">噪点阀值</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.BitmapExtensions.IsBlack(System.Byte)">
            <summary>
            是否黑色
            </summary>
            <param name="value">颜色值</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.BitmapExtensions.FloodFill(System.Byte[0:,0:],System.Drawing.Point,System.Byte)">
            <summary>
            泛水填充算法，将相连通的区域使用指定灰度值填充
            </summary>
            <param name="binBytes">二进制数组</param>
            <param name="point">点坐标</param>
            <param name="replacementGray">填充灰度值</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.BitmapExtensions.FloodFill(System.Byte[0:,0:],System.Drawing.Point,System.Byte,System.Drawing.Point[]@)">
            <summary>
            泛水填充算法，将相连通的区域使用指定灰度值填充
            </summary>
            <param name="binBytes">二进制数组</param>
            <param name="point">点坐标</param>
            <param name="replacementGray">填充灰度值</param>
            <param name="points">已填充灰度值的点坐标数组</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.BitmapExtensions.ClearBorder(System.Byte[0:,0:],System.Int32)">
            <summary>
            去除图片边框
            </summary>
            <param name="grayBytes">灰度值二维数组</param>
            <param name="border">边框宽度</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.BitmapExtensions.AddBorder(System.Byte[0:,0:],System.Int32,System.Byte)">
            <summary>
            添加图片边框，默认白色
            </summary>
            <param name="grayBytes">灰度值二维数组</param>
            <param name="border">边框宽度</param>
            <param name="gray">灰度值</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.BitmapExtensions.DrawTo(System.Byte[0:,0:],System.Byte[0:,0:],System.Int32,System.Int32)">
            <summary>
            将小图画到大图中
            </summary>
            <param name="smallBytes">小图二维数组</param>
            <param name="bigBytes">大图二维数组</param>
            <param name="x1">边框横坐标</param>
            <param name="y1">边框纵坐标</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.BitmapExtensions.ClearGray(System.Byte[0:,0:],System.Byte,System.Byte)">
            <summary>
            去除指定范围的灰度
            </summary>
        </member>
        <member name="M:Bing.Utils.Extensions.BitmapExtensions.ToValid(System.Byte[0:,0:],System.Byte)">
            <summary>
            去除空白边界获取有效的图形
            </summary>
        </member>
        <member name="M:Bing.Utils.Extensions.BitmapExtensions.Clone(System.Byte[0:,0:],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            从原矩阵中复制指定矩阵
            </summary>
        </member>
        <member name="M:Bing.Utils.Extensions.BitmapExtensions.ShadowY(System.Byte[0:,0:])">
            <summary>
            统计二维二值化数组的的竖直投影
            </summary>
        </member>
        <member name="M:Bing.Utils.Extensions.BitmapExtensions.ShadowX(System.Byte[0:,0:])">
            <summary>
            统计二维二值化数组的横向投影
            </summary>
        </member>
        <member name="M:Bing.Utils.Extensions.BitmapExtensions.SplitShadowY(System.Byte[0:,0:],System.Byte,System.Byte)">
            <summary>
            根据二值化数组的竖直投影数据分割图片
            </summary>
            <param name="binBytes">二维二值化数组</param>
            <param name="minFontWidth">最小字符宽度，0则自动</param>
            <param name="minLines">最小有效投影行数</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.BitmapExtensions.ToCodeString(System.Byte[0:,0:],System.Byte,System.Boolean)">
            <summary>
            将二维二值化数组转换为特征码字符串
            </summary>
        </member>
        <member name="T:Bing.Utils.Extensions.HttpRequestExtensions">
            <summary>
            Http请求(<see cref="T:Microsoft.AspNetCore.Http.HttpRequest"/>) 扩展
            </summary>
        </member>
        <member name="M:Bing.Utils.Extensions.HttpRequestExtensions.GetAbsoluteUri(Microsoft.AspNetCore.Http.HttpRequest)">
            <summary>
            获取Http请求的绝对路径
            </summary>
            <param name="request">Http请求</param>
        </member>
        <member name="M:Bing.Utils.Extensions.HttpRequestExtensions.Query``1(Microsoft.AspNetCore.Http.HttpRequest,System.String,``0)">
            <summary>
            获取查询参数
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="request">Http请求</param>
            <param name="key">键</param>
            <param name="defaultValue">默认值</param>
        </member>
        <member name="M:Bing.Utils.Extensions.HttpRequestExtensions.Form``1(Microsoft.AspNetCore.Http.HttpRequest,System.String,``0)">
            <summary>
            获取表单参数
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="request">Http请求</param>
            <param name="key">键</param>
            <param name="defaultValue">默认值</param>
        </member>
        <member name="M:Bing.Utils.Extensions.HttpRequestExtensions.Params(Microsoft.AspNetCore.Http.HttpRequest,System.String)">
            <summary>
            获取参数
            </summary>
            <param name="request">请求信息</param>
            <param name="key">键名</param>
        </member>
        <member name="M:Bing.Utils.Extensions.HttpRequestExtensions.IsAjaxRequest(Microsoft.AspNetCore.Http.HttpRequest)">
            <summary>
            是否Ajax请求
            </summary>
            <param name="request">Http请求</param>
        </member>
        <member name="M:Bing.Utils.Extensions.HttpRequestExtensions.IsJsonContentType(Microsoft.AspNetCore.Http.HttpRequest)">
            <summary>
            是否Json内容类型
            </summary>
            <param name="request">Http请求</param>
        </member>
        <member name="F:Bing.Utils.Extensions.HttpRequestExtensions.BrowserRegex">
            <summary>
            浏览器正则表达式
            </summary>
        </member>
        <member name="F:Bing.Utils.Extensions.HttpRequestExtensions.VersionRegex">
            <summary>
            版本号正则表达式
            </summary>
        </member>
        <member name="M:Bing.Utils.Extensions.HttpRequestExtensions.IsMobileBrowser(Microsoft.AspNetCore.Http.HttpRequest)">
            <summary>
            是否移动端浏览器
            </summary>
            <param name="request">Http请求</param>
        </member>
        <member name="M:Bing.Utils.Extensions.HttpRequestExtensions.UserAgent(Microsoft.AspNetCore.Http.HttpRequest)">
            <summary>
            用户代理
            </summary>
            <param name="request">Http请求</param>
        </member>
        <member name="T:Bing.Utils.Extensions.Http.HttpResponseExtensions">
            <summary>
            Http响应(<see cref="T:Microsoft.AspNetCore.Http.HttpResponse"/>) 扩展
            </summary>
        </member>
        <member name="M:Bing.Utils.Extensions.Http.HttpResponseExtensions.WriteJsonAsync(Microsoft.AspNetCore.Http.HttpResponse,System.Object)">
            <summary>
            写入Json
            </summary>
            <param name="response">Http响应</param>
            <param name="obj">对象</param>
        </member>
        <member name="M:Bing.Utils.Extensions.Http.HttpResponseExtensions.WriteJsonAsync(Microsoft.AspNetCore.Http.HttpResponse,System.String)">
            <summary>
            写入Json
            </summary>
            <param name="response">Http响应</param>
            <param name="json">Json字符串</param>
        </member>
        <member name="M:Bing.Utils.Extensions.Http.HttpResponseExtensions.SetCache(Microsoft.AspNetCore.Http.HttpResponse,System.Int32)">
            <summary>
            设置缓存头
            </summary>
            <param name="response">Http响应</param>
            <param name="maxAge">最大有效期</param>
        </member>
        <member name="M:Bing.Utils.Extensions.Http.HttpResponseExtensions.SetNoCache(Microsoft.AspNetCore.Http.HttpResponse)">
            <summary>
            设置无缓存
            </summary>
            <param name="response">Http响应</param>
        </member>
        <member name="M:Bing.Utils.Extensions.Http.HttpResponseExtensions.WriteHtmlAsync(Microsoft.AspNetCore.Http.HttpResponse,System.String)">
            <summary>
            写入Html
            </summary>
            <param name="response">Http响应</param>
            <param name="html">Html字符串</param>
        </member>
        <member name="T:Bing.Utils.Extensions.Http.SessionExtensions">
            <summary>
            会话(<see cref="T:Microsoft.AspNetCore.Http.ISession"/>) 扩展
            </summary>
        </member>
        <member name="M:Bing.Utils.Extensions.Http.SessionExtensions.Set``1(Microsoft.AspNetCore.Http.ISession,System.String,``0)">
            <summary>
            设置会话
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="session">会话</param>
            <param name="key">键</param>
            <param name="value">值</param>
        </member>
        <member name="M:Bing.Utils.Extensions.Http.SessionExtensions.Get``1(Microsoft.AspNetCore.Http.ISession,System.String)">
            <summary>
            获取指定键名的值
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="session">会话</param>
            <param name="key">键名</param>
            <returns></returns>
        </member>
        <member name="T:Bing.Utils.Extensions.FileInfoExtensions">
            <summary>
            文件信息(<see cref="T:System.IO.FileInfo"/>) 扩展
            </summary>
        </member>
        <member name="M:Bing.Utils.Extensions.FileInfoExtensions.CompareTo(System.IO.FileInfo,System.IO.FileInfo)">
            <summary>
            比较文件
            </summary>
            <param name="file1">文件1</param>
            <param name="file2">文件2</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.FileInfoExtensions.Read(System.IO.FileInfo)">
            <summary>
            读取文件并转换为字符串
            </summary>
            <param name="file">文件</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.FileInfoExtensions.ReadBinary(System.IO.FileInfo)">
            <summary>
            读取文件并转换为二进制数组
            </summary>
            <param name="file">文件</param>
            <returns></returns>
        </member>
        <member name="T:Bing.Utils.Extensions.MemoryStreamExtensions">
            <summary>
            内存流(<see cref="T:System.IO.MemoryStream"/>) 扩展
            </summary>
        </member>
        <member name="M:Bing.Utils.Extensions.MemoryStreamExtensions.AsString(System.IO.MemoryStream,System.Text.Encoding)">
            <summary>
            转换成字符串输出
            </summary>
            <param name="ms">内存流</param>
            <param name="encoding">字符编码，默认值：UTF-8</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.MemoryStreamExtensions.FromString(System.IO.MemoryStream,System.String,System.Text.Encoding)">
            <summary>
            写入字符串到内存流中
            </summary>
            <param name="ms">内存流</param>
            <param name="input">输入值</param>
            <param name="encoding">字符编码，默认值：UTF-8</param>
        </member>
        <member name="T:Bing.Utils.Extensions.StreamExtensions">
            <summary>
            字节流(<see cref="T:System.IO.Stream"/>) 扩展
            </summary>
        </member>
        <member name="M:Bing.Utils.Extensions.StreamExtensions.ToFile(System.IO.Stream,System.String)">
            <summary>
            将流写入指定文件路径
            </summary>
            <param name="stream">流</param>
            <param name="path">文件路径</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.StreamExtensions.ContentsEqual(System.IO.Stream,System.IO.Stream)">
            <summary>
            比较流内容是否相等
            </summary>
            <param name="stream">流</param>
            <param name="other">待比较的流</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.StreamExtensions.GetReader(System.IO.Stream)">
            <summary>
            获取流读取器，默认编码：UTF-8
            </summary>
            <param name="stream">流</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.StreamExtensions.GetReader(System.IO.Stream,System.Text.Encoding)">
            <summary>
            获取流读取器，使用指定编码
            </summary>
            <param name="stream">流</param>
            <param name="encoding">编码，默认：UTF-8</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.StreamExtensions.GetWriter(System.IO.Stream)">
            <summary>
            获取流写入器，默认编码：UTF-8
            </summary>
            <param name="stream">流</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.StreamExtensions.GetWriter(System.IO.Stream,System.Text.Encoding)">
            <summary>
            获取流写入器，使用指定编码
            </summary>
            <param name="stream">流</param>
            <param name="encoding">编码，默认编码：UTF-8</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.StreamExtensions.ReadToEnd(System.IO.Stream)">
            <summary>
            从流中读取所有文本，默认编码：UTF-8
            </summary>
            <param name="stream">流</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.StreamExtensions.ReadToEnd(System.IO.Stream,System.Text.Encoding)">
            <summary>
            从流中读取所有文本，使用指定编码
            </summary>
            <param name="stream">流</param>
            <param name="encoding">编码，默认编码：UTF-8</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.StreamExtensions.SeekToBegin(System.IO.Stream)">
            <summary>
            设置流指针指向流的开始位置
            </summary>
            <param name="stream">流</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.StreamExtensions.SeekToEnd(System.IO.Stream)">
            <summary>
            设置流指针指向流的结束位置
            </summary>
            <param name="stream">流</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.StreamExtensions.CopyToMemory(System.IO.Stream)">
            <summary>
            将流复制到内存流中
            </summary>
            <param name="stream">流</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.StreamExtensions.ReadAllBytes(System.IO.Stream)">
            <summary>
            将流写入字节数组
            </summary>
            <param name="stream">流</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.StreamExtensions.Write(System.IO.Stream,System.Byte[])">
            <summary>
            将字节数组写入流
            </summary>
            <param name="stream">流</param>
            <param name="bytes">字节数组</param>
        </member>
        <member name="M:Bing.Utils.Extensions.StreamExtensions.Write(System.IO.Stream,System.String,System.Text.Encoding)">
            <summary>
            将字符串写以指定编码方式写入流
            </summary>
            <param name="stream"></param>
            <param name="context"></param>
            <param name="encoding"></param>
        </member>
        <member name="M:Bing.Utils.Extensions.StreamExtensions.GetMd5(System.IO.Stream)">
            <summary>
            获取流的MD5值
            </summary>
            <param name="stream">流</param>
        </member>
        <member name="T:Bing.Utils.Extensions.LambdaExpressionExtensions">
            <summary>
            Lambda表达式(<see cref="T:System.Linq.Expressions.LambdaExpression"/>) 扩展
            </summary>
        </member>
        <member name="M:Bing.Utils.Extensions.LambdaExpressionExtensions.ExtractPropertyInfo(System.Linq.Expressions.LambdaExpression)">
            <summary>
            提取属性信息
            </summary>
            <param name="expression">表达式</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.LambdaExpressionExtensions.ExtractFieldInfo(System.Linq.Expressions.LambdaExpression)">
            <summary>
            提取字段信息
            </summary>
            <param name="expression">表达式</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.LambdaExpressionExtensions.ExtractMemberInfo(System.Linq.Expressions.LambdaExpression)">
            <summary>
            提取成员信息
            </summary>
            <param name="expression">表达式</param>
            <returns></returns>
        </member>
        <member name="T:Bing.Utils.Extensions.QueryableExtensions">
            <summary>
            <see cref="T:System.Linq.IQueryable`1"/> 扩展
            </summary>
        </member>
        <member name="M:Bing.Utils.Extensions.QueryableExtensions.WhereIf``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Boolean)">
            <summary>
            是否执行指定条件的查询，根据第三方条件是否为真来决定
            </summary>
            <typeparam name="T">动态类型</typeparam>
            <param name="source">要查询的源</param>
            <param name="predicate">查询条件</param>
            <param name="condition">第三方条件</param>
            <returns>查询结果</returns>
        </member>
        <member name="M:Bing.Utils.Extensions.QueryableExtensions.PageBy``1(System.Linq.IQueryable{``0},System.Int32,System.Int32)">
            <summary>
            分页
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="queryable">数据源</param>
            <param name="skipCount">跳过的行数</param>
            <param name="pageSize">每页记录数</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.QueryableExtensions.PageBy``2(System.Linq.IQueryable{``0},System.Int32,System.Int32)">
            <summary>
            分页
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <typeparam name="TQueryable">查询源类型</typeparam>
            <param name="queryable">数据源</param>
            <param name="skipCount">跳过的行数</param>
            <param name="pageSize">每页记录数</param>
            <returns></returns>
        </member>
        <member name="T:Bing.Utils.Extensions.AssemblyExtensions">
            <summary>
            程序集(<see cref="T:System.Reflection.Assembly"/>) 扩展
            </summary>
        </member>
        <member name="M:Bing.Utils.Extensions.AssemblyExtensions.GetFileVersion(System.Reflection.Assembly)">
            <summary>
            获取程序集的文件版本
            </summary>
            <param name="assembly">程序集</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.AssemblyExtensions.GetProductVersion(System.Reflection.Assembly)">
            <summary>
            获取程序集的产品版本
            </summary>
            <param name="assembly">程序集</param>
            <returns></returns>
        </member>
        <member name="T:Bing.Utils.Extensions.PropertyInfoExtensions">
            <summary>
            属性信息(<see cref="T:System.Reflection.PropertyInfo"/>) 扩展
            </summary>
        </member>
        <member name="M:Bing.Utils.Extensions.PropertyInfoExtensions.IsStatic(System.Reflection.PropertyInfo)">
            <summary>
            判断属性是否静态
            </summary>
            <param name="property">属性</param>
        </member>
        <member name="T:Bing.Utils.Extensions.ClaimsExtensions">
            <summary>
            声明(<see cref="T:System.Security.Claims.Claim"/>) 扩展
            </summary>
        </member>
        <member name="M:Bing.Utils.Extensions.ClaimsExtensions.TryAddClaim(System.Collections.Generic.List{System.Security.Claims.Claim},System.String,System.String,System.String)">
            <summary>
            尝试添加声明到列表当中。如果不存在，则添加；存在，不添加也不抛异常
            </summary>
            <param name="claims">声明列表</param>
            <param name="type">类型</param>
            <param name="value">值</param>
            <param name="valueType">值类型</param>
        </member>
        <member name="T:Bing.Utils.Extensions.IdentityExtensions">
            <summary>
            标识(<see cref="T:System.Security.Principal.IIdentity"/>) 扩展
            </summary>
        </member>
        <member name="M:Bing.Utils.Extensions.IdentityExtensions.GetValue(System.Security.Principal.IIdentity,System.String)">
            <summary>
            获取指定类型的Claim值
            </summary>
            <param name="identity">标识</param>
            <param name="type">类型</param>
        </member>
        <member name="M:Bing.Utils.Extensions.IdentityExtensions.GetValue``1(System.Security.Principal.IIdentity,System.String)">
            <summary>
            获取指定类型的Claim值
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="identity">标识</param>
            <param name="type">类型</param>
        </member>
        <member name="M:Bing.Utils.Extensions.IdentityExtensions.GetValues(System.Security.Principal.IIdentity,System.String)">
            <summary>
            获取指定类型的所有Claim值
            </summary>
            <param name="identity">标识</param>
            <param name="type">类型</param>
        </member>
        <member name="M:Bing.Utils.Extensions.IdentityExtensions.RemoveClaim(System.Security.Principal.IIdentity,System.String)">
            <summary>
            移除指定类型的声明
            </summary>
            <param name="identity">标识</param>
            <param name="claimType">声明类型</param>
        </member>
        <member name="T:Bing.Utils.Extensions.StringBuilderExtensions">
            <summary>
            <see cref="T:System.Text.StringBuilder"/> 扩展
            </summary>
        </member>
        <member name="M:Bing.Utils.Extensions.StringBuilderExtensions.TrimStart(System.Text.StringBuilder)">
            <summary>
            去除<see cref="T:System.Text.StringBuilder"/>开头空格
            </summary>
            <param name="sb">StringBuilder</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.StringBuilderExtensions.TrimStart(System.Text.StringBuilder,System.Char)">
            <summary>
            去除<see cref="T:System.Text.StringBuilder"/>开头指定字符
            </summary>
            <param name="sb">StringBuilder</param>
            <param name="c">字符</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.StringBuilderExtensions.TrimStart(System.Text.StringBuilder,System.Char[])">
            <summary>
            去除<see cref="T:System.Text.StringBuilder"/>开头指定字符数组
            </summary>
            <param name="sb">StringBuilder</param>
            <param name="chars">字符数组</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.StringBuilderExtensions.TrimStart(System.Text.StringBuilder,System.String)">
            <summary>
            去除<see cref="T:System.Text.StringBuilder"/>开头指定字符串
            </summary>
            <param name="sb">StringBuilder</param>
            <param name="str">字符串</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.StringBuilderExtensions.TrimEnd(System.Text.StringBuilder)">
            <summary>
            去除<see cref="T:System.Text.StringBuilder"/>尾部空格
            </summary>
            <param name="sb">StringBuilder</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.StringBuilderExtensions.TrimEnd(System.Text.StringBuilder,System.Char)">
            <summary>
            去除<see cref="T:System.Text.StringBuilder"/>尾部指定字符
            </summary>
            <param name="sb">StringBuilder</param>
            <param name="c">字符</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.StringBuilderExtensions.TrimEnd(System.Text.StringBuilder,System.Char[])">
            <summary>
            去除<see cref="T:System.Text.StringBuilder"/>尾部指定字符数组
            </summary>
            <param name="sb">StringBuilder</param>
            <param name="chars">字符数组</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.StringBuilderExtensions.TrimEnd(System.Text.StringBuilder,System.String)">
            <summary>
            去除<see cref="T:System.Text.StringBuilder"/>尾部指定字符串
            </summary>
            <param name="sb">StringBuilder</param>
            <param name="str">字符串</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.StringBuilderExtensions.Trim(System.Text.StringBuilder)">
            <summary>
            去除<see cref="T:System.Text.StringBuilder"/>两端的空格
            </summary>
            <param name="sb">StringBuilder</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.StringBuilderExtensions.SubString(System.Text.StringBuilder,System.Int32,System.Int32)">
            <summary>
            返回<see cref="T:System.Text.StringBuilder"/>从起始位置指定长度的字符串
            </summary>
            <param name="sb">StringBuilder</param>
            <param name="start">起始位置</param>
            <param name="length">长度</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.StringBuilderExtensions.AppendLine(System.Text.StringBuilder,System.String,System.Object[])">
            <summary>
            添加内容并换行
            </summary>
            <param name="sb">StringBuilder</param>
            <param name="value">内容</param>
            <param name="parameters">参数</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.StringBuilderExtensions.AppendJoin``1(System.Text.StringBuilder,System.String,``0[])">
            <summary>
            添加数组内容
            </summary>
            <typeparam name="T">数组内容</typeparam>
            <param name="sb">StringBuilder</param>
            <param name="separator">分隔符</param>
            <param name="values">数组内容</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.StringBuilderExtensions.AppendIf(System.Text.StringBuilder,System.Boolean,System.Object)">
            <summary>
            根据条件添加内容
            </summary>
            <param name="sb">StringBuilder</param>
            <param name="condition">拼接条件</param>
            <param name="value">内容</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.StringBuilderExtensions.AppendFormatIf(System.Text.StringBuilder,System.Boolean,System.String,System.Object[])">
            <summary>
            根据条件添加内容
            </summary>
            <param name="sb">StringBuilder</param>
            <param name="condition">拼接条件</param>
            <param name="value">内容</param>
            <param name="parameters">参数</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.StringBuilderExtensions.AppendLineIf(System.Text.StringBuilder,System.Boolean,System.Object)">
            <summary>
            根据条件添加内容并换行
            </summary>
            <param name="sb">StringBuiler</param>
            <param name="condition">拼接条件</param>
            <param name="value">内容</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.StringBuilderExtensions.AppendLine(System.Text.StringBuilder,System.Boolean,System.String,System.Object[])">
            <summary>
            根据条件添加内容并换行
            </summary>
            <param name="sb">StringBuilder</param>
            <param name="condition">拼接条件</param>
            <param name="value">内容</param>
            <param name="parmaeters">参数</param>
            <returns></returns>
        </member>
        <member name="T:Bing.Utils.Extensions.TaskExtensions">
            <summary>
            任务(<see cref="T:System.Threading.Tasks.Task"/>) 扩展
            </summary>
        </member>
        <member name="M:Bing.Utils.Extensions.TaskExtensions.WaitResult``1(System.Threading.Tasks.Task{``0},System.Int32)">
            <summary>
            等待结果
            </summary>
            <typeparam name="TResult">结果类型</typeparam>
            <param name="task">异步操作</param>
            <param name="timeout">超时时间。单位：毫秒</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.TaskExtensions.TimeoutAfter(System.Threading.Tasks.Task,System.Int32)">
            <summary>
            设置Task过期时间
            </summary>
            <param name="task">异步操作</param>
            <param name="millisecondsDelay">超时时间。单位：毫秒</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.TaskExtensions.TimeoutAfter``1(System.Threading.Tasks.Task{``0},System.Int32)">
            <summary>
            设置Task过期时间
            </summary>
            <typeparam name="TResult">结果类型</typeparam>
            <param name="task">异步操作</param>
            <param name="millisecondsDelay">超时时间。单位：毫秒</param>
            <returns></returns>
        </member>
        <member name="T:Bing.Utils.Extensions.TaskFactoryExtensions">
            <summary>
            任务工厂(<see cref="T:System.Threading.Tasks.TaskFactory"/>) 扩展
            </summary>
        </member>
        <member name="M:Bing.Utils.Extensions.TaskFactoryExtensions.StartDelayedTask(System.Threading.Tasks.TaskFactory,System.Int32,System.Action)">
            <summary>
            启动延时任务
            </summary>
            <param name="factory">任务工厂</param>
            <param name="millisecondsDelay">延时时间。单位：毫秒</param>
            <param name="action">操作</param>
            <returns></returns>
        </member>
        <member name="T:Bing.Utils.Extensions.XmlExtensions">
            <summary>
            Xml 扩展
            </summary>
        </member>
        <member name="M:Bing.Utils.Extensions.XmlExtensions.ToXElement(System.Xml.XmlNode)">
            <summary>
            将XmlNode转换为XElement
            </summary>
            <param name="node">Xml节点</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.XmlExtensions.ToXmlNode(System.Xml.Linq.XElement)">
            <summary>
            将XElement转换为XmlNode
            </summary>
            <param name="element">Xml元素</param>
            <returns></returns>
        </member>
        <member name="T:Bing.Utils.Extensions.XmlNodeExtensions">
            <summary>
            Xml节点(<see cref="T:System.Xml.XmlNode"/>) 扩展
            </summary>
        </member>
        <member name="M:Bing.Utils.Extensions.XmlNodeExtensions.CreateChildNode(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            创建Xml子节点，并追加到父节点
            </summary>
            <param name="parentNode">父节点</param>
            <param name="name">子节点的名称</param>
            <param name="namespaceUri">节点的命名空间</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.XmlNodeExtensions.CreateCDataSection(System.Xml.XmlNode,System.String)">
            <summary>
            创建CData节点，并追加到父节点
            </summary>
            <param name="parentNode">父节点</param>
            <param name="data">CData节</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.XmlNodeExtensions.GetCdataSection(System.Xml.XmlNode)">
            <summary>
            获取CData节点的内容
            </summary>
            <param name="parentNode">父节点</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.XmlNodeExtensions.GetAttribute(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            获取Xml节点属性值
            </summary>
            <param name="node">节点</param>
            <param name="name">属性名</param>
            <param name="defaultValue">默认值。如果没有匹配属性存在</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.XmlNodeExtensions.GetAttribute``1(System.Xml.XmlNode,System.String,``0)">
            <summary>
            获取Xml节点属性值
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="node">节点</param>
            <param name="name">属性名</param>
            <param name="defaultValue">>默认值。如果没有匹配属性存在</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Extensions.XmlNodeExtensions.SetAttribute(System.Xml.XmlNode,System.String,System.Object)">
            <summary>
            设置Xml节点属性值
            </summary>
            <param name="node">节点</param>
            <param name="name">属性名</param>
            <param name="value">属性值</param>
        </member>
        <member name="M:Bing.Utils.Extensions.XmlNodeExtensions.SetAttribute(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            设置Xml节点属性值
            </summary>
            <param name="node">节点</param>
            <param name="name">属性名</param>
            <param name="value">属性值</param>
        </member>
        <member name="T:Bing.Utils.Files.DefaultFileStore">
            <summary>
            本地文件存储服务
            </summary>
        </member>
        <member name="F:Bing.Utils.Files.DefaultFileStore._pathGenerator">
            <summary>
            路径生成器
            </summary>
        </member>
        <member name="M:Bing.Utils.Files.DefaultFileStore.#ctor(Bing.Utils.Files.Paths.IPathGenerator)">
            <summary>
            初始化一个<see cref="T:Bing.Utils.Files.DefaultFileStore"/>类型的实例
            </summary>
            <param name="pathGenerator">路径生成器</param>
        </member>
        <member name="M:Bing.Utils.Files.DefaultFileStore.SaveAsync">
            <summary>
            保存文件，返回完整文件路径
            </summary>
        </member>
        <member name="T:Bing.Utils.Files.FileInfo">
            <summary>
            文件信息
            </summary>
        </member>
        <member name="M:Bing.Utils.Files.FileInfo.#ctor(System.String,System.Nullable{System.Int64},System.String,System.String)">
            <summary>
            初始化一个<see cref="T:Bing.Utils.Files.FileInfo"/>类型的实例
            </summary>
            <param name="path">文件路径</param>
            <param name="size">文件大小</param>
            <param name="fileName">文件名</param>
            <param name="id">文件标识</param>
        </member>
        <member name="P:Bing.Utils.Files.FileInfo.Id">
            <summary>
            文件标识
            </summary>
        </member>
        <member name="P:Bing.Utils.Files.FileInfo.Path">
            <summary>
            文件路径
            </summary>
        </member>
        <member name="P:Bing.Utils.Files.FileInfo.FileName">
            <summary>
            文件名
            </summary>
        </member>
        <member name="P:Bing.Utils.Files.FileInfo.SaveName">
            <summary>
            存储文件名
            </summary>
        </member>
        <member name="P:Bing.Utils.Files.FileInfo.Extension">
            <summary>
            扩展名
            </summary>
        </member>
        <member name="P:Bing.Utils.Files.FileInfo.Size">
            <summary>
            文件大小
            </summary>
        </member>
        <member name="P:Bing.Utils.Files.FileInfo.Md5">
            <summary>
            文件的MD5值
            </summary>
        </member>
        <member name="P:Bing.Utils.Files.FileInfo.Url">
            <summary>
            访问地址
            </summary>
        </member>
        <member name="P:Bing.Utils.Files.FileInfo.FullPath">
            <summary>
            完整存储路径。不包含根路径
            </summary>
        </member>
        <member name="M:Bing.Utils.Files.FileInfo.GetExtension(System.String,System.String)">
            <summary>
            获取扩展名
            </summary>
            <param name="path">文件路径</param>
            <param name="fileName">文件名</param>
        </member>
        <member name="T:Bing.Utils.Files.FileSize">
            <summary>
            文件大小
            </summary>
        </member>
        <member name="P:Bing.Utils.Files.FileSize.Size">
            <summary>
            文件字节长度
            </summary>
        </member>
        <member name="M:Bing.Utils.Files.FileSize.#ctor(System.Int64,Bing.Utils.Files.FileSizeUnit)">
            <summary>
            初始化一个<see cref="T:Bing.Utils.Files.FileSize"/>类型的实例
            </summary>
            <param name="size">文件大小</param>
            <param name="unit">文件大小单位</param>
        </member>
        <member name="M:Bing.Utils.Files.FileSize.GetSize(System.Int64,Bing.Utils.Files.FileSizeUnit)">
            <summary>
            获取文件大小
            </summary>
            <param name="size">文件大小</param>
            <param name="unit">文件大小单位</param>
        </member>
        <member name="M:Bing.Utils.Files.FileSize.GetSize">
            <summary>
            获取文件大小，单位：字节
            </summary>
        </member>
        <member name="M:Bing.Utils.Files.FileSize.GetSizeByK">
            <summary>
            获取文件大小，单位：K
            </summary>
        </member>
        <member name="M:Bing.Utils.Files.FileSize.GetSizeByM">
            <summary>
            获取文件大小，单位：M
            </summary>
        </member>
        <member name="M:Bing.Utils.Files.FileSize.GetSizeByG">
            <summary>
            获取文件大小，单位：G
            </summary>
        </member>
        <member name="M:Bing.Utils.Files.FileSize.ToString">
            <summary>
            输出描述
            </summary>
        </member>
        <member name="T:Bing.Utils.Files.FileSizeUnit">
            <summary>
            文件大小单位
            </summary>
        </member>
        <member name="F:Bing.Utils.Files.FileSizeUnit.Byte">
            <summary>
            字节
            </summary>
        </member>
        <member name="F:Bing.Utils.Files.FileSizeUnit.K">
            <summary>
            K字节
            </summary>
        </member>
        <member name="F:Bing.Utils.Files.FileSizeUnit.M">
            <summary>
            M字节
            </summary>
        </member>
        <member name="F:Bing.Utils.Files.FileSizeUnit.G">
            <summary>
            G字节
            </summary>
        </member>
        <member name="T:Bing.Utils.Files.FileSizeUnitExtensions">
            <summary>
            文件大小单位枚举扩展
            </summary>
        </member>
        <member name="M:Bing.Utils.Files.FileSizeUnitExtensions.Description(System.Nullable{Bing.Utils.Files.FileSizeUnit})">
            <summary>
            获取描述
            </summary>
            <param name="unit">文件大小单位</param>
        </member>
        <member name="M:Bing.Utils.Files.FileSizeUnitExtensions.Value(System.Nullable{Bing.Utils.Files.FileSizeUnit})">
            <summary>
            获取值
            </summary>
            <param name="unit">文件大小单位</param>
        </member>
        <member name="T:Bing.Utils.Files.IFileStore">
            <summary>
            文件存储服务
            </summary>
        </member>
        <member name="M:Bing.Utils.Files.IFileStore.SaveAsync">
            <summary>
            保存文件，返回完整文件路径
            </summary>
        </member>
        <member name="T:Bing.Utils.Files.Paths.DefaultBasePath">
            <summary>
            默认基路径
            </summary>
        </member>
        <member name="F:Bing.Utils.Files.Paths.DefaultBasePath._path">
            <summary>
            基路径
            </summary>
        </member>
        <member name="M:Bing.Utils.Files.Paths.DefaultBasePath.#ctor(System.String)">
            <summary>
            初始化一个<see cref="T:Bing.Utils.Files.Paths.DefaultBasePath"/>类型的实例
            </summary>
            <param name="path">基路径</param>
        </member>
        <member name="M:Bing.Utils.Files.Paths.DefaultBasePath.GetPath">
            <summary>
            获取基路径
            </summary>
        </member>
        <member name="T:Bing.Utils.Files.Paths.DefaultPathGenerator">
            <summary>
            默认路径生成器
            </summary>
        </member>
        <member name="F:Bing.Utils.Files.Paths.DefaultPathGenerator._basePath">
            <summary>
            基路径
            </summary>
        </member>
        <member name="M:Bing.Utils.Files.Paths.DefaultPathGenerator.#ctor(Bing.Utils.Files.Paths.IBasePath,Bing.Utils.Randoms.IRandomGenerator)">
            <summary>
            初始化一个<see cref="T:Bing.Utils.Files.Paths.DefaultPathGenerator"/>类型的实例
            </summary>
            <param name="basePath">基路径</param>
            <param name="randomGenerator">随机数生成器</param>
        </member>
        <member name="M:Bing.Utils.Files.Paths.DefaultPathGenerator.GeneratePath(System.String)">
            <summary>
            创建完整路径
            </summary>
            <param name="fileName">被处理过的安全有效的文件名</param>
        </member>
        <member name="T:Bing.Utils.Files.Paths.IBasePath">
            <summary>
            基路径
            </summary>
        </member>
        <member name="M:Bing.Utils.Files.Paths.IBasePath.GetPath">
            <summary>
            获取基路径
            </summary>
        </member>
        <member name="T:Bing.Utils.Files.Paths.IPathGenerator">
            <summary>
            路径生成器
            </summary>
        </member>
        <member name="M:Bing.Utils.Files.Paths.IPathGenerator.Generate(System.String)">
            <summary>
            生成路径
            </summary>
            <param name="fileName">文件名，必须包含扩展名，如果仅传入扩展名则生成随机文件名</param>
        </member>
        <member name="T:Bing.Utils.Files.Paths.PathGeneratorBase">
            <summary>
            路径生成器基类
            </summary>
        </member>
        <member name="F:Bing.Utils.Files.Paths.PathGeneratorBase._randomGenerator">
            <summary>
            随机数生成器
            </summary>
        </member>
        <member name="M:Bing.Utils.Files.Paths.PathGeneratorBase.#ctor(Bing.Utils.Randoms.IRandomGenerator)">
            <summary>
            初始化一个<see cref="T:Bing.Utils.Files.Paths.PathGeneratorBase"/>类型的实例
            </summary>
            <param name="randomGenerator">随机数生成器</param>
        </member>
        <member name="M:Bing.Utils.Files.Paths.PathGeneratorBase.Generate(System.String)">
            <summary>
            生成路径
            </summary>
            <param name="fileName">文件名，必须包含扩展名，如果仅传入扩展名则生成随机文件名</param>
        </member>
        <member name="M:Bing.Utils.Files.Paths.PathGeneratorBase.GeneratePath(System.String)">
            <summary>
            创建完整路径
            </summary>
            <param name="fileName">被处理过的安全有效的文件名</param>
        </member>
        <member name="M:Bing.Utils.Files.Paths.PathGeneratorBase.GetFileName(System.String)">
            <summary>
            获取文件名
            </summary>
            <param name="fileName">文件名</param>
        </member>
        <member name="M:Bing.Utils.Files.Paths.PathGeneratorBase.FilterFileName(System.String)">
            <summary>
            过滤文件名
            </summary>
            <param name="fileName">文件名</param>
        </member>
        <member name="T:Bing.Utils.Helpers.AmountUnitConv">
            <summary>
            金额单位转换操作
            </summary>
        </member>
        <member name="M:Bing.Utils.Helpers.AmountUnitConv.ToYuan(System.Int32)">
            <summary>
            分转元
            </summary>
            <param name="fen">分</param>
        </member>
        <member name="M:Bing.Utils.Helpers.AmountUnitConv.ToYuan(System.Nullable{System.Int32})">
            <summary>
            分转元
            </summary>
            <param name="fen">分</param>
        </member>
        <member name="M:Bing.Utils.Helpers.AmountUnitConv.ToFen(System.Decimal)">
            <summary>
            元转分
            </summary>
            <param name="yuan">元</param>
        </member>
        <member name="M:Bing.Utils.Helpers.AmountUnitConv.ToFen(System.Nullable{System.Decimal})">
            <summary>
            元转分
            </summary>
            <param name="yuan">元</param>
        </member>
        <member name="M:Bing.Utils.Helpers.AmountUnitConv.CutDecimalWithN(System.Decimal,System.Int32)">
            <summary>
            截取保留N位小数且不进行四舍五入
            </summary>
            <param name="input">输入值</param>
            <param name="digits">小数位数</param>
        </member>
        <member name="M:Bing.Utils.Helpers.AmountUnitConv.ToN2String(System.Decimal)">
            <summary>
            保留两位小数
            </summary>
            <param name="input">输入值</param>
        </member>
        <member name="T:Bing.Utils.Helpers.Check">
            <summary>
            参数检查操作
            </summary>
        </member>
        <member name="M:Bing.Utils.Helpers.Check.Require``1(System.Boolean,System.String)">
            <summary>
            验证指定值的断言<paramref name="assertion"/>是否为真，如果不为真，抛出指定消息<paramref name="message"/>的指定类型<typeparamref name="TException"/>异常
            </summary>
            <typeparam name="TException">异常类型</typeparam>
            <param name="assertion">要验证的断言</param>
            <param name="message">异常消息</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Bing.Utils.Helpers.Check.Required``1(``0,System.Func{``0,System.Boolean},System.String)">
            <summary>
            验证指定值的断言表达式是否为真，不为值抛出<see cref="T:System.Exception"/>异常
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="value">要判断的值</param>
            <param name="assertionFunc">要验证的断言</param>
            <param name="message">异常消息</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Bing.Utils.Helpers.Check.Required``2(``0,System.Func{``0,System.Boolean},System.String)">
            <summary>
            验证指定值的断言表达式是否为真，不为真抛出<see cref="T:System.Exception"/>异常
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <typeparam name="TException">异常类型</typeparam>
            <param name="value">要判断的值</param>
            <param name="assertionFunc">要验证的断言</param>
            <param name="message">异常消息</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Bing.Utils.Helpers.Check.NotNull``1(``0,System.String)">
            <summary>
            检查参数不能为空引用，否则抛出<see cref="T:System.ArgumentNullException"/>异常
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="value">要判断的值</param>
            <param name="paramName">参数名</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Bing.Utils.Helpers.Check.NotNullOrEmpty(System.String,System.String)">
            <summary>
            检查字符串不能为空引用或空字符串，否则抛出<see cref="T:System.ArgumentNullException"/>异常或<see cref="T:System.ArgumentException"/>异常
            </summary>
            <param name="value">要判断的值</param>
            <param name="paramName">参数名</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Bing.Utils.Helpers.Check.NotEmpty(System.Guid,System.String)">
            <summary>
            检查Guid值不能为Guid.Empty，否则抛出<see cref="T:System.ArgumentException"/>异常
            </summary>
            <param name="value">要判断的值</param>
            <param name="paramName">参数名</param>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Bing.Utils.Helpers.Check.NotNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            检查集合不能为空引用或空集合，否则抛出<see cref="T:System.ArgumentNullException"/>异常或<see cref="T:System.ArgumentException"/>异常。
            </summary>
            <typeparam name="T">集合项的类型</typeparam>
            <param name="collection">要判断的值</param>
            <param name="paramName">参数名</param>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Bing.Utils.Helpers.Check.NotNullOrEmpty``1(System.Collections.Generic.IDictionary{System.String,``0},System.String)">
            <summary>
            检查字典不能为空引用或空字典，否则抛出<see cref="T:System.ArgumentNullException"/>异常或<see cref="T:System.ArgumentException"/>异常。
            </summary>
            <typeparam name="T">值类型</typeparam>
            <param name="dictionary">字典</param>
            <param name="paramName">参数名</param>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Bing.Utils.Helpers.Check.LessThan``1(``0,System.String,``0,System.Boolean)">
            <summary>
            检查参数必须小于[或可等于，参数canEqual]指定值，否则抛出<see cref="T:System.ArgumentOutOfRangeException"/>异常
            </summary>
            <typeparam name="T">参数类型</typeparam>
            <param name="value">要判断的值</param>
            <param name="paramName">参数名</param>
            <param name="target">要比较的值</param>
            <param name="canEqual">是否可等于</param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Bing.Utils.Helpers.Check.GreaterThan``1(``0,System.String,``0,System.Boolean)">
            <summary>
            检查参数必须大于[或可等于，参数canEqual]指定值，否则抛出<see cref="T:System.ArgumentOutOfRangeException"/>异常
            </summary>
            <typeparam name="T">参数类型</typeparam>
            <param name="value">要判断的值</param>
            <param name="paramName">参数名</param>
            <param name="target">要比较的值</param>
            <param name="canEqual">是否可等于</param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Bing.Utils.Helpers.Check.Between``1(``0,System.String,``0,``0,System.Boolean,System.Boolean)">
            <summary>
            检查参数必须在指定范围之间，否则抛出<see cref="T:System.ArgumentOutOfRangeException"/>异常
            </summary>
            <typeparam name="T">参数类型</typeparam>
            <param name="value">要判断的值</param>
            <param name="paramName">参数名</param>
            <param name="start">比较范围的起始值</param>
            <param name="end">比较范围的结束值</param>
            <param name="startEqual">是否可等于起始值</param>
            <param name="endEqual">是否可等于结束值</param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Bing.Utils.Helpers.Check.NotNegativeOrZero(System.TimeSpan,System.String)">
            <summary>
            检查参数不能为负数或零，否则抛出<see cref="T:System.ArgumentOutOfRangeException"/>异常
            </summary>
            <param name="timeSpan">时间戳</param>
            <param name="paramName">参数名</param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Bing.Utils.Helpers.Check.DirectoryExists(System.String,System.String)">
            <summary>
            检查指定路径的文件夹必须存在，否则抛出<see cref="T:System.IO.DirectoryNotFoundException"/>异常
            </summary>
            <param name="directory">目录路径</param>
            <param name="paramName">参数名</param>
            <exception cref="T:System.IO.DirectoryNotFoundException"></exception>
        </member>
        <member name="M:Bing.Utils.Helpers.Check.FileExists(System.String,System.String)">
            <summary>
            检查指定路径的文件必须存在，否则抛出<see cref="T:System.IO.FileNotFoundException"/>异常。
            </summary>
            <param name="fileName">文件路径，包含文件名</param>
            <param name="paramName">参数名</param>
            <exception cref="T:System.IO.FileNotFoundException"></exception>
        </member>
        <member name="T:Bing.Utils.Helpers.ColorConverter">
            <summary>
            颜色转换器
            </summary>
        </member>
        <member name="M:Bing.Utils.Helpers.ColorConverter.ToHex(System.Drawing.Color)">
            <summary>
            转换为16进制颜色
            </summary>
            <param name="color">颜色</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.ColorConverter.ToRgb(System.Drawing.Color)">
            <summary>
            转换为RGB颜色
            </summary>
            <param name="color">颜色</param>
        </member>
        <member name="M:Bing.Utils.Helpers.ColorConverter.RgbToHex(System.Int32,System.Int32,System.Int32)">
            <summary>
            RGB格式转换为16进制颜色
            </summary>
            <param name="r">红色</param>
            <param name="g">绿色</param>
            <param name="b">蓝色</param>
        </member>
        <member name="M:Bing.Utils.Helpers.ColorConverter.GetColorFromCssString(System.String)">
            <summary>
            从样式颜色中获取系统颜色
            </summary>
            <param name="cssColour">样式颜色</param>
        </member>
        <member name="M:Bing.Utils.Helpers.ColorConverter.HslaToRgba(System.Int16,System.Byte,System.Byte,System.Byte)">
            <summary>
            Hsla格式转换为RGBA格式
            </summary>
            <param name="hue"></param>
            <param name="saturation"></param>
            <param name="lightness"></param>
            <param name="alpha"></param>
        </member>
        <member name="M:Bing.Utils.Helpers.ColorConverter.ParseRgb(System.String)">
            <summary>
            格式化RGB
            </summary>
            <param name="input"></param>
        </member>
        <member name="M:Bing.Utils.Helpers.ColorConverter.ParseClamp(System.String,System.Double,System.Double)">
            <summary>
            格式化范围值
            </summary>
            <param name="input"></param>
            <param name="maxValue"></param>
            <param name="minValue"></param>
        </member>
        <member name="M:Bing.Utils.Helpers.ColorConverter.ParseFloat(System.String)">
            <summary>
            格式化Float
            </summary>
            <param name="input"></param>
        </member>
        <member name="M:Bing.Utils.Helpers.ColorConverter.ParseHue(System.String)">
            <summary>
            格式化Hue
            </summary>
            <param name="input"></param>
        </member>
        <member name="T:Bing.Utils.Helpers.Common">
            <summary>
            常用公共操作
            </summary>
        </member>
        <member name="M:Bing.Utils.Helpers.Common.GetType``1">
            <summary>
            获取类型
            </summary>
            <typeparam name="T">类型</typeparam>
        </member>
        <member name="M:Bing.Utils.Helpers.Common.GetType(System.Type)">
            <summary>
            获取类型
            </summary>
            <param name="type">类型</param>
        </member>
        <member name="P:Bing.Utils.Helpers.Common.Line">
            <summary>
            换行符
            </summary>
        </member>
        <member name="M:Bing.Utils.Helpers.Common.GetPhysicalPath(System.String)">
            <summary>
            获取物理路径
            </summary>
            <param name="relativePath">相对路径</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Common.GetWebRootPath(System.String)">
            <summary>
            获取wwwroot路径
            </summary>
            <param name="relativePath">相对路径</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Common.Swap``1(``0@,``0@)">
            <summary>
            交换值。交换两个提供的变量中的值
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="a">变量A</param>
            <param name="b">变量B</param>
        </member>
        <member name="T:Bing.Utils.Helpers.Compression">
            <summary>
            压缩操作
            </summary>
        </member>
        <member name="M:Bing.Utils.Helpers.Compression.Compress(System.Byte[])">
            <summary>
            对byte[]数组进行压缩
            </summary>
            <param name="data">待压缩的byte数组</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Compression.Decompress(System.Byte[])">
            <summary>
            对byte[]数组进行解压
            </summary>
            <param name="data">待解压的byte数组U</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Compression.Compress(System.String)">
            <summary>
            对字符串进行压缩
            </summary>
            <param name="value">待压缩的字符串</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Compression.Decompress(System.String)">
            <summary>
            对字符串进行解压
            </summary>
            <param name="value">待解压的字符串</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Compression.Zip(System.String,System.String)">
            <summary>
            将文件夹压缩成zip文件
            </summary>
            <param name="sourceDir">压缩目录</param>
            <param name="zipFile">压缩文件存放路径</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Compression.UnZip(System.String,System.String)">
            <summary>
            将zip文件解压到指定文件夹
            </summary>
            <param name="zipFile">压缩文件路径</param>
            <param name="targetDir">目标解压目录</param>
        </member>
        <member name="T:Bing.Utils.Helpers.Const">
            <summary>
            常量
            </summary>
        </member>
        <member name="F:Bing.Utils.Helpers.Const.ArabicNumbers">
            <summary>
            阿拉伯数字
            </summary>
        </member>
        <member name="F:Bing.Utils.Helpers.Const.ChineseNumbers">
            <summary>
            汉字数字
            </summary>
        </member>
        <member name="F:Bing.Utils.Helpers.Const.Lowercase">
            <summary>
            小写英文字母
            </summary>
        </member>
        <member name="F:Bing.Utils.Helpers.Const.Uppercase">
            <summary>
            大写英文字母
            </summary>
        </member>
        <member name="F:Bing.Utils.Helpers.Const.ChinesePinYin">
            <summary>
            汉字及拼音首字母
            </summary>
        </member>
        <member name="F:Bing.Utils.Helpers.Const.SimplifiedChinese">
            <summary>
            常用简体汉字
            </summary>
        </member>
        <member name="P:Bing.Utils.Helpers.Const.FileExtensionDict">
            <summary>
            文件扩展类型字典
            </summary>
        </member>
        <member name="F:Bing.Utils.Helpers.Const.SpellLetter">
            <summary>
            拼音字母数组
            </summary>
        </member>
        <member name="F:Bing.Utils.Helpers.Const.SpellCode">
            <summary>
            拼音区编码数组
            </summary>
        </member>
        <member name="F:Bing.Utils.Helpers.Const.TimeFormatIso8601">
            <summary>
            时间格式化：ISO8601标准时间
            </summary>
        </member>
        <member name="T:Bing.Utils.Helpers.Conv">
            <summary>
            类型转换操作
            </summary>
        </member>
        <member name="M:Bing.Utils.Helpers.Conv.ToByte(System.Object)">
            <summary>
            转换为8位整型
            </summary>
            <param name="input">输入值</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Conv.ToByte(System.Object,System.Byte)">
            <summary>
            转换为8位整型
            </summary>
            <param name="input">输入值</param>
            <param name="defaultValue">默认值</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Conv.ToByteOrNull(System.Object)">
            <summary>
            转换为8位可空整型
            </summary>
            <param name="input">输入值</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Conv.ToChar(System.Object)">
            <summary>
            转换为字符
            </summary>
            <param name="input">输入值</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Conv.ToChar(System.Object,System.Char)">
            <summary>
            转换为字符
            </summary>
            <param name="input">输入值</param>
            <param name="defaultValue">默认值</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Conv.ToCharOrNull(System.Object)">
            <summary>
            转换为可空字符
            </summary>
            <param name="input">输入值</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Conv.ToShort(System.Object)">
            <summary>
            转换为16位整型
            </summary>
            <param name="input">输入值</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Conv.ToShort(System.Object,System.Int16)">
            <summary>
            转换为16位整型
            </summary>
            <param name="input">输入值</param>
            <param name="defaultValue">默认值</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Conv.ToShortOrNull(System.Object)">
            <summary>
            转换为16位可空整型
            </summary>
            <param name="input">输入值</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Conv.ToInt(System.Object)">
            <summary>
            转换为32位整型
            </summary>
            <param name="input">输入值</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Conv.ToInt(System.Object,System.Int32)">
            <summary>
            转换为32位整型
            </summary>
            <param name="input">输入值</param>
            <param name="defaultValue">默认值</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Conv.ToIntOrNull(System.Object)">
            <summary>
            转换为32位可空整型
            </summary>
            <param name="input">输入值</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Conv.ToLong(System.Object)">
            <summary>
            转换为64位整型
            </summary>
            <param name="input">输入值</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Conv.ToLong(System.Object,System.Int64)">
            <summary>
            转换为64位整型
            </summary>
            <param name="input">输入值</param>
            <param name="defaultValue">默认值</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Conv.ToLongOrNull(System.Object)">
            <summary>
            转换为64位可空整型
            </summary>
            <param name="input">输入值</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Conv.ToFloat(System.Object,System.Nullable{System.Int32})">
            <summary>
            转换为32位浮点型，并按指定小数位舍入
            </summary>
            <param name="input">输入值</param>
            <param name="digits">小数位数</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Conv.ToFloat(System.Object,System.Single,System.Nullable{System.Int32})">
            <summary>
            转换为32位浮点型，并按指定小数位舍入
            </summary>
            <param name="input">输入值</param>
            <param name="defaultValue">默认值</param>
            <param name="digits">小数位数</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Conv.ToFloatOrNull(System.Object,System.Nullable{System.Int32})">
            <summary>
            转换为32位可空浮点型，并按指定小数位舍入
            </summary>
            <param name="input">输入值</param>
            <param name="digits">小数位数</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Conv.ToDouble(System.Object,System.Nullable{System.Int32})">
            <summary>
            转换为64位浮点型，并按指定小数位舍入，温馨提示：4舍6入5成双
            </summary>
            <param name="input">输入值</param>
            <param name="digits">小数位数</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Conv.ToDouble(System.Object,System.Double,System.Nullable{System.Int32})">
            <summary>
            转换为64位浮点型，并按指定小数位舍入，温馨提示：4舍6入5成双
            </summary>
            <param name="input">输入值</param>
            <param name="defaultValue">默认值</param>
            <param name="digits">小数位数</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Conv.ToDoubleOrNull(System.Object,System.Nullable{System.Int32})">
            <summary>
            转换为64位可空浮点型，并按指定小数位舍入，温馨提示：4舍6入5成双
            </summary>
            <param name="input">输入值</param>
            <param name="digits">小数位数</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Conv.ToDecimal(System.Object,System.Nullable{System.Int32})">
            <summary>
            转换为128位浮点型，并按指定小数位舍入，温馨提示：4舍6入5成双
            </summary>
            <param name="input">输入值</param>
            <param name="digits">小数位数</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Conv.ToDecimal(System.Object,System.Decimal,System.Nullable{System.Int32})">
            <summary>
            转换为128位浮点型，并按指定小数位舍入，温馨提示：4舍6入5成双
            </summary>
            <param name="input">输入值</param>
            <param name="defaultValue">默认值</param>
            <param name="digits">小数位数</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Conv.ToDecimalOrNull(System.Object,System.Nullable{System.Int32})">
            <summary>
            转换为128位可空浮点型，并按指定小数位舍入，温馨提示：4舍6入5成双
            </summary>
            <param name="input">输入值</param>
            <param name="digits">小数位数</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Conv.ToBool(System.Object)">
            <summary>
            转换为布尔值
            </summary>
            <param name="input">输入值</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Conv.ToBool(System.Object,System.Boolean)">
            <summary>
            转换为布尔值
            </summary>
            <param name="input">输入值</param>
            <param name="defaultValue">默认值</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Conv.ToBoolOrNull(System.Object)">
            <summary>
            转换为可空布尔值
            </summary>
            <param name="input">输入值</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Conv.GetBool(System.Object)">
            <summary>
            获取布尔值
            </summary>
            <param name="input">输入值</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Conv.ToDate(System.Object,System.DateTime)">
            <summary>
            转换为日期
            </summary>
            <param name="input">输入值</param>
            <param name="defaultValue">默认值</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Conv.ToDateOrNull(System.Object,System.Nullable{System.DateTime})">
            <summary>
            转换为可空日期
            </summary>
            <param name="input">输入值</param>
            <param name="defaultValue">默认值</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Conv.ToGuid(System.Object)">
            <summary>
            转换为Guid
            </summary>
            <param name="input">输入值</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Conv.ToGuidOrNull(System.Object)">
            <summary>
            转换为可空Guid
            </summary>
            <param name="input">输入值</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Conv.ToGuidList(System.String)">
            <summary>
            转换为Guid集合
            </summary>
            <param name="input">输入值，以逗号分隔的Guid集合字符串，范例：83B0233C-A24F-49FD-8083-1337209EBC9A,EAB523C6-2FE7-47BE-89D5-C6D440C3033A</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Conv.ToList``1(System.String)">
            <summary>
            泛型集合转换
            </summary>
            <typeparam name="T">目标元素类型</typeparam>
            <param name="input">输入值，以逗号分隔的元素集合字符串，范例：83B0233C-A24F-49FD-8083-1337209EBC9A,EAB523C6-2FE7-47BE-89D5-C6D440C3033A</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Conv.ToEnum``1(System.Object)">
            <summary>
            转换为枚举
            </summary>
            <typeparam name="T">枚举类型</typeparam>
            <param name="input">输入值</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Conv.ToEnum``1(System.Object,``0)">
            <summary>
            转换为枚举
            </summary>
            <typeparam name="T">枚举类型</typeparam>
            <param name="input">输入值</param>
            <param name="defaultValue">默认值</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Conv.ToEnumOrNull``1(System.Object)">
            <summary>
            转换为可空枚举
            </summary>
            <typeparam name="T">枚举类型</typeparam>
            <param name="input">输入值</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Conv.To``1(System.Object)">
            <summary>
            通用泛型转换
            </summary>
            <typeparam name="T">目标类型</typeparam>
            <param name="input">输入值</param>
        </member>
        <member name="T:Bing.Utils.Helpers.Encrypt">
            <summary>
            加密操作
            说明：
            1、AES加密整理自支付宝SDK
            2、RSA加密采用 https://github.com/stulzq/DotnetCore.RSA/blob/master/DotnetCore.RSA/RSAHelper.cs
            </summary>
        </member>
        <member name="M:Bing.Utils.Helpers.Encrypt.Md5By16(System.String)">
            <summary>
            Md5加密，返回16位结果
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Encrypt.Md5By16(System.String,System.Text.Encoding)">
            <summary>
            Md5加密，返回16位结果
            </summary>
            <param name="value">值</param>
            <param name="encoding">字符编码</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Encrypt.Md5By32(System.String)">
            <summary>
            Md5加密，返回32位结果
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Encrypt.Md5By32(System.String,System.Text.Encoding)">
            <summary>
            Md5加密，返回32位结果
            </summary>
            <param name="value">值</param>
            <param name="encoding">字符编码</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Encrypt.Md5(System.String,System.Text.Encoding,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Md5加密
            </summary>
            <param name="value">值</param>
            <param name="encoding">字符编码</param>
            <param name="startIndex">开始索引</param>
            <param name="length">长度</param>
            <returns></returns>
        </member>
        <member name="F:Bing.Utils.Helpers.Encrypt.DesKey">
            <summary>
            DES密钥，24位字符串
            </summary>
        </member>
        <member name="M:Bing.Utils.Helpers.Encrypt.DesEncrypt(System.Object)">
            <summary>
            DES加密
            </summary>
            <param name="value">待加密的值</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Encrypt.DesEncrypt(System.Object,System.String)">
            <summary>
            DES加密
            </summary>
            <param name="value">待加密的值</param>
            <param name="key">密钥，24位</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Encrypt.DesEncrypt(System.Object,System.String,System.Text.Encoding)">
            <summary>
            DES加密
            </summary>
            <param name="value">待加密的值</param>
            <param name="key">密钥，24位</param>
            <param name="encoding">字符编码</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Encrypt.ValidateDes(System.String,System.String)">
            <summary>
            验证Des加密参数
            </summary>
            <param name="text">待加密的文本</param>
            <param name="key">密钥，24位</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Encrypt.CreateDesProvider(System.String)">
            <summary>
            创建Des加密服务提供程序
            </summary>
            <param name="key">密钥，24位</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Encrypt.GetEncryptResult(System.String,System.Text.Encoding,System.Security.Cryptography.ICryptoTransform)">
            <summary>
            获取加密结果
            </summary>
            <param name="value">待加密的值</param>
            <param name="encoding">字符编码</param>
            <param name="transform">加密器</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Encrypt.DesDecrypt(System.Object)">
            <summary>
            DES解密
            </summary>
            <param name="value">待解密的值</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Encrypt.DesDecrypt(System.Object,System.String)">
            <summary>
            DES解密
            </summary>
            <param name="value">待解密的值</param>
            <param name="key">密钥，24位</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Encrypt.DesDecrypt(System.Object,System.String,System.Text.Encoding)">
            <summary>
            DES解密
            </summary>
            <param name="value">待解密的值</param>
            <param name="key">密钥，24位</param>
            <param name="encoding">字符编码</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Encrypt.GetDecryptResult(System.String,System.Text.Encoding,System.Security.Cryptography.ICryptoTransform)">
            <summary>
            获取解密结果
            </summary>
            <param name="value">待解密的值</param>
            <param name="encoding">字符编码</param>
            <param name="transform">加密器</param>
            <returns></returns>
        </member>
        <member name="F:Bing.Utils.Helpers.Encrypt._iv">
            <summary>
            128位0向量
            </summary>
        </member>
        <member name="P:Bing.Utils.Helpers.Encrypt.Iv">
            <summary>
            128位0向量
            </summary>
        </member>
        <member name="F:Bing.Utils.Helpers.Encrypt.AesKey">
            <summary>
            AES密钥
            </summary>
        </member>
        <member name="M:Bing.Utils.Helpers.Encrypt.AesEncrypt(System.String)">
            <summary>
            AES加密
            </summary>
            <param name="value">待加密的值</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Encrypt.AesEncrypt(System.String,System.String)">
            <summary>
            AES加密
            </summary>
            <param name="value">待加密的值</param>
            <param name="key">密钥</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Encrypt.AesEncrypt(System.String,System.String,System.Text.Encoding)">
            <summary>
            AES加密
            </summary>
            <param name="value">待加密的值</param>
            <param name="key">密钥</param>
            <param name="encoding">字符编码</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Encrypt.CreateRijndaelManaged(System.String)">
            <summary>
            创建RijndaelManaged
            </summary>
            <param name="key">密钥</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Encrypt.AesDecrypt(System.String)">
            <summary>
            AES解密
            </summary>
            <param name="value">待解密的值</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Encrypt.AesDecrypt(System.String,System.String)">
            <summary>
            AES解密
            </summary>
            <param name="value">待解密的值</param>
            <param name="key">密钥</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Encrypt.AesDecrypt(System.String,System.String,System.Text.Encoding)">
            <summary>
            AES解密
            </summary>
            <param name="value">待解密的值</param>
            <param name="key">密钥</param>
            <param name="encoding">字符编码</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Encrypt.RsaSign(System.String,System.String)">
            <summary>
            RSA签名，采用 SHA1 算法
            </summary>
            <param name="value">待签名的值</param>
            <param name="key">私钥</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Encrypt.RsaSign(System.String,System.String,System.Text.Encoding)">
            <summary>
            RSA签名，采用 SHA1 算法
            </summary>
            <param name="value">待签名的值</param>
            <param name="key">私钥</param>
            <param name="encoding">字符编码</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Encrypt.Rsa2Sign(System.String,System.String)">
            <summary>
            RSA签名，采用 SHA256 算法
            </summary>
            <param name="value">待签名的值</param>
            <param name="key">私钥</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Encrypt.Rsa2Sign(System.String,System.String,System.Text.Encoding)">
            <summary>
            RSA签名，采用 SHA256 算法
            </summary>
            <param name="value">待签名的值</param>
            <param name="key">私钥</param>
            <param name="encoding">字符编码</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Encrypt.RsaSign(System.String,System.String,System.Text.Encoding,Bing.Utils.Helpers.Internal.RSAType)">
            <summary>
            RSA签名
            </summary>
            <param name="value">待签名的值</param>
            <param name="key">私钥</param>
            <param name="encoding">字符编码</param>
            <param name="type">RSA算法类型</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Encrypt.RsaVerify(System.String,System.String,System.String)">
            <summary>
            RSA验签，采用 SHA1 算法
            </summary>
            <param name="value">待验签的值</param>
            <param name="publicKey">公钥</param>
            <param name="sign">签名</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Encrypt.RsaVerify(System.String,System.String,System.String,System.Text.Encoding)">
            <summary>
            RSA验签，采用 SHA1 算法
            </summary>
            <param name="value">待验签的值</param>
            <param name="publicKey">公钥</param>
            <param name="sign">签名</param>
            <param name="encoding">字符编码</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Encrypt.Rsa2Verify(System.String,System.String,System.String)">
            <summary>
            RSA验签，采用 SHA256 算法
            </summary>
            <param name="value">待验签的值</param>
            <param name="publicKey">公钥</param>
            <param name="sign">签名</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Encrypt.Rsa2Verify(System.String,System.String,System.String,System.Text.Encoding)">
            <summary>
            RSA验签，采用 SHA256 算法
            </summary>
            <param name="value">待验签的值</param>
            <param name="publicKey">公钥</param>
            <param name="sign">签名</param>
            <param name="encoding">字符编码</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Encrypt.RsaVerify(System.String,System.String,System.String,System.Text.Encoding,Bing.Utils.Helpers.Internal.RSAType)">
            <summary>
            RSA验签
            </summary>
            <param name="value">待验签的值</param>
            <param name="publicKey">公钥</param>
            <param name="sign">签名</param>
            <param name="encoding">字符编码</param>
            <param name="type">RSA算法类型</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Encrypt.HmacMd5(System.String,System.String)">
            <summary>
            HMACMD5加密
            </summary>
            <param name="value">值</param>
            <param name="key">密钥</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Encrypt.HmacMd5(System.String,System.String,System.Text.Encoding)">
            <summary>
            HMACMD5加密
            </summary>
            <param name="value">值</param>
            <param name="key">密钥</param>
            <param name="encoding">字符编码</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Encrypt.HmacSha1(System.String,System.String)">
            <summary>
            HMACSHA1加密
            </summary>
            <param name="value">值</param>
            <param name="key">密钥</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Encrypt.HmacSha1(System.String,System.String,System.Text.Encoding)">
            <summary>
            HMACSHA1加密
            </summary>
            <param name="value">值</param>
            <param name="key">密钥</param>
            <param name="encoding">字符编码</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Encrypt.HmacSha256(System.String,System.String)">
            <summary>
            HMACSHA256加密
            </summary>
            <param name="value">值</param>
            <param name="key">密钥</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Encrypt.HmacSha256(System.String,System.String,System.Text.Encoding)">
            <summary>
            HMACSHA256加密
            </summary>
            <param name="value">值</param>
            <param name="key">密钥</param>
            <param name="encoding">字符编码</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Encrypt.HmacSha384(System.String,System.String)">
            <summary>
            HMACSHA384加密
            </summary>
            <param name="value">值</param>
            <param name="key">密钥</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Encrypt.HmacSha384(System.String,System.String,System.Text.Encoding)">
            <summary>
            HMACSHA384加密
            </summary>
            <param name="value">值</param>
            <param name="key">密钥</param>
            <param name="encoding">字符编码</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Encrypt.HmacSha512(System.String,System.String)">
            <summary>
            HMACSHA512加密
            </summary>
            <param name="value">值</param>
            <param name="key">密钥</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Encrypt.HmacSha512(System.String,System.String,System.Text.Encoding)">
            <summary>
            HMACSHA512加密
            </summary>
            <param name="value">值</param>
            <param name="key">密钥</param>
            <param name="encoding">字符编码</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Encrypt.Sha1(System.String)">
            <summary>
            SHA1加密
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Encrypt.Sha1(System.String,System.Text.Encoding)">
            <summary>
            SHA1加密
            </summary>
            <param name="value">值</param>
            <param name="encoding">字符编码</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Encrypt.Sha256(System.String)">
            <summary>
            SHA256加密
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Encrypt.Sha256(System.String,System.Text.Encoding)">
            <summary>
            SHA256加密
            </summary>
            <param name="value">值</param>
            <param name="encoding">字符编码</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Encrypt.Sha384(System.String)">
            <summary>
            SHA384加密
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Encrypt.Sha384(System.String,System.Text.Encoding)">
            <summary>
            SHA384加密
            </summary>
            <param name="value">值</param>
            <param name="encoding">字符编码</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Encrypt.Sha512(System.String)">
            <summary>
            SHA512加密
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Encrypt.Sha512(System.String,System.Text.Encoding)">
            <summary>
            SHA512加密
            </summary>
            <param name="value">值</param>
            <param name="encoding">字符编码</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Encrypt.Base64Encrypt(System.String)">
            <summary>
            Base64加密
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Encrypt.Base64Encrypt(System.String,System.Text.Encoding)">
            <summary>
            Base64加密
            </summary>
            <param name="value">值</param>
            <param name="encoding">字符编码</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Encrypt.Base64Decrypt(System.String)">
            <summary>
            Base64解密
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Encrypt.Base64Decrypt(System.String,System.Text.Encoding)">
            <summary>
            Base64解密
            </summary>
            <param name="value">值</param>
            <param name="encoding">字符编码</param>
            <returns></returns>
        </member>
        <member name="T:Bing.Utils.Helpers.Enum">
            <summary>
            枚举 操作
            </summary>
        </member>
        <member name="F:Bing.Utils.Helpers.Enum.EnumValueField">
            <summary>
            枚举值字段
            </summary>
        </member>
        <member name="M:Bing.Utils.Helpers.Enum.Parse``1(System.Object)">
            <summary>
            获取实例
            </summary>
            <typeparam name="TEnum">枚举类型</typeparam>
            <param name="member">成员名或值，范例：Enum1枚举有成员A=0，则传入"A"或"0"获取 Enum1.A</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Enum.ParseByDescription``1(System.String)">
            <summary>
            通过描述获取实例
            </summary>
            <typeparam name="TEnum">枚举类型</typeparam>
            <param name="desc">描述</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Enum.GetName``1(System.Object)">
            <summary>
            获取成员名
            </summary>
            <typeparam name="TEnum">枚举类型</typeparam>
            <param name="member">成员名、值、实例均可，范例：Enum1枚举有成员A=0，则传入Enum1.A或0，获取成员名"A"</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Enum.GetName(System.Type,System.Object)">
            <summary>
            获取成员名
            </summary>
            <param name="type">枚举类型</param>
            <param name="member">成员名、值、实例均可，范例：Enum1枚举有成员A=0，则传入Enum1.A或0，获取成员名"A"</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Enum.GetNames``1">
            <summary>
            获取枚举所有成员名称
            </summary>
            <typeparam name="TEnum">枚举类型</typeparam>
        </member>
        <member name="M:Bing.Utils.Helpers.Enum.GetNames(System.Type)">
            <summary>
            获取枚举所有成员名称
            </summary>
            <param name="type">枚举类型</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Enum.GetValue``1(System.Object)">
            <summary>
            获取成员值
            </summary>
            <typeparam name="TEnum">枚举类型</typeparam>
            <param name="member">成员名、值、实例均可，范例:Enum1枚举有成员A=0,可传入"A"、0、Enum1.A，获取值0</param>
            <exception cref="T:System.ArgumentNullException">成员为空</exception>
        </member>
        <member name="M:Bing.Utils.Helpers.Enum.GetValue(System.Type,System.Object)">
            <summary>
            获取成员值
            </summary>
            <param name="type">枚举类型</param>
            <param name="member">成员名、值、实例均可，范例:Enum1枚举有成员A=0,可传入"A"、0、Enum1.A，获取值0</param>
            <exception cref="T:System.ArgumentNullException">成员为空</exception>
        </member>
        <member name="M:Bing.Utils.Helpers.Enum.GetDescription``1(System.Object)">
            <summary>
            获取描述，使用<see cref="T:System.ComponentModel.DescriptionAttribute"/>特性设置描述
            </summary>
            <typeparam name="TEnum">枚举类型</typeparam>
            <param name="member">成员名、值、实例均可,范例:Enum1枚举有成员A=0,可传入"A"、0、Enum1.A，获取值0</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Enum.GetDescription(System.Type,System.Object)">
            <summary>
            获取描述，使用<see cref="T:System.ComponentModel.DescriptionAttribute"/>特性设置描述
            </summary>
            <param name="type">枚举类型</param>
            <param name="member">成员名、值、实例均可,范例:Enum1枚举有成员A=0,可传入"A"、0、Enum1.A，获取值0</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Enum.GetItems``1">
            <summary>
            获取描述项集合，文本设置为Description，值为Value
            </summary>
            <typeparam name="TEnum">枚举类型</typeparam>
        </member>
        <member name="M:Bing.Utils.Helpers.Enum.GetItems(System.Type)">
            <summary>
            获取描述项集合，文本设置为Description，值为Value
            </summary>
            <param name="type">枚举类型</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Enum.ValidateEnum(System.Type)">
            <summary>
            验证是否枚举类型
            </summary>
            <param name="enumType">类型</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Enum.AddItem(System.Type,System.Collections.Generic.ICollection{Bing.Utils.Item},System.Reflection.FieldInfo)">
            <summary>
            添加描述项
            </summary>
            <param name="type">枚举类型</param>
            <param name="result">集合</param>
            <param name="field">字段</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Enum.GetDictionary``1">
            <summary>
            获取枚举字典
            </summary>
            <typeparam name="TEnum">枚举类型</typeparam>
        </member>
        <member name="M:Bing.Utils.Helpers.Enum.AddItem``1(System.Collections.Generic.IDictionary{System.Int32,System.String},System.Reflection.FieldInfo)">
            <summary>
            添加描述项
            </summary>
            <typeparam name="TEnum">枚举类型</typeparam>
            <param name="result">集合</param>
            <param name="field">字典</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Enum.GetMemberInfos``1">
            <summary>
            获取枚举成员信息
            </summary>
            <typeparam name="TEnum">枚举类型</typeparam>
        </member>
        <member name="T:Bing.Utils.Helpers.Error">
            <summary>
            错误操作
            </summary>
        </member>
        <member name="T:Bing.Utils.Helpers.Format">
            <summary>
            格式化操作
            </summary>
        </member>
        <member name="M:Bing.Utils.Helpers.Format.EncryptPhoneOfChina(System.String)">
            <summary>
            加密手机号码
            </summary>
            <param name="phone">手机号码</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Format.EncryptPlateNumberOfChina(System.String)">
            <summary>
            加密车牌号
            </summary>
            <param name="plateNumber">车牌号</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Format.EncryptVinCode(System.String)">
            <summary>
            加密汽车VIN
            </summary>
            <param name="vinCode">汽车VIN</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Format.FormatMoney(System.Decimal,System.Boolean)">
            <summary>
            格式化金额
            </summary>
            <param name="money">金额</param>
            <param name="isEncrypt">是否加密。默认：false</param>
        </member>
        <member name="T:Bing.Utils.Helpers.GZip">
            <summary>
            GZip压缩操作
            </summary>
        </member>
        <member name="M:Bing.Utils.Helpers.GZip.Compress(System.String)">
            <summary>
            压缩
            </summary>
            <param name="content">内容</param>
        </member>
        <member name="M:Bing.Utils.Helpers.GZip.CompressAsync(System.String)">
            <summary>
            压缩
            </summary>
            <param name="content">内容</param>
        </member>
        <member name="M:Bing.Utils.Helpers.GZip.Compress(System.String,System.Text.Encoding)">
            <summary>
            压缩
            </summary>
            <param name="content">内容</param>
            <param name="encoding">字符编码</param>
        </member>
        <member name="M:Bing.Utils.Helpers.GZip.CompressAsync(System.String,System.Text.Encoding)">
            <summary>
            压缩
            </summary>
            <param name="content">内容</param>
            <param name="encoding">字符编码</param>
        </member>
        <member name="M:Bing.Utils.Helpers.GZip.Compress(System.Byte[])">
            <summary>
            压缩
            </summary>
            <param name="buffer">字节流</param>
        </member>
        <member name="M:Bing.Utils.Helpers.GZip.CompressAsync(System.Byte[])">
            <summary>
            压缩
            </summary>
            <param name="buffer">字节流</param>
        </member>
        <member name="M:Bing.Utils.Helpers.GZip.Compress(System.IO.Stream)">
            <summary>
            压缩
            </summary>
            <param name="stream">流</param>
        </member>
        <member name="M:Bing.Utils.Helpers.GZip.CompressAsync(System.IO.Stream)">
            <summary>
            压缩
            </summary>
            <param name="stream">流</param>
        </member>
        <member name="M:Bing.Utils.Helpers.GZip.StreamToBytes(System.IO.Stream)">
            <summary>
            流转换为字节流
            </summary>
            <param name="stream">流</param>
        </member>
        <member name="M:Bing.Utils.Helpers.GZip.StreamToBytesAsync(System.IO.Stream)">
            <summary>
            流转换为字节流
            </summary>
            <param name="stream">流</param>
        </member>
        <member name="M:Bing.Utils.Helpers.GZip.Decompress(System.String)">
            <summary>
            解压缩
            </summary>
            <param name="content">内容</param>
        </member>
        <member name="M:Bing.Utils.Helpers.GZip.DecompressAsync(System.String)">
            <summary>
            解压缩
            </summary>
            <param name="content">内容</param>
        </member>
        <member name="M:Bing.Utils.Helpers.GZip.Decompress(System.Byte[])">
            <summary>
            解压缩
            </summary>
            <param name="buffer">字节流</param>
        </member>
        <member name="M:Bing.Utils.Helpers.GZip.Decompress(System.IO.Stream)">
            <summary>
            解压缩
            </summary>
            <param name="stream">流</param>
        </member>
        <member name="M:Bing.Utils.Helpers.GZip.Decompress(System.IO.Stream,System.Text.Encoding)">
            <summary>
            解压缩
            </summary>
            <param name="stream">流</param>
            <param name="encoding">字符编码</param>
        </member>
        <member name="T:Bing.Utils.Helpers.Id">
            <summary>
            Id 生成器
            </summary>
        </member>
        <member name="F:Bing.Utils.Helpers.Id._id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:Bing.Utils.Helpers.Id.GuidGenerator">
            <summary>
            Guid 生成器
            </summary>
        </member>
        <member name="P:Bing.Utils.Helpers.Id.LongGenerator">
            <summary>
            Long 生成器
            </summary>
        </member>
        <member name="P:Bing.Utils.Helpers.Id.StringGenerator">
            <summary>
            String 生成器
            </summary>
        </member>
        <member name="M:Bing.Utils.Helpers.Id.SetId(System.String)">
            <summary>
            设置Id
            </summary>
            <param name="id">Id</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Id.Reset">
            <summary>
            重置Id
            </summary>
        </member>
        <member name="M:Bing.Utils.Helpers.Id.Guid">
            <summary>
            用Guid创建标识，去掉分隔符
            </summary>
        </member>
        <member name="M:Bing.Utils.Helpers.Id.NewGuid">
            <summary>
            创建 Guid ID
            </summary>
        </member>
        <member name="M:Bing.Utils.Helpers.Id.NewLong">
            <summary>
            创建 Long ID
            </summary>
        </member>
        <member name="M:Bing.Utils.Helpers.Id.NewString">
            <summary>
            创建 String ID
            </summary>
        </member>
        <member name="T:Bing.Utils.Helpers.Internal.RsaHelper">
            <summary>
            RSA加解密 使用OpenSSL的公钥加密/私钥解密
            
            公私钥请使用openssl生成  ssh-keygen -t rsa 命令生成的公钥私钥是不行的
            
            作者：李志强
            时间：2017年10月30日15:50:14
            QQ:501232752
            </summary>
        </member>
        <member name="M:Bing.Utils.Helpers.Internal.RsaHelper.#ctor(Bing.Utils.Helpers.Internal.RSAType,System.Text.Encoding,System.String,System.String)">
            <summary>
            实例化RSAHelper
            </summary>
            <param name="rsaType">加密算法类型 RSA SHA1;RSA2 SHA256 密钥长度至少为2048</param>
            <param name="encoding">编码类型</param>
            <param name="privateKey">私钥</param>
            <param name="publicKey">公钥</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Internal.RsaHelper.Sign(System.String)">
            <summary>
            使用私钥签名
            </summary>
            <param name="data">原始数据</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Internal.RsaHelper.Verify(System.String,System.String)">
            <summary>
            使用公钥验证签名
            </summary>
            <param name="data">原始数据</param>
            <param name="sign">签名</param>
            <returns></returns>
        </member>
        <member name="T:Bing.Utils.Helpers.Internal.RSAType">
            <summary>
            RSA算法类型
            </summary>
        </member>
        <member name="F:Bing.Utils.Helpers.Internal.RSAType.RSA">
            <summary>
            SHA1
            </summary>
        </member>
        <member name="F:Bing.Utils.Helpers.Internal.RSAType.RSA2">
            <summary>
            RSA2 密钥长度至少为2048
            SHA256
            </summary>
        </member>
        <member name="T:Bing.Utils.Helpers.Lambda">
            <summary>
            Lambda表达式操作
            </summary>
        </member>
        <member name="M:Bing.Utils.Helpers.Lambda.GetType(System.Linq.Expressions.Expression)">
            <summary>
            获取类型
            </summary>
            <param name="expression">表达式，范例：t => t.Name</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Lambda.GetMember(System.Linq.Expressions.Expression)">
            <summary>
            获取成员
            </summary>
            <param name="expression">表达式，范例：t => t.Name</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Lambda.GetMemberExpression(System.Linq.Expressions.Expression,System.Boolean)">
            <summary>
            获取成员表达式
            </summary>
            <param name="expression">表达式</param>
            <param name="right">取表达式右侧，(l,r)=> l.LId == r.RId，设置为true，返回 RID</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Lambda.GetMethodCallExpressionName(System.Linq.Expressions.Expression)">
            <summary>
            获取方法调用表达式的成员名称
            </summary>
            <param name="expression">表达式</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Lambda.GetName(System.Linq.Expressions.Expression)">
            <summary>
            获取成员名称，范例：t => t.A.Name，返回 A.Name
            </summary>
            <param name="expression">表达式，范例：t => t.Name</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Lambda.GetMemberName(System.Linq.Expressions.MemberExpression)">
            <summary>
            获取成员名称
            </summary>
            <param name="memberExpression">表达式</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Lambda.GetNames``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object[]}})">
            <summary>
            获取名称列表，范例：t => new object[] {t.A.B,t.C}，返回 A.B,C
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="expression">属性集合表达式，范例：t => new object[]{t.A,t.B}</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Lambda.AddName(System.Collections.Generic.List{System.String},System.Linq.Expressions.Expression)">
            <summary>
            添加名称
            </summary>
            <param name="result">名称列表</param>
            <param name="expression">表达式</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Lambda.GetLastName(System.Linq.Expressions.Expression,System.Boolean)">
            <summary>
            获取最后以及成员名称，范例：t => t.Name，返回 Name
            </summary>
            <param name="expression">表达式，范例：t => t.Name</param>
            <param name="right">取表达式右侧，(l,r)=> l.LId == r.RId，设置为true，返回 RID</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Lambda.IsValueExpression(System.Linq.Expressions.Expression)">
            <summary>
            是否值表达式
            </summary>
            <param name="expression">表达式</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Lambda.GetLastNames``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object[]}})">
            <summary>
            获取最后一级成员名称列表，范例：t => new object[] {t.A.B,t.C}，返回 B,C
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="expression">属性集合表达式，范例：t => new object[] {t.A,t.B}</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Lambda.GetValue(System.Linq.Expressions.Expression)">
            <summary>
            获取值，范例：t => t.Name == "A"，返回 A
            </summary>
            <param name="expression">表达式，范例：t => t.Name == "A"</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Lambda.HasParameter(System.Linq.Expressions.Expression)">
            <summary>
            是否包含参数，用于检测是属性，而不是值
            </summary>
            <param name="expression">表达式</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Lambda.GetMethodCallExpressionValue(System.Linq.Expressions.Expression)">
            <summary>
            获取方法调用表达式的值
            </summary>
            <param name="expression">表达式</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Lambda.GetMemberValue(System.Linq.Expressions.MemberExpression)">
            <summary>
            获取属性表达式的值
            </summary>
            <param name="expression">表达式</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Lambda.GetConstantExpressionValue(System.Linq.Expressions.Expression)">
            <summary>
            获取常量表达式的值
            </summary>
            <param name="expression">表达式</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Lambda.GetOperator(System.Linq.Expressions.Expression)">
            <summary>
            获取查询操作符，范例：t => t.Name == "A"，返回 Operator.Equal
            </summary>
            <param name="expression">表达式，范例：t => t.Name == "A"</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Lambda.GetMethodCallExpressionOperator(System.Linq.Expressions.Expression)">
            <summary>
            获取方法调用表达式的值
            </summary>
            <param name="expression">表达式</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Lambda.GetParameter(System.Linq.Expressions.Expression)">
            <summary>
            获取参数，范例：t.Name，返回 t
            </summary>
            <param name="expression">表达式，范例：t.Name</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Lambda.GetGroupPredicates(System.Linq.Expressions.Expression)">
            <summary>
            获取分组的谓词表达式，通过Or进行分组
            </summary>
            <param name="expression">谓词表达式</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Lambda.CreateGroup(System.Collections.Generic.List{System.Collections.Generic.List{System.Linq.Expressions.Expression}})">
            <summary>
            创建分组
            </summary>
            <param name="result">表达式结果</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Lambda.AddPredicates(System.Linq.Expressions.Expression,System.Collections.Generic.List{System.Collections.Generic.List{System.Linq.Expressions.Expression}},System.Collections.Generic.List{System.Linq.Expressions.Expression})">
            <summary>
            添加通过Or分割的谓词表达式
            </summary>
            <param name="expression">谓词表达式</param>
            <param name="result">表达式结果</param>
            <param name="group">分组表达式</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Lambda.GetConditionCount(System.Linq.Expressions.LambdaExpression)">
            <summary>
            获取查询条件个数
            </summary>
            <param name="expression">谓词表达式，范例1：t => t.Name == "A"，结果1。范例2：t => t.Name == "A" &amp;&amp; t.Age == 1，结果2。</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Lambda.GetAttribute``1(System.Linq.Expressions.Expression)">
            <summary>
            获取特性
            </summary>
            <typeparam name="TAttribute">特性类型</typeparam>
            <param name="expression">属性表达式</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Lambda.GetAttribute``3(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            获取特性
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TProperty">属性类型</typeparam>
            <typeparam name="TAttribute">特性类型</typeparam>
            <param name="propertyExpression">属性表达式</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Lambda.GetAttribute``2(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            获取特性
            </summary>
            <typeparam name="TProperty">属性类型</typeparam>
            <typeparam name="TAttribute">特性类型</typeparam>
            <param name="propertyExpression">属性表达式</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Lambda.GetAttributes``3(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            获取特性列表
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TProperty">属性类型</typeparam>
            <typeparam name="TAttribute">特性类型</typeparam>
            <param name="propertyExpression">属性表达式</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Lambda.Constant(System.Object,System.Linq.Expressions.Expression)">
            <summary>
            获取常量表达式
            </summary>
            <param name="value">值</param>
            <param name="expression">表达式</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Lambda.CreateParameter``1">
            <summary>
            创建参数表达式
            </summary>
            <typeparam name="T">参数类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Lambda.Equal``1(System.String,System.Object)">
            <summary>
            创建等于运算Lambda表达式
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Lambda.NotEqual``1(System.String,System.Object)">
            <summary>
            创建不等于运算Lambda表达式
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Lambda.Greater``1(System.String,System.Object)">
            <summary>
            创建大于运算Lambda表达式
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Lambda.GreaterEqual``1(System.String,System.Object)">
            <summary>
            创建大于等于运算Lambda表达式
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Lambda.Less``1(System.String,System.Object)">
            <summary>
            创建小于运算Lambda表达式
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Lambda.LessEqual``1(System.String,System.Object)">
            <summary>
            创建小于等于运算Lambda表达式
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Lambda.Starts``1(System.String,System.Object)">
            <summary>
            调用StartsWith方法
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Lambda.Ends``1(System.String,System.Object)">
            <summary>
            调用EndsWith方法
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Lambda.Contains``1(System.String,System.Object)">
            <summary>
            调用Contains方法
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Lambda.ParsePredicate``1(System.String,System.Object,Bing.Utils.Operator)">
            <summary>
            解析为谓词表达式
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
            <param name="operator">运算符</param>
            <returns></returns>
        </member>
        <member name="T:Bing.Utils.Helpers.Reflection">
            <summary>
            反射 操作
            </summary>
        </member>
        <member name="M:Bing.Utils.Helpers.Reflection.GetDescription``1">
            <summary>
            获取类型描述，使用<see cref="T:System.ComponentModel.DescriptionAttribute"/>设置描述
            </summary>
            <typeparam name="T">类型</typeparam>
        </member>
        <member name="M:Bing.Utils.Helpers.Reflection.GetDescription``1(System.String)">
            <summary>
            获取类型成员描述，使用<see cref="T:System.ComponentModel.DescriptionAttribute"/>设置描述
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="memberName">成员名称</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Reflection.GetDescription(System.Type,System.String)">
            <summary>
            获取类型成员描述，使用<see cref="T:System.ComponentModel.DescriptionAttribute"/>设置描述
            </summary>
            <param name="type">类型</param>
            <param name="memberName">成员名称</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Reflection.GetDescription(System.Reflection.MemberInfo)">
            <summary>
            获取类型成员描述，使用<see cref="T:System.ComponentModel.DescriptionAttribute"/>设置描述
            </summary>
            <param name="member">成员</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Reflection.GetDisplayName``1">
            <summary>
            获取类型显示名称，使用<see cref="T:System.ComponentModel.DisplayNameAttribute"/>设置显示名称
            </summary>
            <typeparam name="T">类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Reflection.GetDisplayName(System.Reflection.MemberInfo)">
            <summary>
            获取类型成员显示名称，，使用<see cref="T:System.ComponentModel.DisplayNameAttribute"/>或<see cref="T:System.ComponentModel.DataAnnotations.DisplayAttribute"/>设置显示名称
            </summary>
            <param name="member">成员</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Reflection.GetDisplayNameOrDescription``1">
            <summary>
            获取类型显示名称或描述，使用<see cref="T:System.ComponentModel.DescriptionAttribute"/>设置描述，使用<see cref="T:System.ComponentModel.DisplayNameAttribute"/>设置显示名称
            </summary>
            <typeparam name="T">类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Reflection.GetDisplayNameOrDescription(System.Reflection.MemberInfo)">
            <summary>
            获取类型显示名称或成员描述，使用<see cref="T:System.ComponentModel.DescriptionAttribute"/>设置描述，使用<see cref="T:System.ComponentModel.DisplayNameAttribute"/>或<see cref="T:System.ComponentModel.DataAnnotations.DisplayAttribute"/>设置显示名称
            </summary>
            <param name="member">成员</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Reflection.FindTypes``1(System.Reflection.Assembly[])">
            <summary>
            查找类型列表
            </summary>
            <typeparam name="TFind">查找类型</typeparam>
            <param name="assemblies">待查找的程序集列表</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Reflection.FindTypes(System.Type,System.Reflection.Assembly[])">
            <summary>
            查找类型列表
            </summary>
            <param name="findType">查找类型</param>
            <param name="assemblies">待查找的程序集列表</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Reflection.GetTypes(System.Type,System.Reflection.Assembly)">
            <summary>
            获取类型列表
            </summary>
            <param name="findType">查找类型</param>
            <param name="assembly">待查找的程序集</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Reflection.AddType(System.Collections.Generic.List{System.Type},System.Type,System.Type)">
            <summary>
            添加类型
            </summary>
            <param name="result">类型列表</param>
            <param name="findType">查找类型</param>
            <param name="type">类型</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Reflection.MatchGeneric(System.Type,System.Type)">
            <summary>
            泛型匹配
            </summary>
            <param name="findType">查找类型</param>
            <param name="type">类型</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Reflection.GetInstancesByInterface``1(System.Reflection.Assembly)">
            <summary>
            获取实现了接口的所有实例
            </summary>
            <typeparam name="TInterface">接口类型</typeparam>
            <param name="assembly">在该程序集中查找</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Reflection.CreateInstance``1(System.Type,System.Object[])">
            <summary>
            动态创建实例
            </summary>
            <typeparam name="T">目标类型</typeparam>
            <param name="type">类型</param>
            <param name="parameters">传递给构造函数的参数</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Reflection.CreateInstance``1(System.String,System.Object[])">
            <summary>
            动态创建实例
            </summary>
            <typeparam name="T">目标类型</typeparam>
            <param name="className">类名，包括命名空间,如果类型不处于当前执行程序集中，需要包含程序集名，范例：Test.Core.Test2,Test.Core</param>
            <param name="parameters">传递给构造函数的参数</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Reflection.GetAssembly(System.String)">
            <summary>
            获取程序集
            </summary>
            <param name="assemblyName">程序集名称</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Reflection.GetAssemblies(System.String)">
            <summary>
            从目录获取所有程序集
            </summary>
            <param name="directoryPath">目录绝对路径</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Reflection.GetCurrentAssemblyName">
            <summary>
            获取当前程序集名称
            </summary>
        </member>
        <member name="M:Bing.Utils.Helpers.Reflection.GetAttribute``1(System.Reflection.MemberInfo)">
            <summary>
            获取特性信息
            </summary>
            <typeparam name="TAttribute">泛型特性</typeparam>
            <param name="memberInfo">元数据</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Reflection.GetAttributes``1(System.Reflection.MemberInfo)">
            <summary>
            获取特性信息数组
            </summary>
            <typeparam name="TAttribute">泛型特性</typeparam>
            <param name="memberInfo">元数据</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Reflection.GetPropertyInfo(System.Type,System.String)">
            <summary>
            获取属性信息
            </summary>
            <param name="type">类型</param>
            <param name="propertyName">属性名</param>
            <returns>存在时返回PropertyInfo，不存在时返回null</returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Reflection.IsBool(System.Reflection.MemberInfo)">
            <summary>
            是否布尔类型
            </summary>
            <param name="member">成员</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Reflection.IsBool(System.Reflection.PropertyInfo)">
            <summary>
            是否布尔类型
            </summary>
            <param name="property">属性</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Reflection.IsEnum(System.Reflection.MemberInfo)">
            <summary>
            是否枚举类型
            </summary>
            <param name="member">成员</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Reflection.IsEnum(System.Reflection.PropertyInfo)">
            <summary>
            是否枚举类型
            </summary>
            <param name="property">属性</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Reflection.IsDate(System.Reflection.MemberInfo)">
            <summary>
            是否日期类型
            </summary>
            <param name="member">成员</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Reflection.IsDate(System.Reflection.PropertyInfo)">
            <summary>
            是否日期类型
            </summary>
            <param name="property">属性</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Reflection.IsInt(System.Reflection.MemberInfo)">
            <summary>
            是否整型
            </summary>
            <param name="member">成员</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Reflection.IsInt(System.Reflection.PropertyInfo)">
            <summary>
            是否整型
            </summary>
            <param name="property">成员</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Reflection.IsNumber(System.Reflection.MemberInfo)">
            <summary>
            是否数值类型
            </summary>
            <param name="member">成员</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Reflection.IsNumber(System.Reflection.PropertyInfo)">
            <summary>
            是否数值类型
            </summary>
            <param name="property">属性</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Reflection.IsCollection(System.Type)">
            <summary>
            是否集合
            </summary>
            <param name="type">类型</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Reflection.IsGenericCollection(System.Type)">
            <summary>
            是否泛型集合
            </summary>
            <param name="type">类型</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Reflection.GetPublicProperties(System.Object)">
            <summary>
            获取公共属性列表
            </summary>
            <param name="instance">实例</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Reflection.GetTopBaseType``1">
            <summary>
            获取顶级基类
            </summary>
            <typeparam name="T">类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Reflection.GetTopBaseType(System.Type)">
            <summary>
            获取顶级基类
            </summary>
            <param name="type">类型</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Reflection.IsDeriveClassFrom``1(System.Type,System.Boolean)">
            <summary>
            判断当前类型是否可由指定类型派生
            </summary>
            <typeparam name="TBaseType">基类型</typeparam>
            <param name="type">当前类型</param>
            <param name="canAbstract">能否是抽象类</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Reflection.IsDeriveClassFrom(System.Type,System.Type,System.Boolean)">
            <summary>
            判断当前类型是否可由指定类型派生
            </summary>
            <param name="type">当前类型</param>
            <param name="baseType">基类型</param>
            <param name="canAbstract">能否是抽象类</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Reflection.IsBaseOn``1(System.Type)">
            <summary>
            返回当前类型是否是指定基类的派生类
            </summary>
            <typeparam name="TBaseType">基类型</typeparam>
            <param name="type">类型</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Reflection.IsBaseOn(System.Type,System.Type)">
            <summary>
            返回当前类型是否是指定基类的派生类
            </summary>
            <param name="type">类型</param>
            <param name="baseType">基类类型</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Reflection.IsGenericAssignableFrom(System.Type,System.Type)">
            <summary>
            判断当前泛型类型是否可由指定类型的实例填充
            </summary>
            <param name="genericType">泛型类型</param>
            <param name="type">指定类型</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Reflection.GetElementType(System.Type)">
            <summary>
            获取元素类型。如果是集合，返回集合的元素类型
            </summary>
            <param name="type">类型</param>
        </member>
        <member name="T:Bing.Utils.Helpers.Regexs">
            <summary>
            正则表达式 操作
            </summary>
        </member>
        <member name="M:Bing.Utils.Helpers.Regexs.GetValues(System.String,System.String,System.String[],System.Text.RegularExpressions.RegexOptions)">
            <summary>
            获取匹配值集合
            </summary>
            <param name="input">输入字符串</param>
            <param name="pattern">模式字符串</param>
            <param name="resultPatterns">结果模式字符串数组，范例：new[]{"$1","$2"}</param>
            <param name="options">选项</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Regexs.AddResults(System.Collections.Generic.Dictionary{System.String,System.String},System.Text.RegularExpressions.Match,System.String[])">
            <summary>
            添加匹配结果
            </summary>
            <param name="result">匹配值字典</param>
            <param name="match">匹配结果</param>
            <param name="resultPatterns">结果模式字符串数组，范例：new[]{"$1","$2"}</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Regexs.GetValue(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            获取匹配值
            </summary>
            <param name="input">输入字符串</param>
            <param name="pattern">模式字符串</param>
            <param name="resultPattern">结果模式字符串，范例："$1"用来获取第一个()内的值</param>
            <param name="options">选项</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Regexs.Split(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            分割成字符串数组
            </summary>
            <param name="input">输入字符串</param>
            <param name="pattern">模式字符串</param>
            <param name="options">选项</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Regexs.Replace(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            替换
            </summary>
            <param name="input">输入字符串</param>
            <param name="pattern">模式字符串</param>
            <param name="replacement">替换字符串</param>
            <param name="options">选项</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Regexs.IsMatch(System.String,System.String)">
            <summary>
            验证输入与模式是否匹配
            </summary>
            <param name="input">输入字符串</param>
            <param name="pattern">模式字符串</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Regexs.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            验证输入与模式是否匹配
            </summary>
            <param name="input">输入的字符串</param>
            <param name="pattern">模式字符串</param>
            <param name="options">选项</param>
        </member>
        <member name="T:Bing.Utils.Helpers.Serialize">
            <summary>
            序列化操作
            </summary>
        </member>
        <member name="M:Bing.Utils.Helpers.Serialize.ToBytes(System.Object)">
            <summary>
            将对象序列化为byte[]。此方法不需要源类型标记可<see cref="T:System.SerializableAttribute"/>
            </summary>
            <param name="data">数据</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Serialize.FromBytes``1(System.Byte[])">
            <summary>
            将byte[]反序列化为对象。此方法不需要源类型标记可<see cref="T:System.SerializableAttribute"/>
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="bytes">二进制数组</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Serialize.ToBinary(System.Object)">
            <summary>
            将数据序列化为二进制数组
            </summary>
            <param name="data">数据</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Serialize.FromBinary``1(System.Byte[])">
            <summary>
            将二进制数组反序列化为强类型数据
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="bytes">二进制数组</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Serialize.ToBinaryFile(System.String,System.Object)">
            <summary>
            将数据序列化为二进制数组并写入文件中
            </summary>
            <param name="fileName">文件路径</param>
            <param name="data">数据</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Serialize.FromBinaryFile``1(System.String)">
            <summary>
            将指定二进制数据文件还原为强类型数据
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="fileName">文件路径</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Serialize.ToXml(System.Object)">
            <summary>
            将数据序列化为Xml形式
            </summary>
            <param name="data">数据</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Serialize.FromXml``1(System.String)">
            <summary>
            将Xml序列化为强类型
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="xml">Xml字符串</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Serialize.ToXmlFile(System.String,System.Object)">
            <summary>
            将数据序列化为Xml并写入文件
            </summary>
            <param name="fileName">文件路径</param>
            <param name="data">数据</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Serialize.FromXmlFile``1(System.String)">
            <summary>
            将指定Xml数据文件还原为强类型数据
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="fileName">文件路径</param>
            <returns></returns>
        </member>
        <member name="T:Bing.Utils.Helpers.Singleton">
            <summary>
            单例操作。提供一个字典容器，按类型装载所有<see cref="T:Bing.Utils.Helpers.Singleton"/>的单例实例
            </summary>
        </member>
        <member name="P:Bing.Utils.Helpers.Singleton.AllSingletons">
            <summary>
            单例对象字典
            </summary>
        </member>
        <member name="M:Bing.Utils.Helpers.Singleton.#cctor">
            <summary>
            静态构造函数
            </summary>
        </member>
        <member name="T:Bing.Utils.Helpers.Singleton`1">
            <summary>
            单例对象操作。定义一个指定类型的单例，该实例的声明周期将跟随整个应用程序
            </summary>
            <typeparam name="T">单例类型</typeparam>
        </member>
        <member name="F:Bing.Utils.Helpers.Singleton`1._instance">
            <summary>
            实例
            </summary>
        </member>
        <member name="P:Bing.Utils.Helpers.Singleton`1.Instance">
            <summary>
            获取指定类型的单例实例
            </summary>
        </member>
        <member name="T:Bing.Utils.Helpers.Str">
            <summary>
            字符串操作 - 字符串生成器
            </summary>
            <summary>
            字符串操作 - 工具
            </summary>
        </member>
        <member name="P:Bing.Utils.Helpers.Str.Builder">
            <summary>
            字符串生成器
            </summary>
        </member>
        <member name="P:Bing.Utils.Helpers.Str.Length">
            <summary>
            字符串长度
            </summary>
        </member>
        <member name="M:Bing.Utils.Helpers.Str.#ctor">
            <summary>
            初始化一个<see cref="T:Bing.Utils.Helpers.Str"/>类型的实例
            </summary>
        </member>
        <member name="M:Bing.Utils.Helpers.Str.Append``1(``0)">
            <summary>
            追加内容
            </summary>
            <typeparam name="T">值类型</typeparam>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Str.Append(System.String,System.Object[])">
            <summary>
            追加内容
            </summary>
            <param name="value">值</param>
            <param name="args">参数</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Str.AppendLine">
            <summary>
            追加内容并换行
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Str.AppendLine``1(``0)">
            <summary>
            追加内容并换行
            </summary>
            <typeparam name="T">值类型</typeparam>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Str.AppendLine(System.String,System.Object[])">
            <summary>
            追加内容并换行
            </summary>
            <param name="value">值</param>
            <param name="args">参数</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Str.Replace(System.String)">
            <summary>
            替换内容
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Str.RemoveEnd(System.String)">
            <summary>
            移除末尾字符串
            </summary>
            <param name="end">末尾字符串</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Str.Clear">
            <summary>
            清空字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Str.ToString">
            <summary>
            转换为字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Str.Join``1(System.Collections.Generic.IEnumerable{``0},System.String,System.String)">
            <summary>
            将集合连接为带分隔符的字符串
            </summary>
            <typeparam name="T">集合元素类型</typeparam>
            <param name="list">集合</param>
            <param name="quotes">引号，默认不带引号，范例：单引号"'"</param>
            <param name="separator">分隔符，默认使用逗号分隔</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Str.ToUnicode(System.String)">
            <summary>
            字符串转Unicode
            </summary>
            <param name="value">值</param>
            <returns>Unicode编码后的字符串</returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Str.ToUnicodeByCn(System.String)">
            <summary>
            中文字符串转Unicode
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Str.UnicodeToStr(System.String)">
            <summary>
            Unicode转字符串
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Str.PinYin(System.String)">
            <summary>
            获取汉字的拼音简码，即首字母缩写。范例：中国，返回zg
            </summary>
            <param name="chineseText">汉字文本。范例： 中国</param>
            <returns>首字母缩写</returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Str.ResolvePinYin(System.Char)">
            <summary>
            解析单个汉字的拼音简码
            </summary>
            <param name="text">汉字</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Str.ResolveByCode(System.UInt16)">
            <summary>
            使用字符编码方式获取拼音简码
            </summary>
            <param name="unicode">字符编码</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Str.ResolveByConst(System.String)">
            <summary>
            通过拼音简码常量获取
            </summary>
            <param name="text">文本</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Str.FullPinYin(System.String)">
            <summary>
            将汉字转换成拼音(全拼)
            </summary>
            <param name="text">汉字字符串</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Str.FirstLower(System.String)">
            <summary>
            首字母小写
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Str.FirstUpper(System.String)">
            <summary>
            首字母大写
            </summary>
            <param name="value">值</param>
        </member>
        <member name="P:Bing.Utils.Helpers.Str.Empty">
            <summary>
            空字符串
            </summary>
        </member>
        <member name="M:Bing.Utils.Helpers.Str.Distinct(System.String)">
            <summary>
            去除重复字符串
            </summary>
            <param name="value">值，范例1："5555"，返回"5"，范例2："4545"，返回"45"</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Str.Truncate(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            截断字符串
            </summary>
            <param name="text">文本</param>
            <param name="length">返回长度</param>
            <param name="endChatCount">添加结束符号的个数，默认0，不添加</param>
            <param name="endChar">结束符号，默认为省略号</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Str.GetEndString(System.Int32,System.String)">
            <summary>
            获取结束字符串
            </summary>
            <param name="endCharCount">添加结束符号的个数</param>
            <param name="endChar">结束符号</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Str.GetLastProperty(System.String)">
            <summary>
            获取最后一个属性
            </summary>
            <param name="propertyName">属性名，范例，A.B.C,返回"C"</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Str.GetHideMobile(System.String)">
            <summary>
            获取隐藏中间几位后的手机号码
            </summary>
            <param name="value">手机号码</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Str.GetStringLength(System.String)">
            <summary>
            获取字符串的字节数
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Str.ToSnakeCase(System.String)">
            <summary>
            将字符串转换为蛇形策略
            </summary>
            <param name="str">字符串</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Str.ToCamelCase(System.String)">
            <summary>
            将字符串转换为骆驼策略
            </summary>
            <param name="str">字符串</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Str.GenerateNonceStr">
            <summary>
            生成随机字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Str.SplitWordGroup(System.String,System.Char)">
            <summary>
            分隔词组
            </summary>
            <param name="value">值</param>
            <param name="separator">分隔符。默认使用"-"分隔</param>
        </member>
        <member name="T:Bing.Utils.Helpers.StringCase">
            <summary>
            字符串策略
            </summary>
        </member>
        <member name="F:Bing.Utils.Helpers.StringCase.Snake">
            <summary>
            蛇形策略
            </summary>
        </member>
        <member name="F:Bing.Utils.Helpers.StringCase.Camel">
            <summary>
            骆驼策略
            </summary>
        </member>
        <member name="F:Bing.Utils.Helpers.StringCase.None">
            <summary>
            不执行策略
            </summary>
        </member>
        <member name="T:Bing.Utils.Helpers.SnakeCaseState">
            <summary>
            蛇形策略状态
            </summary>
        </member>
        <member name="F:Bing.Utils.Helpers.SnakeCaseState.Start">
            <summary>
            开头
            </summary>
        </member>
        <member name="F:Bing.Utils.Helpers.SnakeCaseState.Lower">
            <summary>
            小写
            </summary>
        </member>
        <member name="F:Bing.Utils.Helpers.SnakeCaseState.Upper">
            <summary>
            大写
            </summary>
        </member>
        <member name="F:Bing.Utils.Helpers.SnakeCaseState.NewWord">
            <summary>
            单词
            </summary>
        </member>
        <member name="T:Bing.Utils.Helpers.Sys">
            <summary>
            系统操作
            </summary>
        </member>
        <member name="P:Bing.Utils.Helpers.Sys.IsLinux">
            <summary>
            是否Linux操作系统
            </summary>
        </member>
        <member name="P:Bing.Utils.Helpers.Sys.IsWindows">
            <summary>
            是否Windows操作系统
            </summary>
        </member>
        <member name="P:Bing.Utils.Helpers.Sys.IsOsx">
            <summary>
            是否苹果操作系统
            </summary>
        </member>
        <member name="P:Bing.Utils.Helpers.Sys.System">
            <summary>
            当前操作系统
            </summary>
        </member>
        <member name="T:Bing.Utils.Helpers.Thread">
            <summary>
            线程操作
            </summary>
        </member>
        <member name="M:Bing.Utils.Helpers.Thread.WaitAll(System.Action[])">
            <summary>
            执行多个操作，多个操作将同时执行
            </summary>
            <param name="actions">操作集合</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Thread.ParallelExecute(System.Action[])">
            <summary>
            并发执行多个操作
            </summary>
            <param name="actions">操作集合</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Thread.ParallelExecute(System.Action,System.Int32,System.Threading.Tasks.ParallelOptions)">
            <summary>
            重复的并发执行操作
            </summary>
            <param name="action">操作</param>
            <param name="count">执行次数</param>
            <param name="options">并发执行配置</param>
        </member>
        <member name="P:Bing.Utils.Helpers.Thread.ThreadId">
            <summary>
            获取线程编号
            </summary>
        </member>
        <member name="P:Bing.Utils.Helpers.Thread.CurrentPrincipal">
            <summary>
            获取或设置 线程的当前负责人
            </summary>
        </member>
        <member name="P:Bing.Utils.Helpers.Thread.MaxThreadNumberInThreadPool">
            <summary>
            获取线程池中最大线程
            </summary>
        </member>
        <member name="M:Bing.Utils.Helpers.Thread.Sleep(System.Int32)">
            <summary>
            将当前线程挂起指定的时间
            </summary>
            <param name="time">挂起时间，单位：毫秒</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Thread.StartTask(System.Action)">
            <summary>
            启动异步任务
            </summary>
            <param name="handler">任务，范例：() => { 代码 }</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Thread.StartTask(System.Action{System.Object},System.Object)">
            <summary>
            启动异步任务
            </summary>
            <param name="handler">任务，范例：t => { 代码 }</param>
            <param name="state">传递的参数</param>
        </member>
        <member name="T:Bing.Utils.Helpers.Time">
            <summary>
            时间操作
            </summary>
        </member>
        <member name="F:Bing.Utils.Helpers.Time._dateTime">
            <summary>
            日期
            </summary>
        </member>
        <member name="M:Bing.Utils.Helpers.Time.SetTime(System.Nullable{System.DateTime})">
            <summary>
            设置时间
            </summary>
            <param name="dateTime">时间</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Time.SetTime(System.String)">
            <summary>
            设置时间
            </summary>
            <param name="dateTime">时间</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Time.Reset">
            <summary>
            重置时间
            </summary>
        </member>
        <member name="M:Bing.Utils.Helpers.Time.GetDateTime">
            <summary>
            获取当前日期时间
            </summary>
        </member>
        <member name="M:Bing.Utils.Helpers.Time.GetDate">
            <summary>
            获取当前日期，不带时间
            </summary>
        </member>
        <member name="M:Bing.Utils.Helpers.Time.GetUnixTimestamp">
            <summary>
            获取Unix时间戳
            </summary>
        </member>
        <member name="M:Bing.Utils.Helpers.Time.GetUnixTimestamp(System.DateTime)">
            <summary>
            获取Unix时间戳
            </summary>
            <param name="time">时间</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Time.GetTimeFromUnixTimestamp(System.Int64)">
            <summary>
            从Unix时间戳获取时间
            </summary>
            <param name="timestamp">Unix时间戳</param>
        </member>
        <member name="T:Bing.Utils.Helpers.UnixTime">
            <summary>
            Unix时间操作
            </summary>
        </member>
        <member name="F:Bing.Utils.Helpers.UnixTime.EpochTime">
            <summary>
            Unix纪元时间
            </summary>
        </member>
        <member name="M:Bing.Utils.Helpers.UnixTime.ToTimestamp(System.Boolean)">
            <summary>
            转换为Unix时间戳
            </summary>
            <param name="isContainMillisecond">是否包含毫秒</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.UnixTime.ToTimestamp(System.DateTime,System.Boolean)">
            <summary>
            转换为Unix时间戳
            </summary>
            <param name="dateTime">时间</param>
            <param name="isContainMillisecond">是否包含毫秒</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.UnixTime.ToDateTime(System.Int64)">
            <summary>
            转换为DateTime对象
            </summary>
            <param name="timestamp">时间戳</param>
            <returns></returns>
        </member>
        <member name="T:Bing.Utils.Helpers.Url">
            <summary>
            Url操作
            </summary>
        </member>
        <member name="M:Bing.Utils.Helpers.Url.Combine(System.String[])">
            <summary>
            合并Url
            </summary>
            <param name="urls">url片段，范例：Url.Combine( "http://a.com","b" ),返回 "http://a.com/b"</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Url.Join(System.String,System.String)">
            <summary>
            连接Url，范例：Url.Join( "http://a.com","b=1" ),返回 "http://a.com?b=1"
            </summary>
            <param name="url">Url，范例：http://a.com</param>
            <param name="param">参数，范例：b=1</param>
            <returns></returns>
        </member>
        <!-- 对于成员“M:Bing.Utils.Helpers.Url.Join(System.String,System.String[])”忽略有格式错误的 XML 注释 -->
        <member name="M:Bing.Utils.Helpers.Url.GetUrl(System.String)">
            <summary>
            获取Url
            </summary>
            <param name="url">Url，范例：http://a.com</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Url.Join(System.Uri,System.String)">
            <summary>
            连接Url，范例：Url.Join( "http://a.com","b=1" ),返回 "http://a.com?b=1"
            </summary>
            <param name="url">Url，范例：http://a.com</param>
            <param name="param">参数，范例：b=1</param>
            <returns></returns>
        </member>
        <!-- 对于成员“M:Bing.Utils.Helpers.Url.Join(System.Uri,System.String[])”忽略有格式错误的 XML 注释 -->
        <member name="M:Bing.Utils.Helpers.Url.GetMainDomain(System.String)">
            <summary>
            获取主域名
            </summary>
            <param name="url">Url地址</param>
            <returns></returns>
        </member>
        <member name="T:Bing.Utils.Helpers.Valid">
            <summary>
            验证 操作
            </summary>
        </member>
        <member name="M:Bing.Utils.Helpers.Valid.IsEmail(System.String,System.Boolean)">
            <summary>
            是否邮箱
            </summary>
            <param name="value">邮箱地址</param>
            <param name="isRestrict">是否按严格模式验证</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Valid.HasEmail(System.String,System.Boolean)">
            <summary>
            是否存在邮箱
            </summary>
            <param name="value">值</param>
            <param name="isRestrict">是否按严格模式验证</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Valid.IsPhoneNumber(System.String)">
            <summary>
            是否合法的手机号码
            </summary>
            <param name="value">手机号码</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Valid.IsMobileNumberSimple(System.String,System.Boolean)">
            <summary>
            是否手机号码
            </summary>
            <param name="value">手机号码</param>
            <param name="isRestrict">是否按严格模式验证</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Valid.IsMobileNumber(System.String)">
            <summary>
            是否手机号码
            </summary>
            <param name="value">手机号码</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Valid.HasMobileNumberSimple(System.String,System.Boolean)">
            <summary>
            是否存在手机号码
            </summary>
            <param name="value">值</param>
            <param name="isRestrict">是否按严格模式验证</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Valid.IsChinaMobilePhone(System.String)">
            <summary>
            是否中国移动号码
            </summary>
            <param name="value">手机号码</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Valid.IsChinaUnicomPhone(System.String)">
            <summary>
            是否中国联通号码
            </summary>
            <param name="value">手机号码</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Valid.IsChinaTelecomPhone(System.String)">
            <summary>
            是否中国电信号码
            </summary>
            <param name="value">手机号码</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Valid.IsTel(System.String)">
            <summary>
            是否中国电话，格式：010-85849685
            </summary>
            <param name="value">电话</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Valid.IsIdCard(System.String)">
            <summary>
            是否身份证号码
            </summary>
            <param name="value">身份证</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Valid.IsBase64String(System.String)">
            <summary>
            是否Base64编码
            </summary>
            <param name="value">Base64字符串</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Valid.IsGuid(System.String)">
            <summary>
            是否Guid
            </summary>
            <param name="guid">Guid字符串</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Valid.IsUrl(System.String)">
            <summary>
            是否Url地址（统一资源定位）
            </summary>
            <param name="value">url地址</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Valid.IsUri(System.String)">
            <summary>
            是否Uri（统一资源标识）
            </summary>
            <param name="value">uri</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Valid.IsMainDomainUrl(System.String)">
            <summary>
            是否主域名或者www开头的域名
            </summary>
            <param name="value">url地址</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Valid.IsMainDomain(System.String)">
            <summary>
            是否主域名
            </summary>
            <param name="value">域名字符串</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Valid.IsDomain(System.String)">
            <summary>
            是否域名
            </summary>
            <param name="value">域名字符串</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Valid.IsMac(System.String)">
            <summary>
            是否Mac地址
            </summary>
            <param name="value">Mac地址</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Valid.IsPositiveInteger(System.String)">
            <summary>
            是否大于0的正整数
            </summary>
            <param name="value">正整数</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Valid.IsInt32(System.String)">
            <summary>
            是否Int32类型
            </summary>
            <param name="value">整数</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Valid.IsDouble(System.String)">
            <summary>
            是否Double类型
            </summary>
            <param name="value">小数</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Valid.IsDouble(System.String,System.Double,System.Double,System.Int32)">
            <summary>
            是否Double类型
            </summary>
            <param name="value">小数</param>
            <param name="minValue">最小值</param>
            <param name="maxValue">最大值</param>
            <param name="digit">小数位数，如果是0则不检测</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Valid.IsPasswordOne(System.String)">
            <summary>
            是否密码One的格式，6-25位包含特殊字符
            </summary>
            <param name="value">密码</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Valid.IsPasswordOne(System.String,System.Int32,System.Int32)">
            <summary>
            是否密码One的格式，指定密码长度，包含特殊字符
            </summary>
            <param name="value">密码</param>
            <param name="min">最小长度</param>
            <param name="max">最大长度</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Valid.IsPasswordTwo(System.String)">
            <summary>
            是否密码Two的格式，6-25位包含特殊字符
            </summary>
            <param name="value">密码</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Valid.IsLoginName(System.String)">
            <summary>
            是否登录账号，6-30位长度
            </summary>
            <param name="value">登录账号</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Valid.IsLoginName(System.String,System.Int32,System.Int32)">
            <summary>
            是否登录账号
            </summary>
            <param name="value">登录账号</param>
            <param name="min">最小长度</param>
            <param name="max">最大长度</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Valid.IsBandCard(System.String)">
            <summary>
            是否银行卡号，16位或19位银行卡（简单校验）
            </summary>
            <param name="value">银行卡号</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Valid.IsSafeSqlString(System.String)">
            <summary>
            是否安全Sql语句
            </summary>
            <param name="value">sql语句</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Valid.IsVersion(System.String,System.Int32)">
            <summary>
            是否有效版本号，范例：1.3,1.1.5,1.25.256
            </summary>
            <param name="value">版本号</param>
            <param name="length">长度</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Valid.IsChineseWord(System.String)">
            <summary>
            是否中文字符
            </summary>
            <param name="value">中文字符</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Valid.IsChinese(System.String)">
            <summary>
            是否中文
            </summary>
            <param name="value">中文</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Valid.IsContainsChinese(System.String)">
            <summary>
            是否包含中文
            </summary>
            <param name="value">中文</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Valid.IsContainsNumber(System.String)">
            <summary>
            是否包含数字
            </summary>
            <param name="value">数字</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Valid.IsIpAddress(System.String)">
            <summary>
            是否IP地址
            </summary>
            <param name="value">ip地址</param>
            <returns>结果</returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Valid.IsInteger(System.String)">
            <summary>
            是否整数
            </summary>
            <param name="value">值</param>
            <returns>结果</returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Valid.IsUnicode(System.String)">
            <summary>
            是否Unicode字符串
            </summary>
            <param name="value">unicode字符串</param>
            <returns>结果</returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Valid.IsLengthStr(System.String,System.Int32,System.Int32)">
            <summary>
            字符串长度是否在指定范围内，一个中文为2个字符
            </summary>
            <param name="value">字符串</param>
            <param name="begin">开始</param>
            <param name="end">结束</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Valid.IsChinesePostalCode(System.String)">
            <summary>
            是否中国邮政编码，6位数字
            </summary>
            <param name="value">邮政编码</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Valid.IsNormalChar(System.String)">
            <summary>
            是否正常字符，字母、数字、下划线的组合
            </summary>
            <param name="value">字符串</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Valid.IsPostfix(System.String,System.String[])">
            <summary>
            是否指定后缀
            </summary>
            <param name="value">字符串</param>
            <param name="postfixs">后缀名数组</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Valid.IsDecimal(System.String)">
            <summary>
            是否数字型
            </summary>
            <param name="value">数字</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Valid.IsRepeat(System.String)">
            <summary>
            是否重复，范例：112,返回true
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Valid.IsQQ(System.String)">
            <summary>
            是否合法QQ号码
            </summary>
            <param name="value">QQ号码</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Valid.IsColorValue(System.String)">
            <summary>
            是否颜色值。检查颜色值是否为3/6位的合法颜色值。例如：FFF、FFFFFF
            </summary>
            <param name="value">颜色值</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Valid.IsWideWord(System.String)">
            <summary>
            是否全角字符，包含汉字在内
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Valid.IsNarrowWord(System.String)">
            <summary>
            是否半角字符，包含汉字在内
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Valid.IsOnlyNumber(System.String)">
            <summary>
            是否数字。0-9的数字，不包含符号"."和"-"
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Valid.IsUpperCaseChar(System.String)">
            <summary>
            是否大写英文字母组成的字符串
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Valid.IsUpperCaseChar(System.Char)">
            <summary>
            是否大写英文字母
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Valid.IsLowerCaseChar(System.String)">
            <summary>
            是否小写英文字母组成的字符串
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Valid.IsLowerCaseChar(System.Char)">
            <summary>
            是否小写英文字母
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Valid.IsNumber(System.String)">
            <summary>
            是否数字
            </summary>
            <param name="input">输入值</param>        
        </member>
        <member name="M:Bing.Utils.Helpers.Valid.IsTime(System.String)">
            <summary>
            是否时间格式
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Valid.IsDate(System.String,System.Boolean)">
            <summary>
            是否日期
            </summary>
            <param name="value">日期字符串</param>
            <param name="isRegex">是否正则验证</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Valid.IsDate(System.String,System.String)">
            <summary>
            是否日期
            </summary>
            <param name="value">日期字符串</param>
            <param name="format">格式化字符串</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Valid.IsDate(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)">
            <summary>
            是否日期
            </summary>
            <param name="value">日期字符串</param>
            <param name="format">格式化字符串</param>
            <param name="provider">格式化提供者</param>
            <param name="styles">日期格式</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Valid.IsDateTimeMin(System.String,System.DateTime)">
            <summary>
            是否大于最小时间
            </summary>
            <param name="value">时间</param>
            <param name="min">最小时间</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Valid.IsDateTimeMax(System.String,System.DateTime)">
            <summary>
            是否小于最大时间
            </summary>
            <param name="value">时间</param>
            <param name="max">最大时间</param>
            <returns></returns>
        </member>
        <member name="T:Bing.Utils.Helpers.ValidateHelper`1">
            <summary>
            Class ValidateHelper.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:Bing.Utils.Helpers.ValidateHelper`1.dicValidations">
            <summary>
            The dic validations
            </summary>
        </member>
        <member name="F:Bing.Utils.Helpers.ValidateHelper`1.dErrors">
            <summary>
            错误列表
            </summary>
        </member>
        <member name="F:Bing.Utils.Helpers.ValidateHelper`1.isIDataErrorInfo">
            <summary>
            是否实现IDataErrorInfo接口
            </summary>
        </member>
        <member name="F:Bing.Utils.Helpers.ValidateHelper`1.validateObj">
            <summary>
            需要验证对象的实例
            </summary>
        </member>
        <member name="M:Bing.Utils.Helpers.ValidateHelper`1.#ctor(`0)">
            <summary>
            构造函数
            </summary>
            <param name="obj">The object.</param>
        </member>
        <member name="M:Bing.Utils.Helpers.ValidateHelper`1.#ctor(`0,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            构造函数
            </summary>
            <param name="obj">The object.</param>
            <param name="errors">The errors.</param>
        </member>
        <member name="M:Bing.Utils.Helpers.ValidateHelper`1.Register(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Collections.Generic.List{System.ComponentModel.DataAnnotations.ValidationAttribute})">
            <summary>
            注册需要验证的属性和验证特性
            </summary>
            <param name="expr">属性</param>
            <param name="metadatas">特性</param>
            <returns>ValidateHelper{`0}.</returns>
        </member>
        <member name="M:Bing.Utils.Helpers.ValidateHelper`1.Register(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.ComponentModel.DataAnnotations.ValidationAttribute)">
            <summary>
            注册需要验证的属性和验证特性
            </summary>
            <param name="expr">属性</param>
            <param name="metadata">特性</param>
            <returns>ValidateHelper{`0}.</returns>
        </member>
        <member name="M:Bing.Utils.Helpers.ValidateHelper`1.Register(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            如果是IDataErrorInfo接口，注册错误字典
            </summary>
            <param name="dataErrors">错误字典</param>
            <returns>ValidateHelper{`0}.</returns>
        </member>
        <member name="M:Bing.Utils.Helpers.ValidateHelper`1.Register">
            <summary>
            注册，自动提取特性注册
            </summary>
            <returns>ValidateHelper{`0}.</returns>
        </member>
        <member name="M:Bing.Utils.Helpers.ValidateHelper`1.UnRegister">
            <summary>
            反注册
            </summary>
        </member>
        <member name="M:Bing.Utils.Helpers.ValidateHelper`1.Validate">
            <summary>
            Validates this instance.
            </summary>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Bing.Utils.Helpers.ValidateHelper`1.PropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            处理属性变化事件
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:Bing.Utils.Helpers.ValidateHelper`1.RegisterEvent(`0)">
            <summary>
            注册属性变更事件.
            </summary>
            <param name="obj">The object.</param>
        </member>
        <member name="M:Bing.Utils.Helpers.ValidateHelper`1.GetExprName(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            获取属性，名称.
            </summary>
            <param name="expr">The expr.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Bing.Utils.Helpers.ValidateHelper`1.GetPropertyValue(System.Object,System.String)">
            <summary>
            获取属性值.
            </summary>
            <param name="sender">The sender.</param>
            <param name="propertyName">Name of the property.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:Bing.Utils.Helpers.ValidateHelper`1.GetPropertyChangedMethod(System.Object)">
            <summary>
            获取触发事件的methodinfo.
            </summary>
            <param name="sender">The sender.</param>
            <returns>MethodInfo.</returns>
        </member>
        <member name="M:Bing.Utils.Helpers.ValidateHelper`1.GetEventMember(System.Object)">
            <summary>
            Gets the event member,silverlight下 GetValue抛出fiedlaccessexception，不能使用这类方法来处理.
            </summary>
            <param name="bindableObject">The bindable object.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="T:Bing.Utils.Helpers.Web">
            <summary>
            Web操作
            </summary>
        </member>
        <member name="P:Bing.Utils.Helpers.Web.HttpContextAccessor">
            <summary>
            Http上下文访问器
            </summary>
        </member>
        <member name="P:Bing.Utils.Helpers.Web.HttpContext">
            <summary>
            当前Http上下文
            </summary>
        </member>
        <member name="P:Bing.Utils.Helpers.Web.Environment">
            <summary>
            宿主环境
            </summary>
        </member>
        <member name="P:Bing.Utils.Helpers.Web.Request">
            <summary>
            当前Http请求
            </summary>
        </member>
        <member name="P:Bing.Utils.Helpers.Web.Response">
            <summary>
            当前Http响应
            </summary>
        </member>
        <member name="P:Bing.Utils.Helpers.Web.LocalIpAddress">
            <summary>
            本地IP
            </summary>
        </member>
        <member name="P:Bing.Utils.Helpers.Web.RequestType">
            <summary>
            请求类型
            </summary>
        </member>
        <member name="P:Bing.Utils.Helpers.Web.Form">
            <summary>
            Form表单
            </summary>
        </member>
        <member name="P:Bing.Utils.Helpers.Web.Body">
            <summary>
            请求正文
            </summary>
        </member>
        <member name="P:Bing.Utils.Helpers.Web.Url">
            <summary>
            请求地址
            </summary>
        </member>
        <member name="F:Bing.Utils.Helpers.Web._ip">
            <summary>
            IP地址
            </summary>
        </member>
        <member name="M:Bing.Utils.Helpers.Web.SetIp(System.String)">
            <summary>
            设置IP地址
            </summary>
            <param name="ip">IP地址</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Web.ResetIp">
            <summary>
            重置IP地址
            </summary>
        </member>
        <member name="P:Bing.Utils.Helpers.Web.IP">
            <summary>
            客户端IP地址
            </summary>
        </member>
        <member name="M:Bing.Utils.Helpers.Web.GetLanIP">
            <summary>
            获取局域网IP
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Web.GetLanIP(System.Net.NetworkInformation.NetworkInterfaceType)">
            <summary>
            获取局域网IP。
            参考地址：https://stackoverflow.com/questions/6803073/get-local-ip-address/28621250#28621250
            解决OSX下获取IP地址产生"Device not configured"的问题
            </summary>
            <param name="type">网络接口类型</param>
            <returns></returns>
        </member>
        <member name="P:Bing.Utils.Helpers.Web.Host">
            <summary>
            主机
            </summary>
        </member>
        <member name="M:Bing.Utils.Helpers.Web.GetClientHostName">
            <summary>
            获取Web客户端主机名
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Helpers.Web.GetRemoteAddress">
            <summary>
            获取远程地址
            </summary>
            <returns></returns>
        </member>
        <member name="P:Bing.Utils.Helpers.Web.Browser">
            <summary>
            浏览器
            </summary>
        </member>
        <member name="P:Bing.Utils.Helpers.Web.RootPath">
            <summary>
            根路径
            </summary>
        </member>
        <member name="P:Bing.Utils.Helpers.Web.WebRootPath">
            <summary>
            Web根路径，即wwwroot
            </summary>
        </member>
        <member name="P:Bing.Utils.Helpers.Web.ContentType">
            <summary>
            内容类型
            </summary>
        </member>
        <member name="P:Bing.Utils.Helpers.Web.QueryString">
            <summary>
            参数
            </summary>
        </member>
        <member name="P:Bing.Utils.Helpers.Web.IsLocal">
            <summary>
            是否本地请求
            </summary>
        </member>
        <member name="F:Bing.Utils.Helpers.Web.NullIpAddress">
            <summary>
            空IP地址
            </summary>
        </member>
        <member name="M:Bing.Utils.Helpers.Web.IsSet(System.Net.IPAddress)">
            <summary>
            是否已设置IP地址
            </summary>
            <param name="address">IP地址</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Web.#cctor">
            <summary>
            静态构造函数
            </summary>
        </member>
        <member name="M:Bing.Utils.Helpers.Web.Client">
            <summary>
            Web客户端，用于发送Http请求
            </summary>
        </member>
        <member name="M:Bing.Utils.Helpers.Web.Client``1">
            <summary>
            Web客户端，用于发送Http请求
            </summary>
            <typeparam name="TResult">返回结果类型</typeparam>
        </member>
        <member name="M:Bing.Utils.Helpers.Web.GetFiles">
            <summary>
            获取客户端文件集合
            </summary>
        </member>
        <member name="M:Bing.Utils.Helpers.Web.GetFile">
            <summary>
            获取客户端文件
            </summary>
        </member>
        <member name="M:Bing.Utils.Helpers.Web.GetParam(System.String)">
            <summary>
            获取请求参数，搜索路径：查询参数->表单参数->请求头
            </summary>
            <param name="name">参数名</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Web.UrlEncode(System.String,System.Boolean)">
            <summary>
            Url编码
            </summary>
            <param name="url">url</param>
            <param name="isUpper">编码字符是否转成大写，范例："http://"转成"http%3A%2F%2F"</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Web.UrlEncode(System.String,System.String,System.Boolean)">
            <summary>
            Url编码
            </summary>
            <param name="url">url</param>
            <param name="encoding">字符编码</param>
            <param name="isUpper">编码字符是否转成大写，范例："http://"转成"http%3A%2F%2F"</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Web.UrlEncode(System.String,System.Text.Encoding,System.Boolean)">
            <summary>
            Url编码
            </summary>
            <param name="url">url</param>
            <param name="encoding">字符编码</param>
            <param name="isUpper">编码字符是否转成大写，范例："http://"转成"http%3A%2F%2F"</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Web.GetUpperEncode(System.String)">
            <summary>
            获取大写编码字符串
            </summary>
            <param name="encode">编码字符串</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Web.UrlDecode(System.String)">
            <summary>
            Url解码
            </summary>
            <param name="url">url</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Web.UrlDecode(System.String,System.Text.Encoding)">
            <summary>
            Url解码
            </summary>
            <param name="url">url</param>
            <param name="encoding">字符编码</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Web.Redirect(System.String)">
            <summary>
            跳转到指定链接
            </summary>
            <param name="url">链接</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Web.Write(System.String)">
            <summary>
            输出内容
            </summary>
            <param name="text">内容</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Web.Write(System.IO.FileStream)">
            <summary>
            输出文件
            </summary>
            <param name="stream">文件流</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Web.GetBodyAsync">
            <summary>
            获取请求正文
            </summary>
        </member>
        <member name="M:Bing.Utils.Helpers.Web.DownloadFileAsync(System.String,System.String)">
            <summary>
            下载文件
            </summary>
            <param name="filePath">文件绝对路径</param>
            <param name="fileName">文件名。包含扩展名</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Web.DownloadFileAsync(System.String,System.String,System.Text.Encoding)">
            <summary>
            下载文件
            </summary>
            <param name="filePath">文件绝对路径</param>
            <param name="fileName">文件名。包含扩展名</param>
            <param name="encoding">字符编码</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Web.DownloadAsync(System.IO.Stream,System.String)">
            <summary>
            下载
            </summary>
            <param name="stream">流</param>
            <param name="fileName">文件名。包含扩展名</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Web.DownloadAsync(System.IO.Stream,System.String,System.Text.Encoding)">
            <summary>
            下载
            </summary>
            <param name="stream">流</param>
            <param name="fileName">文件名。包含扩展名</param>
            <param name="encoding">字符编码</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Web.DownloadAsync(System.Byte[],System.String)">
            <summary>
            下载
            </summary>
            <param name="bytes">字节流</param>
            <param name="fileName">文件名。包含扩展名</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Web.DownloadAsync(System.Byte[],System.String,System.Text.Encoding)">
            <summary>
            下载
            </summary>
            <param name="bytes">字节流</param>
            <param name="fileName">文件名。包含扩展名</param>
            <param name="encoding">字符编码</param>
        </member>
        <member name="T:Bing.Utils.Helpers.Xml">
            <summary>
            Xml操作 - 生成器
            </summary>
            <summary>
            Xml操作 - 工具
            </summary>
        </member>
        <member name="P:Bing.Utils.Helpers.Xml.Document">
            <summary>
            Xml文档
            </summary>
        </member>
        <member name="P:Bing.Utils.Helpers.Xml.Root">
            <summary>
            Xml根节点
            </summary>
        </member>
        <member name="M:Bing.Utils.Helpers.Xml.#ctor(System.String)">
            <summary>
            初始化一个<see cref="T:Bing.Utils.Helpers.Xml"/>类型的实例
            </summary>
            <param name="xml">Xml字符串</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Xml.#ctor(System.IO.Stream)">
            <summary>
            初始化一个<see cref="T:Bing.Utils.Helpers.Xml"/>类型的实例
            </summary>
            <param name="stream">流</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Xml.GetXml(System.String)">
            <summary>
            获取Xml字符串
            </summary>
            <param name="xml">Xml字符串</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Xml.AddNode(System.String,System.Object,System.Xml.XmlNode)">
            <summary>
            添加节点
            </summary>
            <param name="name">节点名称</param>
            <param name="value">值</param>
            <param name="parent">父节点</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Xml.GetParent(System.Xml.XmlNode)">
            <summary>
            获取父节点
            </summary>
            <param name="parent">父节点</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Xml.CreateNode(System.String,System.Object,System.Xml.XmlNodeType)">
            <summary>
            创建节点
            </summary>
            <param name="name">节点名称</param>
            <param name="value">值</param>
            <param name="type">节点类型</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Xml.AddCDataNode(System.Object,System.Xml.XmlNode)">
            <summary>
            添加CDATA节点
            </summary>
            <param name="value">值</param>
            <param name="parent">父节点</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Xml.AddCDataNode(System.Object,System.String)">
            <summary>
            添加CDATA节点
            </summary>
            <param name="value">值</param>
            <param name="parentName">父节点名称</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Xml.UpdateNode(System.String,System.String)">
            <summary>
            更新节点
            </summary>
            <param name="xmlPathNode">Xml路径节点</param>
            <param name="content">内容</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Xml.DeleteNode(System.String)">
            <summary>
            删除节点
            </summary>
            <param name="node">节点</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Xml.SelectNodes(System.String)">
            <summary>
            选择节点列表。匹配 XPath表达式的节点列表
            </summary>
            <param name="xpath">XPath表达式</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Xml.GetDataView(System.String)">
            <summary>
            获取指定路径的数据视图
            </summary>
            <param name="xmlPathNode">Xml路径节点</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Xml.GetAllDataView(System.String)">
            <summary>
            获取指定路径所有数据视图
            </summary>
            <param name="xmlPathNode">Xml路径节点</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Xml.ToString">
            <summary>
            输出Xml
            </summary>
        </member>
        <member name="M:Bing.Utils.Helpers.Xml.ToDocument(System.String)">
            <summary>
            将Xml字符串转换为XDocument
            </summary>
            <param name="xml">Xml字符串</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Xml.ToElements(System.String)">
            <summary>
            将Xml字符串转换为XELement列表
            </summary>
            <param name="xml">Xml字符串</param>
        </member>
        <member name="M:Bing.Utils.Helpers.Xml.Validate(System.String,System.String)">
            <summary>
            校验Xml字符串是否符合指定Xml架构文件
            </summary>
            <param name="xmlFile">Xml文件</param>
            <param name="schemaFile">架构文件</param>
        </member>
        <member name="T:Bing.Utils.TypeClass">
            <summary>
            类类型
            </summary>
        </member>
        <member name="P:Bing.Utils.TypeClass.ObjectClass">
            <summary>
            object
            </summary>
        </member>
        <member name="P:Bing.Utils.TypeClass.Int32Class">
            <summary>
            int32
            </summary>
        </member>
        <member name="P:Bing.Utils.TypeClass.Int32NullableClass">
            <summary>
            int32?
            </summary>
        </member>
        <member name="P:Bing.Utils.TypeClass.Int64Class">
            <summary>
            int64
            </summary>
        </member>
        <member name="P:Bing.Utils.TypeClass.Int64NullableClass">
            <summary>
            int64?
            </summary>
        </member>
        <member name="P:Bing.Utils.TypeClass.IntClass">
            <summary>
            int
            </summary>
        </member>
        <member name="P:Bing.Utils.TypeClass.IntNullableClass">
            <summary>
            int?
            </summary>
        </member>
        <member name="P:Bing.Utils.TypeClass.LongClass">
            <summary>
            long
            </summary>
        </member>
        <member name="P:Bing.Utils.TypeClass.LongNullableClass">
            <summary>
            long?
            </summary>
        </member>
        <member name="P:Bing.Utils.TypeClass.FloatClass">
            <summary>
            float
            </summary>
        </member>
        <member name="P:Bing.Utils.TypeClass.FloatNullableClass">
            <summary>
            float?
            </summary>
        </member>
        <member name="P:Bing.Utils.TypeClass.DoubleClass">
            <summary>
            double
            </summary>
        </member>
        <member name="P:Bing.Utils.TypeClass.DoubleNullableClass">
            <summary>
            double?
            </summary>
        </member>
        <member name="P:Bing.Utils.TypeClass.DecimalClass">
            <summary>
            decimal
            </summary>
        </member>
        <member name="P:Bing.Utils.TypeClass.DecimalNullableClass">
            <summary>
            decimal?
            </summary>
        </member>
        <member name="P:Bing.Utils.TypeClass.StringClass">
            <summary>
            string
            </summary>
        </member>
        <member name="P:Bing.Utils.TypeClass.DateTimeClass">
            <summary>
            DateTime
            </summary>
        </member>
        <member name="P:Bing.Utils.TypeClass.DateTimeNullableClass">
            <summary>
            DateTime?
            </summary>
        </member>
        <member name="P:Bing.Utils.TypeClass.TimeSpanClass">
            <summary>
            TimeSpan
            </summary>
        </member>
        <member name="P:Bing.Utils.TypeClass.TimeSpanNullableClass">
            <summary>
            TimeSpan?
            </summary>
        </member>
        <member name="T:Bing.Utils.TypeDefault">
            <summary>
            类型默认值
            </summary>
        </member>
        <member name="M:Bing.Utils.TypeDefault.Of``1">
            <summary>
            获取指定类型默认值
            </summary>
            <typeparam name="TValue">值类型</typeparam>
        </member>
        <member name="P:Bing.Utils.TypeDefault.Int">
            <summary>
            int
            </summary>
        </member>
        <member name="P:Bing.Utils.TypeDefault.Long">
            <summary>
            long
            </summary>
        </member>
        <member name="P:Bing.Utils.TypeDefault.Float">
            <summary>
            float
            </summary>
        </member>
        <member name="P:Bing.Utils.TypeDefault.Double">
            <summary>
            double
            </summary>
        </member>
        <member name="P:Bing.Utils.TypeDefault.Decimal">
            <summary>
            decimal
            </summary>
        </member>
        <member name="P:Bing.Utils.TypeDefault.Char">
            <summary>
            char
            </summary>
        </member>
        <member name="P:Bing.Utils.TypeDefault.String">
            <summary>
            string
            </summary>
        </member>
        <member name="P:Bing.Utils.TypeDefault.StringEmpty">
            <summary>
            empty
            </summary>
        </member>
        <member name="P:Bing.Utils.TypeDefault.DateTime">
            <summary>
            DateTime
            </summary>
        </member>
        <member name="P:Bing.Utils.TypeDefault.TimeSpan">
            <summary>
            TimeSpan
            </summary>
        </member>
        <member name="T:Bing.Utils.Types">
            <summary>
            类型 操作
            </summary>
            <summary>
            类型 操作 - 实例创建者
            </summary>
        </member>
        <member name="M:Bing.Utils.Types.Of``1">
            <summary>
            获取类型
            </summary>
            <typeparam name="T">对象类型</typeparam>
        </member>
        <member name="M:Bing.Utils.Types.Of(System.Object[])">
            <summary>
            获取类型数组
            </summary>
            <param name="objColl">对象数组</param>
        </member>
        <member name="M:Bing.Utils.Types.DefaultValue``1">
            <summary>
            获取默认值
            </summary>
            <typeparam name="T">对象类型</typeparam>
        </member>
        <member name="M:Bing.Utils.Types.CreateInstance``1(System.Object[])">
            <summary>
            创建实例
            </summary>
            <typeparam name="TInstance">实例类型</typeparam>
            <param name="args">参数</param>
        </member>
        <member name="M:Bing.Utils.Types.CreateInstance``1(System.String,System.Object[])">
            <summary>
            创建实例
            </summary>
            <typeparam name="TInstance">实例类型</typeparam>
            <param name="className">实例名称</param>
            <param name="args">参数</param>
        </member>
        <member name="M:Bing.Utils.Types.CreateInstance``1(System.Type,System.Object[])">
            <summary>
            创建实例
            </summary>
            <typeparam name="TInstance">实例类型</typeparam>
            <param name="type">实例类型</param>
            <param name="args">参数</param>
        </member>
        <member name="M:Bing.Utils.Types.CreateInstance(System.Type,System.Object[])">
            <summary>
            创建实例
            </summary>
            <param name="type">实例类型</param>
            <param name="args">参数</param>
        </member>
        <member name="M:Bing.Utils.Types.CreateInstanceCore``1">
            <summary>
            创建实例
            </summary>
            <typeparam name="TInstance">实例类型</typeparam>
        </member>
        <member name="M:Bing.Utils.Types.CreateInstanceCore``1(System.Object[])">
            <summary>
            创建实例
            </summary>
            <typeparam name="TInstance">实例类型</typeparam>
            <param name="args">参数</param>
        </member>
        <member name="M:Bing.Utils.Types.CreateInstanceCore(System.Type)">
            <summary>
            创建实例
            </summary>
            <param name="type">实例类型</param>
        </member>
        <member name="M:Bing.Utils.Types.CreateInstanceCore(System.Type,System.Object[])">
            <summary>
            创建实例
            </summary>
            <param name="type">实例类型</param>
            <param name="args">参数</param>
        </member>
        <member name="T:Bing.Utils.IdGenerators.Abstractions.IGuidGenerator">
            <summary>
            Guid ID 生成器
            </summary>
        </member>
        <member name="T:Bing.Utils.IdGenerators.Abstractions.ILongGenerator">
            <summary>
            Long Id 生成器
            </summary>
        </member>
        <member name="T:Bing.Utils.IdGenerators.Abstractions.IStringGenerator">
            <summary>
            String ID 生成器
            </summary>
        </member>
        <member name="T:Bing.Utils.IdGenerators.Core.ObjectIdGenerator">
            <summary>
            ObjectId 生成器
            </summary>
        </member>
        <member name="P:Bing.Utils.IdGenerators.Core.ObjectIdGenerator.Current">
            <summary>
            获取<see cref="T:Bing.Utils.IdGenerators.Core.ObjectIdGenerator"/>类型的实例
            </summary>
        </member>
        <member name="M:Bing.Utils.IdGenerators.Core.ObjectIdGenerator.Create">
            <summary>
            创建ID
            </summary>
            <returns></returns>
        </member>
        <member name="T:Bing.Utils.IdGenerators.Core.SequentialGuidGenerator">
            <summary>
            有序Guid 生成器
            代码出自：https://github.com/jhtodd/SequentialGuid/blob/master/SequentialGuid/Classes/SequentialGuid.cs
            </summary>
        </member>
        <member name="P:Bing.Utils.IdGenerators.Core.SequentialGuidGenerator.DatabaseType">
            <summary>
            数据库类型
            </summary>
        </member>
        <member name="P:Bing.Utils.IdGenerators.Core.SequentialGuidGenerator.Current">
            <summary>
            获取<see cref="T:Bing.Utils.IdGenerators.Core.SequentialGuidGenerator"/>类型的实例
            </summary>
        </member>
        <member name="F:Bing.Utils.IdGenerators.Core.SequentialGuidGenerator.Rng">
            <summary>
            随机数生成器
            </summary>
        </member>
        <member name="M:Bing.Utils.IdGenerators.Core.SequentialGuidGenerator.#ctor">
            <summary>
            初始化一个<see cref="T:Bing.Utils.IdGenerators.Core.SequentialGuidGenerator"/>类型的实例
            </summary>
        </member>
        <member name="M:Bing.Utils.IdGenerators.Core.SequentialGuidGenerator.Create">
            <summary>
            创建有序的 Guid
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.IdGenerators.Core.SequentialGuidGenerator.Create(Bing.Utils.IdGenerators.Core.SequentialGuidDatabaseType)">
            <summary>
            创建有序的 Guid
            </summary>
            <param name="databaseType">数据库类型</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.IdGenerators.Core.SequentialGuidGenerator.Create(Bing.Utils.IdGenerators.Core.SequentialGuidType)">
            <summary>
            创建有序的 Guid
            </summary>
            <param name="guidType">有序 Guid 类型</param>
            <returns></returns>
        </member>
        <member name="T:Bing.Utils.IdGenerators.Core.SequentialGuidDatabaseType">
            <summary>
            有序Guid数据库类型
            </summary>
        </member>
        <member name="F:Bing.Utils.IdGenerators.Core.SequentialGuidDatabaseType.SqlServer">
            <summary>
            SqlServer
            </summary>
        </member>
        <member name="F:Bing.Utils.IdGenerators.Core.SequentialGuidDatabaseType.Oracle">
            <summary>
            Oracle
            </summary>
        </member>
        <member name="F:Bing.Utils.IdGenerators.Core.SequentialGuidDatabaseType.MySql">
            <summary>
            MySql
            </summary>
        </member>
        <member name="F:Bing.Utils.IdGenerators.Core.SequentialGuidDatabaseType.PostgreSql">
            <summary>
            PostgreSql
            </summary>
        </member>
        <member name="T:Bing.Utils.IdGenerators.Core.SequentialGuidType">
            <summary>
            有序Guid类型
            </summary>
        </member>
        <member name="F:Bing.Utils.IdGenerators.Core.SequentialGuidType.SequentialAsString">
            <summary>
            生成的GUID 按照字符串顺序排列
            </summary>
        </member>
        <member name="F:Bing.Utils.IdGenerators.Core.SequentialGuidType.SequentialAsBinary">
            <summary>
            生成的GUID 按照二进制的顺序排列
            </summary>
        </member>
        <member name="F:Bing.Utils.IdGenerators.Core.SequentialGuidType.SequentialAtEnd">
            <summary>
            生成的GUID 像SQL Server, 按照末尾部分排列
            </summary>
        </member>
        <member name="T:Bing.Utils.IdGenerators.Core.SnowflakeIdGenerator">
            <summary>
            雪花算法ID 生成器
            </summary>
        </member>
        <member name="F:Bing.Utils.IdGenerators.Core.SnowflakeIdGenerator._id">
            <summary>
            雪花算法ID
            </summary>
        </member>
        <member name="P:Bing.Utils.IdGenerators.Core.SnowflakeIdGenerator.Current">
            <summary>
            获取<see cref="T:Bing.Utils.IdGenerators.Core.SnowflakeIdGenerator"/>类型的实例
            </summary>
        </member>
        <member name="M:Bing.Utils.IdGenerators.Core.SnowflakeIdGenerator.Create">
            <summary>
            创建ID
            </summary>
            <returns></returns>
        </member>
        <member name="T:Bing.Utils.IdGenerators.Core.TimestampIdGenerator">
            <summary>
            时间戳ID 生成器
            </summary>
        </member>
        <member name="F:Bing.Utils.IdGenerators.Core.TimestampIdGenerator._id">
            <summary>
            时间戳ID
            </summary>
        </member>
        <member name="P:Bing.Utils.IdGenerators.Core.TimestampIdGenerator.Current">
            <summary>
            获取<see cref="T:Bing.Utils.IdGenerators.Core.TimestampIdGenerator"/>类型的实例
            </summary>
        </member>
        <member name="M:Bing.Utils.IdGenerators.Core.TimestampIdGenerator.Create">
            <summary>
            创建ID
            </summary>
            <returns></returns>
        </member>
        <member name="T:Bing.Utils.IdGenerators.Ids.ObjectId">
            <summary>
            Id生成器，代码出自：https://github.com/tangxuehua/ecommon/blob/master/src/ECommon/Utilities/ObjectId.cs
            </summary>
        </member>
        <member name="M:Bing.Utils.IdGenerators.Ids.ObjectId.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the ObjectId class.
            </summary>
            <param name="bytes">The bytes.</param>
        </member>
        <member name="M:Bing.Utils.IdGenerators.Ids.ObjectId.#ctor(System.DateTime,System.Int32,System.Int16,System.Int32)">
            <summary>
            Initializes a new instance of the ObjectId class.
            </summary>
            <param name="timestamp">The timestamp (expressed as a DateTime).</param>
            <param name="machine">The machine hash.</param>
            <param name="pid">The PID.</param>
            <param name="increment">The increment.</param>
        </member>
        <member name="M:Bing.Utils.IdGenerators.Ids.ObjectId.#ctor(System.Int32,System.Int32,System.Int16,System.Int32)">
            <summary>
            Initializes a new instance of the ObjectId class.
            </summary>
            <param name="timestamp">The timestamp.</param>
            <param name="machine">The machine hash.</param>
            <param name="pid">The PID.</param>
            <param name="increment">The increment.</param>
        </member>
        <member name="M:Bing.Utils.IdGenerators.Ids.ObjectId.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ObjectId class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:Bing.Utils.IdGenerators.Ids.ObjectId.Empty">
            <summary>
            Gets an instance of ObjectId where the value is empty.
            </summary>
        </member>
        <member name="P:Bing.Utils.IdGenerators.Ids.ObjectId.Timestamp">
            <summary>
            Gets the timestamp.
            </summary>
        </member>
        <member name="P:Bing.Utils.IdGenerators.Ids.ObjectId.Machine">
            <summary>
            Gets the machine.
            </summary>
        </member>
        <member name="P:Bing.Utils.IdGenerators.Ids.ObjectId.Pid">
            <summary>
            Gets the PID.
            </summary>
        </member>
        <member name="P:Bing.Utils.IdGenerators.Ids.ObjectId.Increment">
            <summary>
            Gets the increment.
            </summary>
        </member>
        <member name="P:Bing.Utils.IdGenerators.Ids.ObjectId.CreationTime">
            <summary>
            Gets the creation time (derived from the timestamp).
            </summary>
        </member>
        <member name="M:Bing.Utils.IdGenerators.Ids.ObjectId.op_LessThan(Bing.Utils.IdGenerators.Ids.ObjectId,Bing.Utils.IdGenerators.Ids.ObjectId)">
            <summary>
            Compares two ObjectIds.
            </summary>
            <param name="lhs">The first ObjectId.</param>
            <param name="rhs">The other ObjectId</param>
            <returns>True if the first ObjectId is less than the second ObjectId.</returns>
        </member>
        <member name="M:Bing.Utils.IdGenerators.Ids.ObjectId.op_LessThanOrEqual(Bing.Utils.IdGenerators.Ids.ObjectId,Bing.Utils.IdGenerators.Ids.ObjectId)">
            <summary>
            Compares two ObjectIds.
            </summary>
            <param name="lhs">The first ObjectId.</param>
            <param name="rhs">The other ObjectId</param>
            <returns>True if the first ObjectId is less than or equal to the second ObjectId.</returns>
        </member>
        <member name="M:Bing.Utils.IdGenerators.Ids.ObjectId.op_Equality(Bing.Utils.IdGenerators.Ids.ObjectId,Bing.Utils.IdGenerators.Ids.ObjectId)">
            <summary>
            Compares two ObjectIds.
            </summary>
            <param name="lhs">The first ObjectId.</param>
            <param name="rhs">The other ObjectId.</param>
            <returns>True if the two ObjectIds are equal.</returns>
        </member>
        <member name="M:Bing.Utils.IdGenerators.Ids.ObjectId.op_Inequality(Bing.Utils.IdGenerators.Ids.ObjectId,Bing.Utils.IdGenerators.Ids.ObjectId)">
            <summary>
            Compares two ObjectIds.
            </summary>
            <param name="lhs">The first ObjectId.</param>
            <param name="rhs">The other ObjectId.</param>
            <returns>True if the two ObjectIds are not equal.</returns>
        </member>
        <member name="M:Bing.Utils.IdGenerators.Ids.ObjectId.op_GreaterThanOrEqual(Bing.Utils.IdGenerators.Ids.ObjectId,Bing.Utils.IdGenerators.Ids.ObjectId)">
            <summary>
            Compares two ObjectIds.
            </summary>
            <param name="lhs">The first ObjectId.</param>
            <param name="rhs">The other ObjectId</param>
            <returns>True if the first ObjectId is greather than or equal to the second ObjectId.</returns>
        </member>
        <member name="M:Bing.Utils.IdGenerators.Ids.ObjectId.op_GreaterThan(Bing.Utils.IdGenerators.Ids.ObjectId,Bing.Utils.IdGenerators.Ids.ObjectId)">
            <summary>
            Compares two ObjectIds.
            </summary>
            <param name="lhs">The first ObjectId.</param>
            <param name="rhs">The other ObjectId</param>
            <returns>True if the first ObjectId is greather than the second ObjectId.</returns>
        </member>
        <member name="M:Bing.Utils.IdGenerators.Ids.ObjectId.GenerateNewId">
            <summary>
            Generates a new ObjectId with a unique value.
            </summary>
            <returns>An ObjectId.</returns>
        </member>
        <member name="M:Bing.Utils.IdGenerators.Ids.ObjectId.GenerateNewId(System.DateTime)">
            <summary>
            Generates a new ObjectId with a unique value (with the timestamp component based on a given DateTime).
            </summary>
            <param name="timestamp">The timestamp component (expressed as a DateTime).</param>
            <returns>An ObjectId.</returns>
        </member>
        <member name="M:Bing.Utils.IdGenerators.Ids.ObjectId.GenerateNewId(System.Int32)">
            <summary>
            Generates a new ObjectId with a unique value (with the given timestamp).
            </summary>
            <param name="timestamp">The timestamp component.</param>
            <returns>An ObjectId.</returns>
        </member>
        <member name="M:Bing.Utils.IdGenerators.Ids.ObjectId.GenerateNewStringId">
            <summary>
            Generates a new ObjectId string with a unique value.
            </summary>
            <returns>The string value of the new generated ObjectId.</returns>
        </member>
        <member name="M:Bing.Utils.IdGenerators.Ids.ObjectId.Pack(System.Int32,System.Int32,System.Int16,System.Int32)">
            <summary>
            Packs the components of an ObjectId into a byte array.
            </summary>
            <param name="timestamp">The timestamp.</param>
            <param name="machine">The machine hash.</param>
            <param name="pid">The PID.</param>
            <param name="increment">The increment.</param>
            <returns>A byte array.</returns>
        </member>
        <member name="M:Bing.Utils.IdGenerators.Ids.ObjectId.Parse(System.String)">
            <summary>
            Parses a string and creates a new ObjectId.
            </summary>
            <param name="s">The string value.</param>
            <returns>A ObjectId.</returns>
        </member>
        <member name="M:Bing.Utils.IdGenerators.Ids.ObjectId.Unpack(System.Byte[],System.Int32@,System.Int32@,System.Int16@,System.Int32@)">
            <summary>
            Unpacks a byte array into the components of an ObjectId.
            </summary>
            <param name="bytes">A byte array.</param>
            <param name="timestamp">The timestamp.</param>
            <param name="machine">The machine hash.</param>
            <param name="pid">The PID.</param>
            <param name="increment">The increment.</param>
        </member>
        <member name="M:Bing.Utils.IdGenerators.Ids.ObjectId.GetCurrentProcessId">
            <summary>
            Gets the current process id.  This method exists because of how CAS operates on the call stack, checking
            for permissions before executing the method.  Hence, if we inlined this call, the calling method would not execute
            before throwing an exception requiring the try/catch at an even higher level that we don't necessarily control.
            </summary>
        </member>
        <member name="M:Bing.Utils.IdGenerators.Ids.ObjectId.CompareTo(Bing.Utils.IdGenerators.Ids.ObjectId)">
            <summary>
            Compares this ObjectId to another ObjectId.
            </summary>
            <param name="other">The other ObjectId.</param>
            <returns>A 32-bit signed integer that indicates whether this ObjectId is less than, equal to, or greather than the other.</returns>
        </member>
        <member name="M:Bing.Utils.IdGenerators.Ids.ObjectId.Equals(Bing.Utils.IdGenerators.Ids.ObjectId)">
            <summary>
            Compares this ObjectId to another ObjectId.
            </summary>
            <param name="rhs">The other ObjectId.</param>
            <returns>True if the two ObjectIds are equal.</returns>
        </member>
        <member name="M:Bing.Utils.IdGenerators.Ids.ObjectId.Equals(System.Object)">
            <summary>
            Compares this ObjectId to another object.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True if the other object is an ObjectId and equal to this one.</returns>
        </member>
        <member name="M:Bing.Utils.IdGenerators.Ids.ObjectId.GetHashCode">
            <summary>
            Gets the hash code.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:Bing.Utils.IdGenerators.Ids.ObjectId.ToByteArray">
            <summary>
            Converts the ObjectId to a byte array.
            </summary>
            <returns>A byte array.</returns>
        </member>
        <member name="M:Bing.Utils.IdGenerators.Ids.ObjectId.ToString">
            <summary>
            Returns a string representation of the value.
            </summary>
            <returns>A string representation of the value.</returns>
        </member>
        <member name="M:Bing.Utils.IdGenerators.Ids.ObjectId.ParseHexString(System.String)">
            <summary>
            Parses a hex string into its equivalent byte array.
            </summary>
            <param name="s">The hex string to parse.</param>
            <returns>The byte equivalent of the hex string.</returns>
        </member>
        <member name="M:Bing.Utils.IdGenerators.Ids.ObjectId.ToHexString(System.Byte[])">
            <summary>
            Converts a byte array to a hex string.
            </summary>
            <param name="bytes">The byte array.</param>
            <returns>A hex string.</returns>
        </member>
        <member name="M:Bing.Utils.IdGenerators.Ids.ObjectId.ToMillisecondsSinceEpoch(System.DateTime)">
            <summary>
            Converts a DateTime to number of milliseconds since Unix epoch.
            </summary>
            <param name="dateTime">A DateTime.</param>
            <returns>Number of seconds since Unix epoch.</returns>
        </member>
        <member name="M:Bing.Utils.IdGenerators.Ids.ObjectId.ToUniversalTime(System.DateTime)">
            <summary>
            Converts a DateTime to UTC (with special handling for MinValue and MaxValue).
            </summary>
            <param name="dateTime">A DateTime.</param>
            <returns>The DateTime in UTC.</returns>
        </member>
        <member name="T:Bing.Utils.IdGenerators.Ids.SnowflakeId">
            <summary>
            雪花算法，代码出自：https://github.com/dunitian/snowflake-net/blob/master/Snowflake.Net.Core/IdWorker.cs
            </summary>
        </member>
        <member name="F:Bing.Utils.IdGenerators.Ids.SnowflakeId.TWEPOCH">
            <summary>
            基准时间
            </summary>
        </member>
        <member name="F:Bing.Utils.IdGenerators.Ids.SnowflakeId.WORKER_ID_BITS">
            <summary>
            机器标识位数
            </summary>
        </member>
        <member name="F:Bing.Utils.IdGenerators.Ids.SnowflakeId.DATACENTER_ID_BITS">
            <summary>
            数据标志位数
            </summary>
        </member>
        <member name="F:Bing.Utils.IdGenerators.Ids.SnowflakeId.SEQUENCE_BITS">
            <summary>
            序列号标识位数
            </summary>
        </member>
        <member name="F:Bing.Utils.IdGenerators.Ids.SnowflakeId.MAX_WORKER_ID">
            <summary>
            机器ID最大值
            </summary>
        </member>
        <member name="F:Bing.Utils.IdGenerators.Ids.SnowflakeId.MAX_DATACENTER_ID">
            <summary>
            数据标志最大值
            </summary>
        </member>
        <member name="F:Bing.Utils.IdGenerators.Ids.SnowflakeId.SEQUENCE_MASK">
            <summary>
            序列号ID最大值
            </summary>
        </member>
        <member name="F:Bing.Utils.IdGenerators.Ids.SnowflakeId.WORKER_ID_SHIFT">
            <summary>
            机器ID偏左移12位
            </summary>
        </member>
        <member name="F:Bing.Utils.IdGenerators.Ids.SnowflakeId.DATACENTER_ID_SHIFT">
            <summary>
            数据ID偏左移17位
            </summary>
        </member>
        <member name="F:Bing.Utils.IdGenerators.Ids.SnowflakeId.TIMESTAMP_LEFT_SHIFT">
            <summary>
            时间毫秒左移22位
            </summary>
        </member>
        <member name="F:Bing.Utils.IdGenerators.Ids.SnowflakeId._sequence">
            <summary>
            序列号ID
            </summary>
        </member>
        <member name="F:Bing.Utils.IdGenerators.Ids.SnowflakeId._lastTimestamp">
            <summary>
            最后时间戳
            </summary>
        </member>
        <member name="P:Bing.Utils.IdGenerators.Ids.SnowflakeId.WorkerId">
            <summary>
            机器ID
            </summary>
        </member>
        <member name="P:Bing.Utils.IdGenerators.Ids.SnowflakeId.DatacenterId">
            <summary>
            数据标志ID
            </summary>
        </member>
        <member name="P:Bing.Utils.IdGenerators.Ids.SnowflakeId.Sequence">
            <summary>
            序列号ID
            </summary>
        </member>
        <member name="M:Bing.Utils.IdGenerators.Ids.SnowflakeId.#ctor(System.Int64,System.Int64,System.Int64)">
            <summary>
            初始化一个<see cref="T:Bing.Utils.IdGenerators.Ids.SnowflakeId"/>类型的实例
            </summary>
            <param name="workerId">机器ID</param>
            <param name="datacenterId">数据标志ID</param>
            <param name="sequence">序列号ID</param>
        </member>
        <member name="F:Bing.Utils.IdGenerators.Ids.SnowflakeId._lock">
            <summary>
            对象锁
            </summary>
        </member>
        <member name="M:Bing.Utils.IdGenerators.Ids.SnowflakeId.NextId">
            <summary>
            获取下一个ID
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.IdGenerators.Ids.SnowflakeId.TilNextMillis(System.Int64)">
            <summary>
            获取增量时间戳，防止产生的时间比之前的时间还要小（由于NTP回拨等问题），保持增量的趋势
            </summary>
            <param name="lastTimestamp">最后一个时间戳</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.IdGenerators.Ids.SnowflakeId.TimeGen">
            <summary>
            获取当前时间戳
            </summary>
            <returns></returns>
        </member>
        <member name="F:Bing.Utils.IdGenerators.Ids.SnowflakeId.CurrentTimeFunc">
            <summary>
            获取当前时间戳
            </summary>
        </member>
        <member name="M:Bing.Utils.IdGenerators.Ids.SnowflakeId.CurrentTimeMills">
            <summary>
            获取当前时间戳
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.IdGenerators.Ids.SnowflakeId.StubCurrentTime(System.Func{System.Int64})">
            <summary>
            重置当前时间戳
            </summary>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.IdGenerators.Ids.SnowflakeId.StubCurrentTime(System.Int64)">
            <summary>
            重置当前时间戳
            </summary>
            <param name="millis"></param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.IdGenerators.Ids.SnowflakeId.InternalCurrentTimeMillis">
            <summary>
            默认当前时间戳
            </summary>
            <returns></returns>
        </member>
        <member name="T:Bing.Utils.IdGenerators.Ids.SnowflakeId.DisposableAction">
            <summary>
            一次性方法
            </summary>
        </member>
        <member name="F:Bing.Utils.IdGenerators.Ids.SnowflakeId.DisposableAction._action">
            <summary>
            执行方法
            </summary>
        </member>
        <member name="M:Bing.Utils.IdGenerators.Ids.SnowflakeId.DisposableAction.#ctor(System.Action)">
            <summary>
            初始化一个<see cref="T:Bing.Utils.IdGenerators.Ids.SnowflakeId.DisposableAction"/>类型的实例
            </summary>
            <param name="action">执行方法</param>
        </member>
        <member name="M:Bing.Utils.IdGenerators.Ids.SnowflakeId.DisposableAction.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="T:Bing.Utils.IdGenerators.Ids.TimestampId">
            <summary>
            时间戳ID，借鉴雪花算法，生成唯一时间戳ID
            参考文章：http://www.cnblogs.com/rjf1979/p/6282855.html
            </summary>
        </member>
        <member name="M:Bing.Utils.IdGenerators.Ids.TimestampId.GetInstance(System.Nullable{System.DateTime})">
            <summary>
            获取单个实例对象
            </summary>
            <param name="initialDateTime">初始化时间，与当前时间做一个相差取时间戳</param>
            <returns></returns>
        </member>
        <member name="P:Bing.Utils.IdGenerators.Ids.TimestampId.InitialDateTime">
            <summary>
            初始化时间，作用时间戳的相差
            </summary>
        </member>
        <member name="M:Bing.Utils.IdGenerators.Ids.TimestampId.GetId">
            <summary>
            获取唯一时间戳ID
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.IdGenerators.Ids.TimestampId.Fill(System.Int64)">
            <summary>
            补位填充
            </summary>
            <param name="temp">数字</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.IdGenerators.Ids.TimestampId.GetUniqueTimeStamp(System.Int64,System.Int64@)">
            <summary>
            获取唯一时间戳
            </summary>
            <param name="lastTimeStamp">最后时间戳</param>
            <param name="temp">临时时间戳</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.IdGenerators.Ids.TimestampId.GetTimeStamp">
            <summary>
            获取时间戳
            </summary>
            <returns></returns>
        </member>
        <member name="T:Bing.Utils.IdGenerators.IIdGenerator`1">
            <summary>
            ID 生成器
            </summary>
            <typeparam name="T">数据类型</typeparam>
        </member>
        <member name="M:Bing.Utils.IdGenerators.IIdGenerator`1.Create">
            <summary>
            创建 ID
            </summary>
            <returns></returns>
        </member>
        <member name="T:Bing.Utils.IO.ByteBuffer">
            <summary>
            字节缓冲区
            </summary>
        </member>
        <member name="F:Bing.Utils.IO.ByteBuffer._buffer">
            <summary>
            字节缓存区
            </summary>
        </member>
        <member name="F:Bing.Utils.IO.ByteBuffer._readIndex">
            <summary>
            读取索引
            </summary>
        </member>
        <member name="F:Bing.Utils.IO.ByteBuffer._writeIndex">
            <summary>
            写入索引
            </summary>
        </member>
        <member name="F:Bing.Utils.IO.ByteBuffer._markReadIndex">
            <summary>
            读取索引标记
            </summary>
        </member>
        <member name="F:Bing.Utils.IO.ByteBuffer._markWriteIndex">
            <summary>
            写入索引标记
            </summary>
        </member>
        <member name="F:Bing.Utils.IO.ByteBuffer._capacity">
            <summary>
            缓存区字节数组长度
            </summary>
        </member>
        <member name="M:Bing.Utils.IO.ByteBuffer.#ctor(System.Int32)">
            <summary>
            初始化一个<see cref="T:Bing.Utils.IO.ByteBuffer"/>类型的实例
            </summary>
            <param name="capacity">容量</param>
        </member>
        <member name="M:Bing.Utils.IO.ByteBuffer.#ctor(System.Byte[])">
            <summary>
            初始化一个<see cref="T:Bing.Utils.IO.ByteBuffer"/>类型的实例
            </summary>
            <param name="bytes">字节数组</param>
        </member>
        <member name="M:Bing.Utils.IO.ByteBuffer.Allocate(System.Int32)">
            <summary>
            构建一个指定长度的字节缓冲区对象
            </summary>
            <param name="capacity">容量</param>
        </member>
        <member name="M:Bing.Utils.IO.ByteBuffer.Allocate(System.Byte[])">
            <summary>
            构建一个指定字节数组的字节缓冲区对象
            </summary>
            <param name="bytes">字节数组</param>
        </member>
        <member name="M:Bing.Utils.IO.ByteBuffer.FixLength(System.Int32)">
            <summary>
            修正长度。
            根据length的长度，确定大于此length的最近的2次方数，如length=7，则返回值为8
            </summary>
            <param name="length">长度</param>
        </member>
        <member name="M:Bing.Utils.IO.ByteBuffer.Flip(System.Byte[],System.Boolean)">
            <summary>
            翻转字节数组。如果本地字节序列为低字节序列，则进行翻转以转换为高字节序列（大小端）
            </summary>
            <param name="bytes">字节数组</param>
            <param name="isLittleEndian">是否小端</param>
        </member>
        <member name="M:Bing.Utils.IO.ByteBuffer.FixSizeAndReset(System.Int32,System.Int32)">
            <summary>
            确定内部字节缓存数组的大小
            </summary>
            <param name="currLen">当前长度</param>
            <param name="futureLen">将来长度</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.IO.ByteBuffer.WriteBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            写入字节数组。将bytes字节数组从指定起始索引到指定长度的元素写入到缓冲区
            </summary>
            <param name="bytes">字节数组</param>
            <param name="startIndex">起始索引</param>
            <param name="length">写入长度</param>
        </member>
        <member name="M:Bing.Utils.IO.ByteBuffer.WriteBytes(System.Byte[],System.Int32)">
            <summary>
            写入字节数组。将bytes字节数组从0到指定长度的元素写入缓冲区
            </summary>
            <param name="bytes">字节数组</param>
            <param name="length">写入长度</param>
        </member>
        <member name="T:Bing.Utils.IO.DirectoryHelper">
            <summary>
            目录操作辅助类
            </summary>
        </member>
        <member name="M:Bing.Utils.IO.DirectoryHelper.CreateIfNotExists(System.String)">
            <summary>
            创建文件夹，如果不存在
            </summary>
            <param name="directory">要创建的文件夹路径</param>
        </member>
        <member name="M:Bing.Utils.IO.DirectoryHelper.IsSubDirectoryOf(System.String,System.String)">
            <summary>
            是否指定父目录路径的子目录
            </summary>
            <param name="parentDirectoryPath">父目录路径</param>
            <param name="childDirectoryPath">子目录路径</param>
        </member>
        <member name="M:Bing.Utils.IO.DirectoryHelper.IsSubDirectoryOf(System.IO.DirectoryInfo,System.IO.DirectoryInfo)">
            <summary>
            是否指定父目录路径的子目录
            </summary>
            <param name="parentDirectory">父目录</param>
            <param name="childDirectory">子目录</param>
        </member>
        <member name="M:Bing.Utils.IO.DirectoryHelper.ChangeCurrentDirectory(System.String)">
            <summary>
            更改当前目录
            </summary>
            <param name="targetDirectory">目标目录</param>
        </member>
        <member name="M:Bing.Utils.IO.DirectoryHelper.GetFileNames(System.String,System.String)">
            <summary>
            获取指定目录中的文件列表
            </summary>
            <param name="directoryPath">目录的绝对路径</param>
            <param name="pattern">通配符</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.IO.DirectoryHelper.GetFileNames(System.String,System.String,System.Boolean)">
            <summary>
            获取指定目录及子目录中所有文件列表
            </summary>
            <param name="directoryPath">目录的绝对路径</param>
            <param name="searchPattern">模式字符串。"*"代表0或N个字符，"?"代表1个字符。范例："Log*.xml"表示搜索所有以Log开头的Xml文件。</param>
            <param name="isSearchChild">是否搜索子目录</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.IO.DirectoryHelper.GetDirectories(System.String)">
            <summary>
            获取指定目录中所有子目录列表
            </summary>
            <param name="directoryPath">目录的绝对路径</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.IO.DirectoryHelper.Contains(System.String,System.String,System.Boolean)">
            <summary>
            查找指定目录中是否存在指定的文件
            </summary>
            <param name="directoryPath">目录的绝对路径</param>
            <param name="searchPattern">模式字符串。"*"代表0或N个字符，"?"代表1个字符。范例："Log*.xml"表示搜索所有以Log开头的Xml文件。</param>
            <param name="isSearchChild">是否搜索子目录</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.IO.DirectoryHelper.IsEmpty(System.String)">
            <summary>
            是否空目录
            </summary>
            <param name="directoryPath">目录的绝对路径</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.IO.DirectoryHelper.Copy(System.String,System.String,System.String[])">
            <summary>
            递归复制文件夹及文件夹/文件
            </summary>
            <param name="sourcePath">源文件夹路径</param>
            <param name="targetPath">目标文件夹路径</param>
            <param name="searchPatterns">要复制的文件扩展名数组</param>
        </member>
        <member name="M:Bing.Utils.IO.DirectoryHelper.Delete(System.String,System.Boolean)">
            <summary>
            递归删除目录
            </summary>
            <param name="directory">目录路径</param>
            <param name="isDeleteRoot">是否删除根目录</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.IO.DirectoryHelper.SetAttributes(System.String,System.IO.FileAttributes,System.Boolean)">
            <summary>
            设置目录属性
            </summary>
            <param name="directory">目录路径</param>
            <param name="attribute">要设置的目录属性</param>
            <param name="isSet">是否为设置属性,true:设置,false:取消</param>
        </member>
        <member name="T:Bing.Utils.IO.FileHelper">
            <summary>
            文件操作辅助类 - 转换
            </summary>
            <summary>
            文件操作辅助类
            </summary>
            <summary>
            文件操作辅助类 - 信息
            </summary>
            <summary>
            文件操作帮助类 - 加载
            </summary>
        </member>
        <member name="M:Bing.Utils.IO.FileHelper.ToString(System.Byte[],System.Text.Encoding)">
            <summary>
            字节数组转换成字符串
            </summary>
            <param name="data">数据</param>
            <param name="encoding">字符编码</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.IO.FileHelper.ToString(System.IO.Stream,System.Text.Encoding,System.Int32,System.Boolean)">
            <summary>
            流转换成字符串
            </summary>
            <param name="stream">流</param>
            <param name="encoding">字符串编码</param>
            <param name="bufferSize">缓冲区大小</param>
            <param name="isCloseStream">读取完成是否释放流，默认为true</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.IO.FileHelper.ToStringAsync(System.IO.Stream,System.Text.Encoding,System.Int32,System.Boolean)">
            <summary>
            流转换成字符串
            </summary>
            <param name="stream">流</param>
            <param name="encoding">字符串编码</param>
            <param name="bufferSize">缓冲区大小</param>
            <param name="isCloseStream">读取完成是否释放流，默认为true</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.IO.FileHelper.ToStream(System.String,System.Text.Encoding)">
            <summary>
            字符串转换成流
            </summary>
            <param name="data">数据</param>
            <param name="encoding">字符编码</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.IO.FileHelper.ToBytes(System.String)">
            <summary>
            字符串转换为字节数组
            </summary>
            <param name="data">数据。默认字符编码：utf-8</param>
        </member>
        <member name="M:Bing.Utils.IO.FileHelper.ToBytes(System.String,System.Text.Encoding)">
            <summary>
            字符串转换成字节数组
            </summary>
            <param name="data">数据</param>
            <param name="encoding">字符编码</param>
        </member>
        <member name="M:Bing.Utils.IO.FileHelper.ToBytes(System.IO.Stream)">
            <summary>
            流转换成字节流
            </summary>
            <param name="stream">流</param>
        </member>
        <member name="M:Bing.Utils.IO.FileHelper.ToBytesAsync(System.IO.Stream)">
            <summary>
            流转换成字节流
            </summary>
            <param name="stream">流</param>
        </member>
        <member name="M:Bing.Utils.IO.FileHelper.CreateIfNotExists(System.String)">
            <summary>
            创建文件，如果文件不存在
            </summary>
            <param name="fileName">文件名，绝对路径</param>
        </member>
        <member name="M:Bing.Utils.IO.FileHelper.Delete(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            删除文件
            </summary>
            <param name="filePaths">文件集合的绝对路径</param>
        </member>
        <member name="M:Bing.Utils.IO.FileHelper.Delete(System.String)">
            <summary>
            删除文件
            </summary>
            <param name="filePath">文件的绝对路径</param>
        </member>
        <member name="M:Bing.Utils.IO.FileHelper.KillFile(System.String,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            强力粉碎文件，如果文件被打开，很难粉碎
            </summary>
            <param name="fileName">文件全路径</param>
            <param name="deleteCount">删除次数</param>
            <param name="randomData">随机数据填充文件，默认true</param>
            <param name="blanks">空白填充文件，默认false</param>
            <returns>true:粉碎成功,false:粉碎失败</returns>        
        </member>
        <member name="M:Bing.Utils.IO.FileHelper.SetAttribute(System.String,System.IO.FileAttributes,System.Boolean)">
            <summary>
            设置文件属性
            </summary>
            <param name="fileName">文件名</param>
            <param name="attribute">文件属性</param>
            <param name="isSet">是否为设置属性,true:设置,false:取消</param>
        </member>
        <member name="M:Bing.Utils.IO.FileHelper.GetAllFiles(System.String)">
            <summary>
            获取目录中全部文件列表，包括子目录
            </summary>
            <param name="directoryPath">目录绝对路径</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.IO.FileHelper.Read(System.String)">
            <summary>
            读取文件到字符串
            </summary>
            <param name="filePath">文件的绝对路径</param>
        </member>
        <member name="M:Bing.Utils.IO.FileHelper.Read(System.String,System.Text.Encoding)">
            <summary>
            读取文件到字符串
            </summary>
            <param name="filePath">文件的绝对路径</param>
            <param name="encoding">字符编码</param>
        </member>
        <member name="M:Bing.Utils.IO.FileHelper.ReadToBytes(System.String)">
            <summary>
            将文件读取到字节流中
            </summary>
            <param name="filePath">文件的绝对路径</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.IO.FileHelper.ReadToBytes(System.IO.FileInfo)">
            <summary>
            将文件读取到字节流中
            </summary>
            <param name="fileInfo">文件信息</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.IO.FileHelper.Write(System.String,System.String)">
            <summary>
            将字符串写入文件，文件不存在则创建
            </summary>
            <param name="filePath">文件的绝对路径</param>
            <param name="content">数据</param>
        </member>
        <member name="M:Bing.Utils.IO.FileHelper.Write(System.String,System.Byte[])">
            <summary>
            将字符串写入文件，文件不存在则创建
            </summary>
            <param name="filePath">文件的绝对路径</param>
            <param name="bytes">数据</param>
        </member>
        <member name="M:Bing.Utils.IO.FileHelper.JoinPath(System.String,System.String)">
            <summary>
            连接基路径和子路径，比如把 c: 与 test.doc 连接成 c:\test.doc
            </summary>
            <param name="basePath">基路径，范例：c:</param>
            <param name="subPath">子路径，可以是文件名，范例：test.doc</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.IO.FileHelper.CopyToStringAsync(System.IO.Stream,System.Text.Encoding)">
            <summary>
            复制流并转换成字符串
            </summary>
            <param name="stream">流</param>
            <param name="encoding">字符编码</param>
        </member>
        <member name="M:Bing.Utils.IO.FileHelper.Combine(System.Collections.Generic.IList{System.String},System.String,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            合并文件
            </summary>
            <param name="files">文件路径列表</param>
            <param name="fileName">生成文件名</param>
            <param name="delete">合并后是否删除源文件</param>
            <param name="encrypt">是否加密</param>
            <param name="sign">签名</param>
        </member>
        <member name="M:Bing.Utils.IO.FileHelper.Split(System.String,System.String,System.String,System.Int32,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            分割文件
            </summary>
            <param name="file">文件</param>
            <param name="dirPath">生成文件路径。不含文件名</param>
            <param name="suffix">后缀名</param>
            <param name="size">分割大小。单位：KB</param>
            <param name="delete">分割后是否删除源文件</param>
            <param name="encrypt">是否加密</param>
            <param name="sign">签名</param>
        </member>
        <member name="M:Bing.Utils.IO.FileHelper.GetSplitFileTotal(System.Int32,System.Int32)">
            <summary>
            获取分割文件数量
            </summary>
            <param name="fileSize">文件大小</param>
            <param name="splitSize">分割大小。单位：字节</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.IO.FileHelper.Compress(System.String,System.String)">
            <summary>
            压缩
            </summary>
            <param name="file">文件</param>
            <param name="saveFile">保存文件</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.IO.FileHelper.Decompress(System.String,System.String)">
            <summary>
            解压缩
            </summary>
            <param name="file">文件</param>
            <param name="saveFile">保存文件</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.IO.FileHelper.CompressMulti(System.String[],System.String)">
            <summary>
            多文件压缩。（生成的压缩包和第三方的压缩文件解压不兼容）
            </summary>
            <param name="sourceFileList">文件列表</param>
            <param name="saveFullPath">压缩包全路径</param>
        </member>
        <member name="M:Bing.Utils.IO.FileHelper.DecompressMulti(System.String,System.String)">
            <summary>
            多文件解压缩
            </summary>
            <param name="zipPath">压缩文件路径</param>
            <param name="targetPath">解压目录</param>
        </member>
        <member name="M:Bing.Utils.IO.FileHelper.GetExtension(System.String)">
            <summary>
            获取文件扩展名。例如：a.txt => txt
            </summary>
            <param name="fileNameWithExtension">文件名。包含扩展名</param>
        </member>
        <member name="M:Bing.Utils.IO.FileHelper.GetContentType(System.String)">
            <summary>
            根据扩展名获取文件内容类型
            </summary>
            <param name="ext">扩展名</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.IO.FileHelper.GetFileSize(System.String)">
            <summary>
            获取文件大小
            </summary>
            <param name="filePath">文件路径</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.IO.FileHelper.GetFileSize(System.IO.FileInfo)">
            <summary>
            获取文件大小
            </summary>
            <param name="fileInfo">文件信息</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.IO.FileHelper.GetVersion(System.String)">
            <summary>
            获取文件版本号
            </summary>
            <param name="fileName">完整文件名</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.IO.FileHelper.GetEncoding(System.String)">
            <summary>
            获取文件编码
            </summary>
            <param name="filePath">文件绝对路径</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.IO.FileHelper.GetEncoding(System.String,System.Text.Encoding)">
            <summary>
            获取文件编码
            </summary>
            <param name="filePath">文件绝对路径</param>
            <param name="defaultEncoding">默认编码</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.IO.FileHelper.GetMd5(System.String)">
            <summary>
            获取文件的MD5值
            </summary>
            <param name="file">文件</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.IO.FileHelper.HashFile(System.String,System.String)">
            <summary>
            计算文件的哈希值
            </summary>
            <param name="file">文件</param>
            <param name="algName">算法名。例如：md5,sha1</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.IO.FileHelper.HashData(System.IO.Stream,System.String)">
            <summary>
            计算哈希值
            </summary>
            <param name="stream">流</param>
            <param name="algName">算法名。例如：md5,sha1</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.IO.FileHelper.ToHexString(System.Byte[])">
            <summary>
            将字节数组转换为16进制表示的字符在
            </summary>
            <param name="bytes">字节数组</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.IO.FileHelper.GetSha1(System.String)">
            <summary>
            获取文件的SHA1值
            </summary>
            <param name="file">文件</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.IO.FileHelper.ReadAllTextAsync(System.String)">
            <summary>
            读取文件所有文本
            </summary>
            <param name="filePath">文件路径</param>
        </member>
        <member name="M:Bing.Utils.IO.FileHelper.ReadAllBytesAsync(System.String)">
            <summary>
            读取文件所有字节
            </summary>
            <param name="filePath">文件路径</param>
        </member>
        <member name="T:Bing.Utils.IO.WriteType">
            <summary>
            文件写入类型
            </summary>
        </member>
        <member name="F:Bing.Utils.IO.WriteType.Append">
            <summary>
            追加
            </summary>
        </member>
        <member name="F:Bing.Utils.IO.WriteType.Covered">
            <summary>
            覆盖
            </summary>
        </member>
        <member name="T:Bing.Utils.IO.FileQueueHelper">
            <summary>
            文件队列工具
            </summary>
        </member>
        <member name="M:Bing.Utils.IO.FileQueueHelper.AddFileToEnqueue(System.String,System.String,System.String)">
            <summary>
            将文件加入到本地队列
            </summary>
            <param name="queueDir">队列目录</param>
            <param name="fileName">文件名</param>
            <param name="fileContent">文件内容</param>
        </member>
        <member name="M:Bing.Utils.IO.FileQueueHelper.GetSaveDir(System.String)">
            <summary>
            获取保存目录
            </summary>
            <param name="queuePath">队列路径</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.IO.FileQueueHelper.RemoveFileFromQueue(System.String)">
            <summary>
            从队列中移除文件
            </summary>
            <param name="filePath">文件路径</param>
        </member>
        <member name="M:Bing.Utils.IO.FileQueueHelper.RemoveFileFromQueue(System.IO.FileInfo)">
            <summary>
            从队列中移除文件
            </summary>
            <param name="fileInfo">文件信息</param>
        </member>
        <member name="M:Bing.Utils.IO.FileQueueHelper.GetFilesFromQueue(System.String,System.Int32,System.String)">
            <summary>
            获取文件
            </summary>
            <param name="queueDir">队列目录</param>
            <param name="takeCount">获取文件数量</param>
            <param name="type">类型</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.IO.FileQueueHelper.ReadObjectFromQueue``1(System.String)">
            <summary>
            读取文件内容
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="filePath">文件路径</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.IO.FileQueueHelper.ReadStringFromQueue(System.String)">
            <summary>
            读取文件内容
            </summary>
            <param name="filePath">文件路径</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.IO.FileQueueHelper.GetQueueDirs(System.String)">
            <summary>
            获取队列文件夹
            </summary>
            <param name="queueDir">队列目录</param>
            <returns></returns>
        </member>
        <member name="T:Bing.Utils.IO.FileWatcher">
            <summary>
            文件监控器
            </summary>
        </member>
        <member name="T:Bing.Utils.IO.FileWatcher.FileWatcherEventHandler">
            <summary>
            接受文件监控信息的事件委托
            </summary>
            <param name="sender">事件发送器</param>
            <param name="args">文件监控事件参数</param>
        </member>
        <member name="F:Bing.Utils.IO.FileWatcher.EventHandler">
            <summary>
            获取文件监控信息
            </summary>
        </member>
        <member name="F:Bing.Utils.IO.FileWatcher._interval">
            <summary>
            执行间隔
            </summary>
        </member>
        <member name="P:Bing.Utils.IO.FileWatcher.IsWatching">
            <summary>
            文件更改监控已启动
            </summary>
        </member>
        <member name="F:Bing.Utils.IO.FileWatcher._watchers">
            <summary>
            监控器字典
            </summary>
        </member>
        <member name="M:Bing.Utils.IO.FileWatcher.#ctor(System.String[])">
            <summary>
            初始化一个<see cref="T:Bing.Utils.IO.FileWatcher"/>类型的实例
            </summary>
            <param name="paths">路径</param>
        </member>
        <member name="M:Bing.Utils.IO.FileWatcher.AddPath(System.String)">
            <summary>
            添加路径
            </summary>
            <param name="path">路径</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.IO.FileWatcher.DeletePath(System.String)">
            <summary>
            删除路径
            </summary>
            <param name="path">路径</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.IO.FileWatcher.Start">
            <summary>
            启动文件监控
            </summary>
        </member>
        <member name="M:Bing.Utils.IO.FileWatcher.Stop">
            <summary>
            停止文件监控
            </summary>
        </member>
        <member name="M:Bing.Utils.IO.FileWatcher.CreateWatcher(System.String)">
            <summary>
            创建监控器
            </summary>
            <param name="path">路径</param>
            <returns></returns>
        </member>
        <member name="T:Bing.Utils.IO.FileWatcherEventArgs">
            <summary>
            文件监控事件参数
            </summary>
        </member>
        <member name="P:Bing.Utils.IO.FileWatcherEventArgs.ChangeTypes">
            <summary>
            变更类型
            </summary>
        </member>
        <member name="P:Bing.Utils.IO.FileWatcherEventArgs.FullPath">
            <summary>
            文件全路径
            </summary>
        </member>
        <member name="P:Bing.Utils.IO.FileWatcherEventArgs.Name">
            <summary>
            文件名称
            </summary>
        </member>
        <member name="P:Bing.Utils.IO.FileWatcherEventArgs.OldFullPath">
            <summary>
            旧的文件全路径
            </summary>
        </member>
        <member name="P:Bing.Utils.IO.FileWatcherEventArgs.OldName">
            <summary>
            旧的文件名称
            </summary>
        </member>
        <member name="M:Bing.Utils.IO.FileWatcherEventArgs.#ctor(System.IO.WatcherChangeTypes,System.String,System.String,System.String,System.String)">
            <summary>
            初始化一个<see cref="T:Bing.Utils.IO.FileWatcherEventArgs"/>类型的实例
            </summary>
            <param name="type">监控变更类型</param>
            <param name="fullPath">文件全路径</param>
            <param name="name">文件名称</param>
            <param name="oldFullPath">旧的文件全路径</param>
            <param name="oldName">旧的文件名称</param>
        </member>
        <member name="T:Bing.Utils.Item">
            <summary>
            列表项
            </summary>
        </member>
        <member name="M:Bing.Utils.Item.#ctor">
            <summary>
            初始化一个<see cref="T:Bing.Utils.Item"/>类型的实例
            </summary>
        </member>
        <member name="M:Bing.Utils.Item.#ctor(System.String,System.Object,System.Nullable{System.Int32},System.String,System.Nullable{System.Boolean})">
            <summary>
            初始化一个<see cref="T:Bing.Utils.Item"/>类型的实例
            </summary>
            <param name="text">文本</param>
            <param name="value">值</param>
            <param name="sortId">排序号</param>
            <param name="group">组</param>
            <param name="disabled">禁用</param>
        </member>
        <member name="P:Bing.Utils.Item.Text">
            <summary>
            文本
            </summary>
        </member>
        <member name="P:Bing.Utils.Item.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="P:Bing.Utils.Item.SortId">
            <summary>
            排序号
            </summary>
        </member>
        <member name="P:Bing.Utils.Item.Group">
            <summary>
            组
            </summary>
        </member>
        <member name="P:Bing.Utils.Item.Disabled">
            <summary>
            禁用
            </summary>
        </member>
        <member name="M:Bing.Utils.Item.CompareTo(Bing.Utils.Item)">
            <summary>
            比较
            </summary>
            <param name="other">其他列表项</param>
        </member>
        <member name="T:Bing.Utils.Json.Converters.ChinaDateTimeConverter">
            <summary>
            中国时间转换器
            <para>
            [JsonConverter(typeof(ChinaDateTimeConverter))]
            public DateTime Birthday { get; set; }
            </para>
            </summary>
        </member>
        <member name="F:Bing.Utils.Json.Converters.ChinaDateTimeConverter.DtConverter">
            <summary>
            时间转换器
            </summary>
        </member>
        <member name="M:Bing.Utils.Json.Converters.ChinaDateTimeConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            写入JSON对象
            </summary>
            <param name="writer">JSON写入器</param>
            <param name="value">对象值</param>
            <param name="serializer">JSON序列化器</param>
        </member>
        <member name="M:Bing.Utils.Json.Converters.ChinaDateTimeConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            读取JSON对象
            </summary>
            <param name="reader">JSON读取器</param>
            <param name="objectType">对象类型</param>
            <param name="existingValue">存在值</param>
            <param name="serializer">JSON序列化器</param>
        </member>
        <member name="T:Bing.Utils.Json.Converters.CustomDateFormatConverter">
            <summary>
            自定义时间格式转换器
            <para>
            [JsonConverter(typeof(CustomDateFormatConverter),"yyyy-MM-dd HH:mm:ss")]
            public DateTime Birthday { get; set; }
            </para>
            </summary>
        </member>
        <member name="M:Bing.Utils.Json.Converters.CustomDateFormatConverter.#ctor(System.String)">
            <summary>
            初始化一个<see cref="T:Bing.Utils.Json.Converters.CustomDateFormatConverter"/>类型的实例
            </summary>
            <param name="format">格式化字符串</param>
        </member>
        <member name="T:Bing.Utils.Json.Converters.DataSetConverter">
            <summary>
            DataSet 转换器
            </summary>
        </member>
        <member name="M:Bing.Utils.Json.Converters.DataSetConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            写入JSON对象
            </summary>
            <param name="writer">JSON写入器</param>
            <param name="value">对象值</param>
            <param name="serializer">JSON序列化器</param>
        </member>
        <member name="M:Bing.Utils.Json.Converters.DataSetConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            读取JSON对象
            </summary>
            <param name="reader">JSON读取器</param>
            <param name="objectType">对象类型</param>
            <param name="existingValue">存在值</param>
            <param name="serializer">JSON序列化器</param>
        </member>
        <member name="M:Bing.Utils.Json.Converters.DataSetConverter.CanConvert(System.Type)">
            <summary>
            确定此实例是否可以转换指定的对象类型
            </summary>
            <param name="objectType">对象类型</param>
        </member>
        <member name="T:Bing.Utils.Json.Converters.DataTableConverter">
            <summary>
            DataTable 转换器
            </summary>
        </member>
        <member name="M:Bing.Utils.Json.Converters.DataTableConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            写入JSON对象
            </summary>
            <param name="writer">JSON写入器</param>
            <param name="value">对象值</param>
            <param name="serializer">JSON序列化器</param>
        </member>
        <member name="M:Bing.Utils.Json.Converters.DataTableConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            读取JSON对象
            </summary>
            <param name="reader">JSON读取器</param>
            <param name="objectType">对象类型</param>
            <param name="existingValue">存在值</param>
            <param name="serializer">JSON序列化器</param>
        </member>
        <member name="M:Bing.Utils.Json.Converters.DataTableConverter.CanConvert(System.Type)">
            <summary>
            确定此实例是否可以转换指定的对象类型
            </summary>
            <param name="objectType">对象类型</param>
        </member>
        <member name="T:Bing.Utils.Json.Converters.Internals.DataRowConverter">
            <summary>
            DataRow 转换器
            </summary>
        </member>
        <member name="M:Bing.Utils.Json.Converters.Internals.DataRowConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            写入JSON对象
            </summary>
            <param name="writer">JSON写入器</param>
            <param name="value">对象值</param>
            <param name="serializer">JSON序列化器</param>
        </member>
        <member name="M:Bing.Utils.Json.Converters.Internals.DataRowConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            读取JSON对象
            </summary>
            <param name="reader">JSON读取器</param>
            <param name="objectType">对象类型</param>
            <param name="existingValue">存在值</param>
            <param name="serializer">JSON序列化器</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Json.Converters.Internals.DataRowConverter.CanConvert(System.Type)">
            <summary>
            确定此实例是否可以转换指定的对象类型
            </summary>
            <param name="objectType">对象类型</param>
            <returns></returns>
        </member>
        <member name="T:Bing.Utils.Json.Converters.LongToStringConverter">
            <summary>
            长整型转字符串转换器
            </summary>
        </member>
        <member name="M:Bing.Utils.Json.Converters.LongToStringConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            写入JSON对象
            </summary>
            <param name="writer">JSON写入器</param>
            <param name="value">对象值</param>
            <param name="serializer">JSON序列化器</param>
        </member>
        <member name="M:Bing.Utils.Json.Converters.LongToStringConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            读取JSON对象
            </summary>
            <param name="reader">JSON读取器</param>
            <param name="objectType">对象类型</param>
            <param name="existingValue">存在值</param>
            <param name="serializer">JSON序列化器</param>
        </member>
        <member name="M:Bing.Utils.Json.Converters.LongToStringConverter.CanConvert(System.Type)">
            <summary>
            确定此实例是否可以转换指定的对象类型
            </summary>
            <param name="objectType">对象类型</param>
        </member>
        <member name="T:Bing.Utils.Json.JsonExtensions">
            <summary>
            Json辅助扩展操作
            </summary>
        </member>
        <member name="M:Bing.Utils.Json.JsonExtensions.ToObject``1(System.String)">
            <summary>
            将Json字符串转换为对象
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="json">Json字符串</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Json.JsonExtensions.ToObject(System.String)">
            <summary>
            将Json字符串转换为独享
            </summary>
            <param name="json">Json字符串</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Json.JsonExtensions.ToJson(System.Object,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            将对象转换为Json字符串
            </summary>
            <param name="target">目标对象</param>
            <param name="isConvertToSingleQuotes">是否将双引号转换成单引号</param>
            <param name="camelCase">是否驼峰式命名</param>
            <param name="indented">是否缩进</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Json.JsonExtensions.ToJObject(System.String)">
            <summary>
            将Json字符串转换为Linq对象
            </summary>
            <param name="json">Json字符串</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Json.JsonExtensions.IsJson(System.String)">
            <summary>
            判断字符串是否为Json格式。为效率考虑，仅做了开始和结束字符的验证
            </summary>
            <param name="json">json字符串</param>
        </member>
        <member name="T:Bing.Utils.Json.JsonHelper">
            <summary>
            Json操作辅助类
            </summary>
        </member>
        <member name="M:Bing.Utils.Json.JsonHelper.JsonDateTimeFormat(System.String)">
            <summary>
            Json时间格式化
            </summary>
            <param name="json">json</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Json.JsonHelper.ToObject``1(System.String)">
            <summary>
            将Json字符串转换为对象
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="json">Json字符串</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Json.JsonHelper.ToObject(System.String,System.Type)">
            <summary>
            将Json字符串转换为对象
            </summary>
            <param name="json">Json字符串</param>
            <param name="type">实体类型</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Json.JsonHelper.ToObject(System.String)">
            <summary>
            将Json字符串转换为对象
            </summary>
            <param name="json">Json字符串</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Json.JsonHelper.ToJson(System.Object,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            将对象转换为Json字符串
            </summary>
            <param name="target">目标对象</param>
            <param name="isConvertToSingleQuotes">是否将双引号转换成单引号</param>
            <param name="camelCase">是否驼峰式命名</param>
            <param name="indented">是否缩进</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Json.JsonHelper.SerializableToFile(System.String,System.Object)">
            <summary>
            将对象序列化到Json文件
            </summary>
            <param name="fileName">文件名，绝对路径</param>
            <param name="obj">对象</param>
        </member>
        <member name="M:Bing.Utils.Json.JsonHelper.DeserializeFromFile``1(System.String)">
            <summary>
            从Json文件反序列成对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="fileName">文件名，绝对路径</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Json.JsonHelper.ToJsonByForm(System.String)">
            <summary>
            将Form表单转换成Json字符串
            </summary>
            <param name="formStr">Form表单字符串</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Json.JsonHelper.ToJObject(System.String)">
            <summary>
            将Json字符串转换为Linq对象
            </summary>
            <param name="json">Json字符串</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Json.JsonHelper.IsJson(System.String)">
            <summary>
            判断字符串是否为Json格式。为效率考虑，仅做了开始和结束字符的验证
            </summary>
            <param name="json">json字符串</param>
        </member>
        <member name="T:Bing.Utils.Maths.HexConv">
            <summary>
            进制转换
            </summary>
        </member>
        <member name="F:Bing.Utils.Maths.HexConv.BaseChar">
            <summary>
            基础字符
            </summary>
        </member>
        <member name="M:Bing.Utils.Maths.HexConv.BinToOct(System.String)">
            <summary>
            二进制转换为八进制
            </summary>
            <param name="value">二进制</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Maths.HexConv.BinToDec(System.String)">
            <summary>
            二进制转换为十进制
            </summary>
            <param name="value">二进制</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Maths.HexConv.BinToHex(System.String)">
            <summary>
            二进制转换为十六进制
            </summary>
            <param name="value">二进制</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Maths.HexConv.OctToBin(System.String)">
            <summary>
            八进制转换为二进制
            </summary>
            <param name="value">八进制</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Maths.HexConv.OctToDec(System.String)">
            <summary>
            八进制转换为十进制
            </summary>
            <param name="value">八进制</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Maths.HexConv.OctToHex(System.String)">
            <summary>
            八进制转换为十六进制
            </summary>
            <param name="value">八进制</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Maths.HexConv.DecToBin(System.String)">
            <summary>
            十进制转换为二进制
            </summary>
            <param name="value">十进制</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Maths.HexConv.DecToOct(System.String)">
            <summary>
            十进制转换为八进制
            </summary>
            <param name="value">十进制</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Maths.HexConv.DecToHex(System.String)">
            <summary>
            十进制转换为十六进制
            </summary>
            <param name="value">十进制</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Maths.HexConv.HexToBin(System.String)">
            <summary>
            十六进制转换为二进制
            </summary>
            <param name="value">十六进制</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Maths.HexConv.HexToOct(System.String)">
            <summary>
            十六进制转换为八进制
            </summary>
            <param name="value">十六进制</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Maths.HexConv.HexToDec(System.String)">
            <summary>
            十六进制转换为十进制
            </summary>
            <param name="value">十六进制</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Maths.HexConv.X2X(System.String,System.Int32,System.Int32)">
            <summary>
            任意进制转换，将源进制表示的value转换为目标进制，进制的字符排序为先大写后小写
            </summary>
            <param name="value">要转换的数据</param>
            <param name="fromRadix">源进制数，必须为[2,62]范围内</param>
            <param name="toRadix">目标进制数，必须为[2,62]范围内</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Maths.HexConv.H2X(System.UInt64,System.Int32)">
            <summary>
            将64位有符号整数形式的数值转换为指定基数的数值的字符串形式
            </summary>
            <param name="value">64位有符号整数形式的数值</param>
            <param name="toRadix">要转换的目标基数，必须为[2,62]范围内</param>
            <returns>指定基数的数值的字符串形式</returns>
        </member>
        <member name="M:Bing.Utils.Maths.HexConv.X2H(System.String,System.Int32)">
            <summary>
            将指定基数的数字的字符串表示形式转换为等效的64位有符号整数
            </summary>
            <param name="value">指定基数的数字的字符串表示</param>
            <param name="fromRadix">字符串的基数，必须为[2,62]范围内</param>
            <returns>等效于value的数值的64位有符号整数</returns>
        </member>
        <member name="M:Bing.Utils.Maths.HexConv.GetBaseChar(System.Int32)">
            <summary>
            获取基础字符串
            </summary>
            <param name="radix">进制数</param>
            <returns></returns>
        </member>
        <member name="T:Bing.Utils.Maths.MathEvaluator">
            <summary>
            计算器
            </summary>
        </member>
        <member name="F:Bing.Utils.Maths.MathEvaluator._parser">
            <summary>
            计算表达式解析器
            </summary>
        </member>
        <member name="F:Bing.Utils.Maths.MathEvaluator._node">
            <summary>
            计算节点
            </summary>
        </member>
        <member name="M:Bing.Utils.Maths.MathEvaluator.Eval(System.String)">
            <summary>
            执行
            </summary>
            <param name="expressionStr">表达式字符串</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Maths.MathEvaluator.Exp1(System.Double@)">
            <summary>
            表达式1
            </summary>
            <param name="result">结果</param>
        </member>
        <member name="M:Bing.Utils.Maths.MathEvaluator.Exp2(System.Double@)">
            <summary>
            表达式2
            </summary>
            <param name="result">结果</param>
        </member>
        <member name="M:Bing.Utils.Maths.MathEvaluator.Atom(System.Double@)">
            <summary>
            数值处理
            </summary>
            <param name="result">结果</param>
        </member>
        <member name="M:Bing.Utils.Maths.MathEvaluator.NextNode">
            <summary>
            获取下一个计算节点
            </summary>
        </member>
        <member name="T:Bing.Utils.Maths.CalculateExpressionParser">
            <summary>
            计算表达式解析器
            </summary>
        </member>
        <member name="F:Bing.Utils.Maths.CalculateExpressionParser._expressionStr">
            <summary>
            表达式字符串
            </summary>
        </member>
        <member name="F:Bing.Utils.Maths.CalculateExpressionParser._currentIndex">
            <summary>
            当前索引
            </summary>
        </member>
        <member name="F:Bing.Utils.Maths.CalculateExpressionParser._m1">
            <summary>
            正值
            </summary>
        </member>
        <member name="F:Bing.Utils.Maths.CalculateExpressionParser._m2">
            <summary>
            反转值
            </summary>
        </member>
        <member name="M:Bing.Utils.Maths.CalculateExpressionParser.#ctor(System.String)">
            <summary>
            初始化一个<see cref="T:Bing.Utils.Maths.CalculateExpressionParser"/>类型的实例
            </summary>
            <param name="expressionStr">表达式字符串</param>
        </member>
        <member name="M:Bing.Utils.Maths.CalculateExpressionParser.GetAllNodes">
            <summary>
            获取所有计算节点
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Maths.CalculateExpressionParser.GetNextNode">
            <summary>
            获取下一个计算节点
            </summary>
            <returns></returns>
        </member>
        <member name="T:Bing.Utils.Maths.CalculateNode">
            <summary>
            计算节点
            </summary>
        </member>
        <member name="F:Bing.Utils.Maths.CalculateNode.Symbol">
            <summary>
            计算符号
            </summary>
        </member>
        <member name="F:Bing.Utils.Maths.CalculateNode.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="M:Bing.Utils.Maths.CalculateNode.#ctor(Bing.Utils.Maths.CalculationSymbol)">
            <summary>
            初始化一个<see cref="T:Bing.Utils.Maths.CalculateNode"/>类型的实例
            </summary>
            <param name="symbol">计算符号</param>
        </member>
        <member name="M:Bing.Utils.Maths.CalculateNode.#ctor(Bing.Utils.Maths.CalculationSymbol,System.Double)">
            <summary>
            初始化一个<see cref="T:Bing.Utils.Maths.CalculateNode"/>类型的实例
            </summary>
            <param name="symbol">计算符号</param>
            <param name="value">值</param>
        </member>
        <member name="M:Bing.Utils.Maths.CalculateNode.ToString">
            <summary>
            输出字符串
            </summary>
            <returns></returns>
        </member>
        <member name="T:Bing.Utils.Maths.CalculationSymbol">
            <summary>
            计算符号
            </summary>
        </member>
        <member name="F:Bing.Utils.Maths.CalculationSymbol.Unknown">
            <summary>
            未知
            </summary>
        </member>
        <member name="F:Bing.Utils.Maths.CalculationSymbol.OpenBracket">
            <summary>
            括号"("
            </summary>
        </member>
        <member name="F:Bing.Utils.Maths.CalculationSymbol.CloseBracket">
            <summary>
            括号")"
            </summary>
        </member>
        <member name="F:Bing.Utils.Maths.CalculationSymbol.Add">
            <summary>
            加 +
            </summary>
        </member>
        <member name="F:Bing.Utils.Maths.CalculationSymbol.Sub">
            <summary>
            减 -
            </summary>
        </member>
        <member name="F:Bing.Utils.Maths.CalculationSymbol.Mul">
            <summary>
            乘 *
            </summary>
        </member>
        <member name="F:Bing.Utils.Maths.CalculationSymbol.Div">
            <summary>
            除 /
            </summary>
        </member>
        <member name="F:Bing.Utils.Maths.CalculationSymbol.Number">
            <summary>
            数值
            </summary>
        </member>
        <member name="F:Bing.Utils.Maths.CalculationSymbol.EOF">
            <summary>
            等于
            </summary>
        </member>
        <member name="T:Bing.Utils.Maths.MathHelper">
            <summary>
            数据计算操作辅助类
            </summary>
        </member>
        <member name="M:Bing.Utils.Maths.MathHelper.GetDistance(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            获取两点之间的距离
            </summary>
            <param name="x1">横坐标1</param>
            <param name="y1">纵坐标1</param>
            <param name="x2">横坐标2</param>
            <param name="y2">纵坐标2</param>
            <returns></returns>
        </member>
        <member name="T:Bing.Utils.Maths.TemperatureConv">
            <summary>
            温度转换
            </summary>
        </member>
        <member name="M:Bing.Utils.Maths.TemperatureConv.DegreesCelsiusToFahrenheit(System.Decimal)">
            <summary>
            摄氏度转换为华氏度
            </summary>
            <param name="value">摄氏度</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Maths.TemperatureConv.DegreesCelsiusToThermodynamicTemperature(System.Decimal)">
            <summary>
            摄氏度转换为开氏度(热力学温度)
            </summary>
            <param name="value">摄氏度</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Maths.TemperatureConv.FahrenheitToDegreesCelsius(System.Decimal)">
            <summary>
            华氏度转换为摄氏度
            </summary>
            <param name="value">华氏度</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Maths.TemperatureConv.FahrenheitToThermodynamicTemperature(System.Decimal)">
            <summary>
            华氏度转换为开氏度
            </summary>
            <param name="value">华氏度</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Maths.TemperatureConv.ThermodynamicTemperatureToDegreesCelsius(System.Decimal)">
            <summary>
            开氏度转换为摄氏度
            </summary>
            <param name="value">开氏度</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Maths.TemperatureConv.ThermodynamicTemperatureToFahrenheit(System.Decimal)">
            <summary>
            开氏度转换为华氏度
            </summary>
            <param name="value">开氏度</param>
            <returns></returns>
        </member>
        <member name="T:Bing.Utils.Medias.Images.ImageHelper">
            <summary>
            图片操作辅助类
            </summary>
        </member>
        <member name="M:Bing.Utils.Medias.Images.ImageHelper.BrightnessHandle(System.Drawing.Bitmap,System.Int32,System.Int32,System.Int32)">
            <summary>
            亮度处理
            </summary>
            <param name="bitmap">图片</param>
            <param name="width">宽度</param>
            <param name="height">高度</param>
            <param name="val">增加或减少的光暗值</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Medias.Images.ImageHelper.FilterColor(System.Drawing.Bitmap)">
            <summary>
            滤色处理
            </summary>
            <param name="bitmap">图片</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Medias.Images.ImageHelper.LeftRightTurn(System.Drawing.Bitmap)">
            <summary>
            左右翻转
            </summary>
            <param name="bitmap">图片</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Medias.Images.ImageHelper.TopBottomTurn(System.Drawing.Bitmap)">
            <summary>
            上下翻转
            </summary>
            <param name="bitmap">图片</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Medias.Images.ImageHelper.ToBlackWhiteImage(System.Drawing.Bitmap)">
            <summary>
            转换为黑白图片
            </summary>
            <param name="bitmap">图片</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Medias.Images.ImageHelper.TwistImage(System.Drawing.Bitmap,System.Boolean,System.Double,System.Double)">
            <summary>
            正弦曲线Wave扭曲图片
            </summary>
            <param name="bitmap">图片</param>
            <param name="isTwist">是否扭曲，true:扭曲,false:不扭曲</param>
            <param name="shapeMultValue">波形的幅度倍数，越大扭曲的程度越高，默认为3</param>
            <param name="shapePhase">波形的起始相位，取值区间[0-2*PI]</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Medias.Images.ImageHelper.Rotate(System.Drawing.Bitmap,System.Int32)">
            <summary>
            图片旋转，使图像绕中心点旋转一定角度
            </summary>
            <param name="bitmap">图片</param>
            <param name="angle">旋转的角度，正值为逆时针方向</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Medias.Images.ImageHelper.Gray(System.Drawing.Bitmap)">
            <summary>
            图片灰度化
            </summary>
            <param name="bitmap">图片</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Medias.Images.ImageHelper.Plate(System.Drawing.Bitmap)">
            <summary>
            底片效果
            </summary>
            <param name="bitmap">图片</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Medias.Images.ImageHelper.Emboss(System.Drawing.Bitmap)">
            <summary>
            浮雕效果
            </summary>
            <param name="bitmap">图片</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Medias.Images.ImageHelper.Soften(System.Drawing.Bitmap)">
            <summary>
            柔化效果
            </summary>
            <param name="bitmap">图片</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Medias.Images.ImageHelper.Sharpen(System.Drawing.Bitmap)">
            <summary>
            锐化效果
            </summary>
            <param name="bitmap">图片</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Medias.Images.ImageHelper.Atomizing(System.Drawing.Bitmap)">
            <summary>
            雾化效果
            </summary>
            <param name="bitmap">图片</param>
            <returns></returns>
        </member>
        <member name="T:Bing.Utils.Medias.Images.ImageLocationMode">
            <summary>
            图片位置模式
            </summary>
        </member>
        <member name="F:Bing.Utils.Medias.Images.ImageLocationMode.LeftTop">
            <summary>
            左上
            </summary>
        </member>
        <member name="F:Bing.Utils.Medias.Images.ImageLocationMode.Top">
            <summary>
            靠上
            </summary>
        </member>
        <member name="F:Bing.Utils.Medias.Images.ImageLocationMode.RightTop">
            <summary>
            右上
            </summary>
        </member>
        <member name="F:Bing.Utils.Medias.Images.ImageLocationMode.LeftCenter">
            <summary>
            左中
            </summary>
        </member>
        <member name="F:Bing.Utils.Medias.Images.ImageLocationMode.Center">
            <summary>
            居中
            </summary>
        </member>
        <member name="F:Bing.Utils.Medias.Images.ImageLocationMode.RightCenter">
            <summary>
            右中
            </summary>
        </member>
        <member name="F:Bing.Utils.Medias.Images.ImageLocationMode.LeftBottom">
            <summary>
            左下
            </summary>
        </member>
        <member name="F:Bing.Utils.Medias.Images.ImageLocationMode.Bottom">
            <summary>
            靠下
            </summary>
        </member>
        <member name="F:Bing.Utils.Medias.Images.ImageLocationMode.RightBottom">
            <summary>
            右下角
            </summary>
        </member>
        <member name="T:Bing.Utils.Medias.Images.ThumbnailMode">
            <summary>
            缩略图模式
            </summary>
        </member>
        <member name="F:Bing.Utils.Medias.Images.ThumbnailMode.Cut">
            <summary>
            指定宽高裁剪（不变形）
            </summary>
        </member>
        <member name="F:Bing.Utils.Medias.Images.ThumbnailMode.FixedW">
            <summary>
            指定宽度，高度自动
            </summary>
        </member>
        <member name="F:Bing.Utils.Medias.Images.ThumbnailMode.FixedH">
            <summary>
            指定高度，宽度自动
            </summary>
        </member>
        <member name="F:Bing.Utils.Medias.Images.ThumbnailMode.FixedBoth">
            <summary>
            指定宽高（变形）
            </summary>
        </member>
        <member name="T:Bing.Utils.NameValue">
            <summary>
            名称 - 值
            </summary>
        </member>
        <member name="M:Bing.Utils.NameValue.#ctor">
            <summary>
            初始化一个<see cref="T:Bing.Utils.NameValue"/>类型的实例
            </summary>
        </member>
        <member name="M:Bing.Utils.NameValue.#ctor(System.String,System.String)">
            <summary>
            初始化一个<see cref="T:Bing.Utils.NameValue"/>类型的实例
            </summary>
            <param name="name">名称</param>
            <param name="value">值</param>
        </member>
        <member name="T:Bing.Utils.NameValue`1">
            <summary>
            名称 - 值
            </summary>
            <typeparam name="T">类型</typeparam>
        </member>
        <member name="P:Bing.Utils.NameValue`1.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:Bing.Utils.NameValue`1.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="M:Bing.Utils.NameValue`1.#ctor">
            <summary>
            初始化一个<see cref="T:Bing.Utils.NameValue`1"/>类型的实例
            </summary>
        </member>
        <member name="M:Bing.Utils.NameValue`1.#ctor(System.String,`0)">
            <summary>
            初始化一个<see cref="T:Bing.Utils.NameValue`1"/>类型的实例
            </summary>
            <param name="name">名称</param>
            <param name="value">值</param>
        </member>
        <member name="T:Bing.Utils.NullDisposable">
            <summary>
            空释放
            </summary>
        </member>
        <member name="P:Bing.Utils.NullDisposable.Instance">
            <summary>
            实例
            </summary>
        </member>
        <member name="M:Bing.Utils.NullDisposable.#ctor">
            <summary>
            初始化一个<see cref="T:Bing.Utils.NullDisposable"/>类型的实例
            </summary>
        </member>
        <member name="M:Bing.Utils.NullDisposable.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="T:Bing.Utils.Operator">
            <summary>
            查询操作符
            </summary>
        </member>
        <member name="F:Bing.Utils.Operator.Equal">
            <summary>
            等于
            </summary>
        </member>
        <member name="F:Bing.Utils.Operator.NotEqual">
            <summary>
            不等于
            </summary>
        </member>
        <member name="F:Bing.Utils.Operator.Greater">
            <summary>
            大于
            </summary>
        </member>
        <member name="F:Bing.Utils.Operator.GreaterEqual">
            <summary>
            大于等于
            </summary>
        </member>
        <member name="F:Bing.Utils.Operator.Less">
            <summary>
            小于
            </summary>
        </member>
        <member name="F:Bing.Utils.Operator.LessEqual">
            <summary>
            小于等于
            </summary>
        </member>
        <member name="F:Bing.Utils.Operator.Starts">
            <summary>
            头匹配
            </summary>
        </member>
        <member name="F:Bing.Utils.Operator.Ends">
            <summary>
            尾匹配
            </summary>
        </member>
        <member name="F:Bing.Utils.Operator.Contains">
            <summary>
            模糊匹配
            </summary>
        </member>
        <member name="F:Bing.Utils.Operator.In">
            <summary>
            In
            </summary>
        </member>
        <member name="F:Bing.Utils.Operator.NotIn">
            <summary>
            Not In
            </summary>
        </member>
        <member name="T:Bing.Utils.Parameters.Formats.IParameterFormat">
            <summary>
            参数格式化器
            </summary>
        </member>
        <member name="M:Bing.Utils.Parameters.Formats.IParameterFormat.Format(System.String,System.Object)">
            <summary>
            格式化
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Parameters.Formats.IParameterFormat.Join(System.String,System.String)">
            <summary>
            连接参数
            </summary>
            <param name="left">左操作数</param>
            <param name="right">右操作数</param>
            <returns></returns>
        </member>
        <member name="T:Bing.Utils.Parameters.Formats.ParameterFormatBase">
            <summary>
            参数格式化器基类
            </summary>
        </member>
        <member name="P:Bing.Utils.Parameters.Formats.ParameterFormatBase.FormatSeparator">
            <summary>
            格式化分割符
            </summary>
        </member>
        <member name="P:Bing.Utils.Parameters.Formats.ParameterFormatBase.JoinSeparator">
            <summary>
            连接符
            </summary>
        </member>
        <member name="M:Bing.Utils.Parameters.Formats.ParameterFormatBase.Format(System.String,System.Object)">
            <summary>
            格式化
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Parameters.Formats.ParameterFormatBase.Join(System.String,System.String)">
            <summary>
            连接参数
            </summary>
            <param name="left">左操作数</param>
            <param name="right">右操作数</param>
            <returns></returns>
        </member>
        <member name="T:Bing.Utils.Parameters.Formats.UrlParameterFormat">
            <summary>
            Url参数格式化器
            </summary>
        </member>
        <member name="F:Bing.Utils.Parameters.Formats.UrlParameterFormat.Instance">
            <summary>
            Url参数格式化器实例
            </summary>
        </member>
        <member name="P:Bing.Utils.Parameters.Formats.UrlParameterFormat.FormatSeparator">
            <summary>
            格式化分割符
            </summary>
        </member>
        <member name="P:Bing.Utils.Parameters.Formats.UrlParameterFormat.JoinSeparator">
            <summary>
            连接符
            </summary>
        </member>
        <member name="T:Bing.Utils.Parameters.IParameterManager">
            <summary>
            参数管理器
            </summary>
        </member>
        <member name="M:Bing.Utils.Parameters.IParameterManager.GetValue(System.String)">
            <summary>
            获取值
            </summary>
            <param name="name">参数名</param>
            <returns></returns>
        </member>
        <member name="T:Bing.Utils.Parameters.ParameterBuilder">
            <summary>
            参数生成器
            </summary>
        </member>
        <member name="F:Bing.Utils.Parameters.ParameterBuilder._params">
            <summary>
            参数字典
            </summary>
        </member>
        <member name="M:Bing.Utils.Parameters.ParameterBuilder.#ctor">
            <summary>
            初始化一个<see cref="T:Bing.Utils.Parameters.ParameterBuilder"/>类型的实例
            </summary>
        </member>
        <member name="M:Bing.Utils.Parameters.ParameterBuilder.#ctor(Bing.Utils.Parameters.ParameterBuilder)">
            <summary>
            初始化一个<see cref="T:Bing.Utils.Parameters.ParameterBuilder"/>类型的实例
            </summary>
            <param name="builder">参数生成器</param>
        </member>
        <member name="M:Bing.Utils.Parameters.ParameterBuilder.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            初始化一个<see cref="T:Bing.Utils.Parameters.ParameterBuilder"/>类型的实例
            </summary>
            <param name="dictionary">字典</param>
        </member>
        <member name="M:Bing.Utils.Parameters.ParameterBuilder.Add(System.String,System.Object)">
            <summary>
            添加参数，如果参数已存在则替换
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Parameters.ParameterBuilder.GetValue(System.Object)">
            <summary>
            获取值
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Parameters.ParameterBuilder.GetDictionary(System.Boolean,System.Boolean,System.String)">
            <summary>
            获取字典
            </summary>
            <param name="isSort">是否按参数名排序</param>
            <param name="isUrlEncode">是否Url编码</param>
            <param name="encoding">字符编码，默认值：UTF-8</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Parameters.ParameterBuilder.GetEncodeValue(System.Object,System.Boolean,System.String)">
            <summary>
            获取编码的值
            </summary>
            <param name="value">值</param>
            <param name="isUrlEncode">是否Url编码</param>
            <param name="encoding">字符编码</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Parameters.ParameterBuilder.GetKeyValuePairs">
            <summary>
            获取键值对集合
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Parameters.ParameterBuilder.Clear">
            <summary>
            清空
            </summary>
        </member>
        <member name="M:Bing.Utils.Parameters.ParameterBuilder.Remove(System.String)">
            <summary>
            移除参数
            </summary>
            <param name="key">键</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Parameters.ParameterBuilder.ToJson(System.Boolean)">
            <summary>
            转换为Json
            </summary>
            <param name="isConvertToSingleQuotes">是否将双引号转成单引号</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Parameters.ParameterBuilder.Result(Bing.Utils.Parameters.Formats.IParameterFormat,System.Boolean,System.Boolean,System.String)">
            <summary>
            获取结果
            </summary>
            <param name="format">参数格式化器</param>
            <param name="isSort">是否按参数名排序</param>
            <param name="isUrlEncode">是否Url编码</param>
            <param name="encoding">字符编码，默认值：UTF-8</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Parameters.ParameterBuilder.GetValue(System.String)">
            <summary>
            获取值
            </summary>
            <param name="name">参数名</param>
            <returns></returns>
        </member>
        <member name="P:Bing.Utils.Parameters.ParameterBuilder.Item(System.String)">
            <summary>
            索引器
            </summary>
            <param name="name">参数名</param>
            <returns></returns>
        </member>
        <member name="P:Bing.Utils.Parameters.ParameterBuilder.IsEmpty">
            <summary>
            是否空参数
            </summary>
        </member>
        <member name="T:Bing.Utils.Parameters.Parsers.IParameterParser">
            <summary>
            参数解析器
            </summary>
        </member>
        <member name="M:Bing.Utils.Parameters.Parsers.IParameterParser.GetValue(System.String)">
            <summary>
            获取值
            </summary>
            <param name="name">参数名</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Parameters.Parsers.IParameterParser.GetValue``1(System.String)">
            <summary>
            获取值
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="name">参数名</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Parameters.Parsers.IParameterParser.GetDictionary">
            <summary>
            获取字典
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Parameters.Parsers.IParameterParser.HasKey(System.String)">
            <summary>
            是否包含指定键
            </summary>
            <param name="key">键</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Parameters.Parsers.IParameterParser.LoadData(System.String)">
            <summary>
            加载数据
            </summary>
            <param name="data">数据</param>
        </member>
        <member name="M:Bing.Utils.Parameters.Parsers.IParameterParser.ToJson(System.Boolean)">
            <summary>
            转换为Json
            </summary>
            <param name="isConvertToSingleQuotes">是否将双引号转换为单引号</param>
            <returns></returns>
        </member>
        <member name="T:Bing.Utils.Parameters.Parsers.IParameterParserFactory">
            <summary>
            参数解析器工厂
            </summary>
        </member>
        <member name="M:Bing.Utils.Parameters.Parsers.IParameterParserFactory.CreateParameterParser(Bing.Utils.Parameters.Parsers.ParameterParserType)">
            <summary>
            创建参数解析器
            </summary>
            <param name="type">参数解析器类型</param>
            <returns></returns>
        </member>
        <member name="T:Bing.Utils.Parameters.Parsers.JsonParameterParser">
            <summary>
            Json参数解析器
            </summary>
        </member>
        <member name="M:Bing.Utils.Parameters.Parsers.JsonParameterParser.LoadData(System.String)">
            <summary>
            加载数据
            </summary>
            <param name="data">数据</param>
        </member>
        <member name="M:Bing.Utils.Parameters.Parsers.JsonParameterParser.AddNodes(Newtonsoft.Json.Linq.JToken)">
            <summary>
            添加节点
            </summary>
            <param name="token">token节点</param>
        </member>
        <member name="T:Bing.Utils.Parameters.Parsers.JsonpParameterParser">
            <summary>
            Jsonp参数解析器
            </summary>
        </member>
        <member name="M:Bing.Utils.Parameters.Parsers.JsonpParameterParser.LoadData(System.String)">
            <summary>
            加载数据
            </summary>
            <param name="data">数据</param>
        </member>
        <member name="M:Bing.Utils.Parameters.Parsers.JsonpParameterParser.AddNodes(Newtonsoft.Json.Linq.JToken)">
            <summary>
            添加节点
            </summary>
            <param name="token">token节点</param>
        </member>
        <member name="T:Bing.Utils.Parameters.Parsers.ParameterParserBase">
            <summary>
            参数解析器基类
            </summary>
        </member>
        <member name="F:Bing.Utils.Parameters.Parsers.ParameterParserBase._params">
            <summary>
            参数字典
            </summary>
        </member>
        <member name="M:Bing.Utils.Parameters.Parsers.ParameterParserBase.#ctor">
            <summary>
            初始化一个<see cref="T:Bing.Utils.Parameters.Parsers.ParameterParserBase"/>类型的实例
            </summary>
        </member>
        <member name="M:Bing.Utils.Parameters.Parsers.ParameterParserBase.#ctor(Bing.Utils.Parameters.Parsers.IParameterParser)">
            <summary>
            初始化一个<see cref="T:Bing.Utils.Parameters.Parsers.ParameterParserBase"/>类型的实例
            </summary>
            <param name="parser">参数解析器</param>
        </member>
        <member name="M:Bing.Utils.Parameters.Parsers.ParameterParserBase.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            初始化一个<see cref="T:Bing.Utils.Parameters.Parsers.ParameterParserBase"/>类型的实例
            </summary>
            <param name="dictionary">字典</param>
        </member>
        <member name="M:Bing.Utils.Parameters.Parsers.ParameterParserBase.Add(System.String,System.Object)">
            <summary>
            添加参数，如果参数已存在则替换
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
        </member>
        <member name="M:Bing.Utils.Parameters.Parsers.ParameterParserBase.GetFormatValue(System.Object)">
            <summary>
            获取格式化后的值
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Parameters.Parsers.ParameterParserBase.GetValue(System.String)">
            <summary>
            获取值
            </summary>
            <param name="name">参数名</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Parameters.Parsers.ParameterParserBase.GetValue``1(System.String)">
            <summary>
            获取值
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="name">参数名</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Parameters.Parsers.ParameterParserBase.GetDictionary">
            <summary>
            获取字典
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Parameters.Parsers.ParameterParserBase.HasKey(System.String)">
            <summary>
            是否包含指定键
            </summary>
            <param name="key">键</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Parameters.Parsers.ParameterParserBase.LoadData(System.String)">
            <summary>
            加载数据
            </summary>
            <param name="data">数据</param>
        </member>
        <member name="M:Bing.Utils.Parameters.Parsers.ParameterParserBase.ToJson(System.Boolean)">
            <summary>
            转换为Json
            </summary>
            <param name="isConvertToSingleQuotes">是否将双引号转换为单引号</param>
            <returns></returns>
        </member>
        <member name="T:Bing.Utils.Parameters.Parsers.ParameterParserFactory">
            <summary>
            参数解析器工厂
            </summary>
        </member>
        <member name="M:Bing.Utils.Parameters.Parsers.ParameterParserFactory.CreateParameterParser(Bing.Utils.Parameters.Parsers.ParameterParserType)">
            <summary>
            创建参数解析器
            </summary>
            <param name="type">参数解析器类型</param>
            <returns></returns>
        </member>
        <member name="T:Bing.Utils.Parameters.Parsers.ParameterParserType">
            <summary>
            参数解析器类型
            </summary>
        </member>
        <member name="F:Bing.Utils.Parameters.Parsers.ParameterParserType.Url">
            <summary>
            Url参数解析器
            </summary>
        </member>
        <member name="F:Bing.Utils.Parameters.Parsers.ParameterParserType.Json">
            <summary>
            Json参数解析器
            </summary>
        </member>
        <member name="F:Bing.Utils.Parameters.Parsers.ParameterParserType.Jsonp">
            <summary>
            Jsonp参数解析器
            </summary>
        </member>
        <member name="T:Bing.Utils.Parameters.Parsers.UrlParameterParser">
            <summary>
            Url参数解析器
            </summary>
        </member>
        <member name="M:Bing.Utils.Parameters.Parsers.UrlParameterParser.LoadData(System.String)">
            <summary>
            加载数据
            </summary>
            <param name="data">数据</param>
        </member>
        <member name="T:Bing.Utils.Parameters.UrlParameterBuilder">
            <summary>
            Url参数生成器
            </summary>
        </member>
        <member name="P:Bing.Utils.Parameters.UrlParameterBuilder.ParameterBuilder">
            <summary>
            参数生成器
            </summary>
        </member>
        <member name="P:Bing.Utils.Parameters.UrlParameterBuilder.Item(System.String)">
            <summary>
            索引器
            </summary>
            <param name="name">参数名</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Parameters.UrlParameterBuilder.#ctor">
            <summary>
            初始化一个<see cref="T:Bing.Utils.Parameters.UrlParameterBuilder"/>类型的实例
            </summary>
        </member>
        <member name="M:Bing.Utils.Parameters.UrlParameterBuilder.#ctor(Bing.Utils.Parameters.ParameterBuilder)">
            <summary>
            初始化一个<see cref="T:Bing.Utils.Parameters.UrlParameterBuilder"/>类型的实例
            </summary>
            <param name="builder">参数生成器</param>
        </member>
        <member name="M:Bing.Utils.Parameters.UrlParameterBuilder.#ctor(Bing.Utils.Parameters.UrlParameterBuilder)">
            <summary>
            初始化一个<see cref="T:Bing.Utils.Parameters.UrlParameterBuilder"/>类型的实例
            </summary>
            <param name="builder">Url参数生成器</param>
        </member>
        <member name="M:Bing.Utils.Parameters.UrlParameterBuilder.#ctor(System.String,Bing.Utils.Parameters.UrlParameterBuilder)">
            <summary>
            初始化一个<see cref="T:Bing.Utils.Parameters.UrlParameterBuilder"/>类型的实例
            </summary>
            <param name="url">Url</param>
            <param name="builder">Url参数生成器</param>
        </member>
        <member name="M:Bing.Utils.Parameters.UrlParameterBuilder.LoadUrl(System.String)">
            <summary>
            加载Url
            </summary>
            <param name="url">url</param>
        </member>
        <member name="M:Bing.Utils.Parameters.UrlParameterBuilder.LoadForm">
            <summary>
            从Request加载表单参数
            </summary>
        </member>
        <member name="M:Bing.Utils.Parameters.UrlParameterBuilder.LoadQuery">
            <summary>
            从Request加载查询参数
            </summary>
        </member>
        <member name="M:Bing.Utils.Parameters.UrlParameterBuilder.Add(System.String,System.Object)">
            <summary>
            添加参数
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Parameters.UrlParameterBuilder.GetValue(System.String)">
            <summary>
            获取值
            </summary>
            <param name="name">参数名</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Parameters.UrlParameterBuilder.GetDictionary(System.Boolean,System.Boolean,System.String)">
            <summary>
            获取字典
            </summary>
            <param name="isSort">是否按参数名排序</param>
            <param name="isUrlEncode">是否Url编码</param>
            <param name="encoding">字符编码，默认值：UTF-8</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Parameters.UrlParameterBuilder.GetKeyValuePairs">
            <summary>
            获取键值对集合
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Parameters.UrlParameterBuilder.Result(System.Boolean,System.Boolean,System.String)">
            <summary>
            获取结果，格式：参数名=参数值&amp;参数名=参数值
            </summary>
            <param name="isSort">是否按参数名排序</param>
            <param name="isUrlEncode">是否Url编码</param>
            <param name="encoding">字符编码，默认值：UTF-8</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Parameters.UrlParameterBuilder.JoinUrl(System.String)">
            <summary>
            连接Url
            </summary>
            <param name="url">地址</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Parameters.UrlParameterBuilder.Clear">
            <summary>
            清空
            </summary>
        </member>
        <member name="M:Bing.Utils.Parameters.UrlParameterBuilder.Remove(System.String)">
            <summary>
            移除参数
            </summary>
            <param name="key">键</param>
            <returns></returns>
        </member>
        <member name="T:Bing.Utils.Properties.R">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:Bing.Utils.Properties.R.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:Bing.Utils.Properties.R.Culture">
            <summary>
              重写当前线程的 CurrentUICulture 属性
              重写当前线程的 CurrentUICulture 属性。
            </summary>
        </member>
        <member name="P:Bing.Utils.Properties.R.AnyRadixConvert_CharacterIsNotValid">
            <summary>
              查找类似 参数中的字符\&quot;{0}\&quot;不是 {1} 进制数的有效字符。 的本地化字符串。
            </summary>
        </member>
        <member name="P:Bing.Utils.Properties.R.AnyRadixConvert_Overflow">
            <summary>
              查找类似 0 的本地化字符串。
            </summary>
        </member>
        <member name="P:Bing.Utils.Properties.R.ParameterCheck_Between">
            <summary>
              查找类似 参数“{0}”的值必须在“{1}”与“{2}”之间。 的本地化字符串。
            </summary>
        </member>
        <member name="P:Bing.Utils.Properties.R.ParameterCheck_BetweenNotEqual">
            <summary>
              查找类似 参数“{0}”的值必须在“{1}”与“{2}”之间，且不能等于“{3}”。 的本地化字符串。
            </summary>
        </member>
        <member name="P:Bing.Utils.Properties.R.ParameterCheck_DirectoryNotExists">
            <summary>
              查找类似 指定的目录路径“{0}”不存在。 的本地化字符串。
            </summary>
        </member>
        <member name="P:Bing.Utils.Properties.R.ParameterCheck_FileNotExists">
            <summary>
              查找类似 指定的文件路径“{0}”不存在。 的本地化字符串。
            </summary>
        </member>
        <member name="P:Bing.Utils.Properties.R.ParameterCheck_NotEmpty_Guid">
            <summary>
              查找类似 参数“{0}”的值不能为Guid.Empty 的本地化字符串。
            </summary>
        </member>
        <member name="P:Bing.Utils.Properties.R.ParameterCheck_NotGreaterThan">
            <summary>
              查找类似 参数“{0}”的值必须大于“{1}”。 的本地化字符串。
            </summary>
        </member>
        <member name="P:Bing.Utils.Properties.R.ParameterCheck_NotGreaterThanOrEqual">
            <summary>
              查找类似 参数“{0}”的值必须大于或等于“{1}”。 的本地化字符串。
            </summary>
        </member>
        <member name="P:Bing.Utils.Properties.R.ParameterCheck_NotLessThan">
            <summary>
              查找类似 参数“{0}”的值必须小于“{1}”。 的本地化字符串。
            </summary>
        </member>
        <member name="P:Bing.Utils.Properties.R.ParameterCheck_NotLessThanOrEqual">
            <summary>
              查找类似 参数“{0}”的值必须小于或等于“{1}”。 的本地化字符串。
            </summary>
        </member>
        <member name="P:Bing.Utils.Properties.R.ParameterCheck_NotNull">
            <summary>
              查找类似 参数“{0}”不能为空引用。 的本地化字符串。
            </summary>
        </member>
        <member name="P:Bing.Utils.Properties.R.ParameterCheck_NotNullOrEmpty_Collection">
            <summary>
              查找类似 参数“{0}”不能为空引用或空集合。 的本地化字符串。
            </summary>
        </member>
        <member name="P:Bing.Utils.Properties.R.ParameterCheck_NotNullOrEmpty_String">
            <summary>
              查找类似 参数“{0}”不能为空引用或空字符串。 的本地化字符串。
            </summary>
        </member>
        <member name="T:Bing.Utils.Randoms.GuidRandomGenerator">
            <summary>
            Guid随机数生成器，每次创建一个新的Guid字符串，去掉了Guid的分隔符
            </summary>
        </member>
        <member name="M:Bing.Utils.Randoms.GuidRandomGenerator.Generate">
            <summary>
            生成随机数
            </summary>
        </member>
        <member name="F:Bing.Utils.Randoms.GuidRandomGenerator.Instance">
            <summary>
            Guid 随机数生成器实例
            </summary>
        </member>
        <member name="T:Bing.Utils.Randoms.IRandomGenerator">
            <summary>
            随机数生成器
            </summary>
        </member>
        <member name="M:Bing.Utils.Randoms.IRandomGenerator.Generate">
            <summary>
            生成随机数
            </summary>
        </member>
        <member name="T:Bing.Utils.Randoms.StubRandomGenerator">
            <summary>
            伪随机数生成器。用于单元测试，固定返回字符串"random"
            </summary>
        </member>
        <member name="M:Bing.Utils.Randoms.StubRandomGenerator.Generate">
            <summary>
            生成随机数
            </summary>
        </member>
        <member name="T:Bing.Utils.Signatures.ISignKey">
            <summary>
            签名密钥
            </summary>
        </member>
        <member name="M:Bing.Utils.Signatures.ISignKey.GetKey">
            <summary>
            获取私钥
            </summary>
        </member>
        <member name="M:Bing.Utils.Signatures.ISignKey.GetPublicKey">
            <summary>
            获取公钥
            </summary>
        </member>
        <member name="T:Bing.Utils.Signatures.ISignManager">
            <summary>
            签名管理器
            </summary>
        </member>
        <member name="M:Bing.Utils.Signatures.ISignManager.Add(System.String,System.Object)">
            <summary>
            添加参数
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
        </member>
        <member name="M:Bing.Utils.Signatures.ISignManager.Sign">
            <summary>
            签名
            </summary>
        </member>
        <member name="M:Bing.Utils.Signatures.ISignManager.Verify(System.String)">
            <summary>
            验证签名
            </summary>
            <param name="sign">签名</param>
        </member>
        <member name="T:Bing.Utils.Signatures.SignKey">
            <summary>
            签名密钥
            </summary>
        </member>
        <member name="F:Bing.Utils.Signatures.SignKey._key">
            <summary>
            私钥
            </summary>
        </member>
        <member name="F:Bing.Utils.Signatures.SignKey._publicKey">
            <summary>
            公钥
            </summary>
        </member>
        <member name="M:Bing.Utils.Signatures.SignKey.#ctor(System.String,System.String)">
            <summary>
            初始化一个<see cref="T:Bing.Utils.Signatures.SignKey"/>类型的实例
            </summary>
            <param name="key">私钥</param>
            <param name="publicKey">公钥</param>
        </member>
        <member name="M:Bing.Utils.Signatures.SignKey.GetKey">
            <summary>
            获取私钥
            </summary>
        </member>
        <member name="M:Bing.Utils.Signatures.SignKey.GetPublicKey">
            <summary>
            获取公钥
            </summary>
        </member>
        <member name="T:Bing.Utils.Signatures.SignManager">
            <summary>
            签名管理器
            </summary>
        </member>
        <member name="F:Bing.Utils.Signatures.SignManager._key">
            <summary>
            签名密钥
            </summary>
        </member>
        <member name="F:Bing.Utils.Signatures.SignManager._builder">
            <summary>
            Url参数生成器
            </summary>
        </member>
        <member name="M:Bing.Utils.Signatures.SignManager.#ctor(Bing.Utils.Signatures.ISignKey,Bing.Utils.Parameters.UrlParameterBuilder)">
            <summary>
            初始化一个<see cref="T:Bing.Utils.Signatures.SignManager"/>类型的实例
            </summary>
            <param name="key">签名密钥</param>
            <param name="builder">Url参数生成器</param>
        </member>
        <member name="M:Bing.Utils.Signatures.SignManager.Add(System.String,System.Object)">
            <summary>
            添加参数
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
        </member>
        <member name="M:Bing.Utils.Signatures.SignManager.Sign">
            <summary>
            签名
            </summary>
        </member>
        <member name="M:Bing.Utils.Signatures.SignManager.Verify(System.String)">
            <summary>
            验证签名
            </summary>
            <param name="sign">签名</param>
        </member>
        <member name="T:Bing.Utils.Threading.Asyncs.AsyncLock">
            <summary>
            异步锁
            </summary>
        </member>
        <member name="F:Bing.Utils.Threading.Asyncs.AsyncLock._releaser">
            <summary>
            资源释放器
            </summary>
        </member>
        <member name="F:Bing.Utils.Threading.Asyncs.AsyncLock._semaphore">
            <summary>
            异步信号量
            </summary>
        </member>
        <member name="M:Bing.Utils.Threading.Asyncs.AsyncLock.#ctor">
            <summary>
            初始一个<see cref="T:Bing.Utils.Threading.Asyncs.AsyncLock"/>类型的实例
            </summary>
        </member>
        <member name="M:Bing.Utils.Threading.Asyncs.AsyncLock.LockAsync">
            <summary>
            异步锁定
            </summary>
        </member>
        <member name="T:Bing.Utils.Threading.Asyncs.AsyncLock.Releaser">
            <summary>
            资源释放器
            </summary>
        </member>
        <member name="F:Bing.Utils.Threading.Asyncs.AsyncLock.Releaser._toRelease">
            <summary>
            即将释放资源的异步锁
            </summary>
        </member>
        <member name="M:Bing.Utils.Threading.Asyncs.AsyncLock.Releaser.#ctor(Bing.Utils.Threading.Asyncs.AsyncLock)">
            <summary>
            初始化一个<see cref="T:Bing.Utils.Threading.Asyncs.AsyncLock.Releaser"/>类型的实例
            </summary>
            <param name="toRelease">异步锁</param>
        </member>
        <member name="M:Bing.Utils.Threading.Asyncs.AsyncLock.Releaser.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:Bing.Utils.Threading.Asyncs.AsyncSemaphore">
            <summary>
            异步信号量
            </summary>
        </member>
        <member name="F:Bing.Utils.Threading.Asyncs.AsyncSemaphore.Completed">
            <summary>
            是否完成操作
            </summary>
        </member>
        <member name="F:Bing.Utils.Threading.Asyncs.AsyncSemaphore._waiters">
            <summary>
            等待队列
            </summary>
        </member>
        <member name="F:Bing.Utils.Threading.Asyncs.AsyncSemaphore._currentCount">
            <summary>
            当前计数器
            </summary>
        </member>
        <member name="M:Bing.Utils.Threading.Asyncs.AsyncSemaphore.#ctor(System.Int32)">
            <summary>
            初始化一个<see cref="T:Bing.Utils.Threading.Asyncs.AsyncSemaphore"/>类型的实例
            </summary>
            <param name="initialCount">初始化计数器</param>
        </member>
        <member name="M:Bing.Utils.Threading.Asyncs.AsyncSemaphore.WaitAsync">
            <summary>
            等待同步
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Threading.Asyncs.AsyncSemaphore.Release">
            <summary>
            释放
            </summary>
        </member>
        <member name="T:Bing.Utils.Threading.Locks.ReaderWriteLockDisposable">
            <summary>
            读写锁释放器
            </summary>
        </member>
        <member name="F:Bing.Utils.Threading.Locks.ReaderWriteLockDisposable._rwLock">
            <summary>
            读写锁
            </summary>
        </member>
        <member name="F:Bing.Utils.Threading.Locks.ReaderWriteLockDisposable._readerWriteLockType">
            <summary>
            读写锁类型
            </summary>
        </member>
        <member name="M:Bing.Utils.Threading.Locks.ReaderWriteLockDisposable.#ctor(System.Threading.ReaderWriterLockSlim,Bing.Utils.Threading.Locks.ReaderWriteLockType)">
            <summary>
            初始化一个<see cref="T:Bing.Utils.Threading.Locks.ReaderWriteLockDisposable"/>类型的实例
            </summary>
            <param name="rwLock">读写锁</param>
            <param name="readerWriteLockType">读写锁类型</param>
        </member>
        <member name="M:Bing.Utils.Threading.Locks.ReaderWriteLockDisposable.System#IDisposable#Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="T:Bing.Utils.Threading.Locks.ReaderWriteLockType">
            <summary>
            读写锁类型
            </summary>
        </member>
        <member name="F:Bing.Utils.Threading.Locks.ReaderWriteLockType.Read">
            <summary>
            读取
            </summary>
        </member>
        <member name="F:Bing.Utils.Threading.Locks.ReaderWriteLockType.Write">
            <summary>
            写入
            </summary>
        </member>
        <member name="F:Bing.Utils.Threading.Locks.ReaderWriteLockType.UpgradeableRead">
            <summary>
            更新并读取
            </summary>
        </member>
        <member name="T:Bing.Utils.Timing.DateRangeEnum">
            <summary>
            日期范围
            </summary>
        </member>
        <member name="F:Bing.Utils.Timing.DateRangeEnum.Week">
            <summary>
            周
            </summary>
        </member>
        <member name="F:Bing.Utils.Timing.DateRangeEnum.Month">
            <summary>
            月
            </summary>
        </member>
        <member name="F:Bing.Utils.Timing.DateRangeEnum.Quarter">
            <summary>
            季度
            </summary>
        </member>
        <member name="F:Bing.Utils.Timing.DateRangeEnum.HalfYear">
            <summary>
            半年
            </summary>
        </member>
        <member name="F:Bing.Utils.Timing.DateRangeEnum.Year">
            <summary>
            年
            </summary>
        </member>
        <member name="T:Bing.Utils.Timing.DateTimeExtensions">
            <summary>
            日期时间辅助扩展操作
            </summary>
        </member>
        <member name="F:Bing.Utils.Timing.DateTimeExtensions.Date1970">
            <summary>
            1970年1月1日
            </summary>
        </member>
        <member name="F:Bing.Utils.Timing.DateTimeExtensions.MinDate">
            <summary>
            最小日期
            </summary>
        </member>
        <member name="F:Bing.Utils.Timing.DateTimeExtensions.MaxDate">
            <summary>
            最大日期
            </summary>
        </member>
        <member name="F:Bing.Utils.Timing.DateTimeExtensions.InitialJavaScriptDateTicks">
            <summary>
            初始化js日期时间戳
            </summary>
        </member>
        <member name="M:Bing.Utils.Timing.DateTimeExtensions.IsWeekend(System.DateTime)">
            <summary>
            当前时间是否周末
            </summary>
            <param name="dateTime">时间点</param>
        </member>
        <member name="M:Bing.Utils.Timing.DateTimeExtensions.IsWeekday(System.DateTime)">
            <summary>
            当前时间是否工作日
            </summary>
            <param name="dateTime">时间点</param>
        </member>
        <member name="M:Bing.Utils.Timing.DateTimeExtensions.ToUniqueString(System.DateTime,System.Boolean)">
            <summary>
            获取时间相对唯一字符串
            </summary>
            <param name="dateTime">时间点</param>
            <param name="milsec">是否使用毫秒</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Timing.DateTimeExtensions.ToJsGetTime(System.DateTime,System.Boolean)">
            <summary>
            将时间转换为Js时间格式（Date.getTiem()）
            </summary>
            <param name="dateTime">时间点</param>
        </member>
        <member name="M:Bing.Utils.Timing.DateTimeExtensions.SetTime(System.DateTime,System.Int32,System.Int32,System.Int32)">
            <summary>
            设置时间，设置时分秒
            </summary>
            <param name="date">时间</param>
            <param name="hours">小时</param>
            <param name="minutes">分钟</param>
            <param name="seconds">秒</param>
            <returns>返回设置后的时间</returns>
        </member>
        <member name="M:Bing.Utils.Timing.DateTimeExtensions.SetTime(System.DateTime,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            设置时间，设置时分秒毫秒
            </summary>
            <param name="date">时间</param>
            <param name="hours">小时</param>
            <param name="minutes">分钟</param>
            <param name="seconds">秒</param>
            <param name="milliseconds">毫秒</param>
            <returns>返回设置后的时间</returns>
        </member>
        <member name="M:Bing.Utils.Timing.DateTimeExtensions.SetTime(System.DateTime,System.TimeSpan)">
            <summary>
            设置时间，设置时间间隔
            </summary>
            <param name="date">时间</param>
            <param name="time">时间间隔</param>
            <returns>返回设置后的时间</returns>
        </member>
        <member name="M:Bing.Utils.Timing.DateTimeExtensions.EndOfDay(System.DateTime)">
            <summary>
            设置指定时间为当天的结束时间。范例：yyyy-MM-dd 23:59:59.999
            </summary>
            <param name="date">指定时间</param>
            <returns>当天的结束时间</returns>
        </member>
        <member name="M:Bing.Utils.Timing.DateTimeExtensions.BeginOfDay(System.DateTime)">
            <summary>
            设置指定时间为当天的开始时间（凌晨）。范例：yyyy-MM-dd 00:00:00
            </summary>
            <param name="time">指定时间</param>
            <returns>当天的开始时间</returns>
        </member>
        <member name="M:Bing.Utils.Timing.DateTimeExtensions.EndOfMonth(System.DateTime)">
            <summary>
            设置指定时间为当月的结束时间。范例：yyyy-MM-dd 23:59:59:999
            </summary>
            <param name="date">时间</param>
            <returns>当月的结束时间</returns>
        </member>
        <member name="M:Bing.Utils.Timing.DateTimeExtensions.BeginOfMonth(System.DateTime)">
            <summary>
            设置指定时间为当月的开始时间。范例：yyyy-MM-01 00:00:00.000
            </summary>
            <param name="date">时间</param>
            <returns>当月的开始时间</returns>
        </member>
        <member name="M:Bing.Utils.Timing.DateTimeExtensions.GetFirstDayOfMonth(System.DateTime)">
            <summary>
            获取指定日期的月份第一天
            </summary>
            <param name="date">日期</param>
            <returns>月份第一天</returns>
        </member>
        <member name="M:Bing.Utils.Timing.DateTimeExtensions.GetFirstDayOfMonth(System.DateTime,System.DayOfWeek)">
            <summary>
            获取指定日期的月份第一天，指定星期几
            </summary>
            <param name="date">日期</param>
            <param name="dayOfWeek">星期几</param>
            <returns>月份第一天</returns>
        </member>
        <member name="M:Bing.Utils.Timing.DateTimeExtensions.GetLastDayOfMonth(System.DateTime)">
            <summary>
            获取指定日期的月份最后一天
            </summary>
            <param name="date">日期</param>
            <returns>最后一天</returns>
        </member>
        <member name="M:Bing.Utils.Timing.DateTimeExtensions.GetLastDayOfMonth(System.DateTime,System.DayOfWeek)">
            <summary>
            获取指定日期的月份最后一天，指定星期几
            </summary>
            <param name="date">日期</param>
            <param name="dayOfWeek">星期几</param>
            <returns>最后一天</returns>
        </member>
        <member name="M:Bing.Utils.Timing.DateTimeExtensions.GetCountDaysOfMonth(System.DateTime)">
            <summary>
            获取月总天数
            </summary>
            <param name="date">日期</param>
            <returns>月总天数</returns>
        </member>
        <member name="M:Bing.Utils.Timing.DateTimeExtensions.GetMillisecondsSince1970(System.DateTime)">
            <summary>
            获取当前毫秒数，毫秒数=1970年1月1日-当前时间，UNIX
            </summary>
            <param name="datetime">当前时间</param>
            <returns>毫秒数</returns>
        </member>
        <member name="M:Bing.Utils.Timing.DateTimeExtensions.CompareInterval(System.DateTime,System.DateTime,System.String)">
            <summary>
            计算两个时间的间隔
            </summary>
            <param name="begin">开始时间</param>
            <param name="end">结束时间</param>
            <param name="dateFormat">间隔格式(y:年,M:月,d:天,h:小时,m:分钟,s:秒,fff:毫秒)</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Timing.DateTimeExtensions.IsBetweenTime(System.DateTime,System.DateTime,System.DateTime)">
            <summary>
            判断当前时间是否在指定时间段内，格式：hh:mm:ss
            </summary>
            <param name="currentTime">当前时间</param>
            <param name="beginTime">开始时间</param>
            <param name="endTime">结束时间</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Timing.DateTimeExtensions.IsBetweenDate(System.DateTime,System.DateTime,System.DateTime)">
            <summary>
            判断当前时间是否在指定日期时间段内，格式：yyyy-MM-dd
            </summary>
            <param name="currentDate">当前日期</param>
            <param name="beginDate">开始日期</param>
            <param name="endDate">结束日期</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Timing.DateTimeExtensions.IsBetween(System.DateTime,System.DateTime,System.DateTime)">
            <summary>
            判断当前时间是否在指定时间范围内，格式：yyyy-MM-dd HH:mm:ss
            </summary>
            <param name="current">当前时间</param>
            <param name="begin">开始时间</param>
            <param name="end">结束时间</param>
        </member>
        <member name="M:Bing.Utils.Timing.DateTimeExtensions.IsValid(System.DateTime)">
            <summary>
            是否有效时间
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Timing.DateTimeExtensions.ToTimeStamp(System.DateTime)">
            <summary>
            将时间转换为时间戳
            </summary>
            <param name="time">时间</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Timing.DateTimeExtensions.CsharpTime2JavascriptTime(System.DateTime)">
            <summary>
            将C#时间转换为Javascript时间
            </summary>
            <param name="dateTime">时间</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Timing.DateTimeExtensions.PhpTime2CsharpTime(System.DateTime,System.Int64)">
            <summary>
            将PHP时间转换为C#时间
            </summary>
            <param name="dateTime">时间</param>
            <param name="time">PHP的时间</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Timing.DateTimeExtensions.CsharpTime2PhpTime(System.DateTime)">
            <summary>
            将C#时间转换为PHP时间
            </summary>
            <param name="dateTime">时间</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Timing.DateTimeExtensions.AddWeeks(System.DateTime,System.Int32)">
            <summary>
            添加星期
            </summary>
            <param name="dateTime">时间</param>
            <param name="weeks">周</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Timing.DateTimeExtensions.ConvertToTimeZone(System.DateTime,System.TimeZoneInfo)">
            <summary>
            将当前时间转换为特定时区的时间
            </summary>
            <param name="dateTime">时间</param>
            <param name="timeZone">时区</param>
            <returns></returns>
        </member>
        <member name="T:Bing.Utils.Timing.DateTimeHelper">
            <summary>
            时间操作辅助类
            </summary>
        </member>
        <member name="M:Bing.Utils.Timing.DateTimeHelper.GetDays(System.Int32)">
            <summary>
            获取指定年的总天数
            </summary>
            <param name="year">指定年</param>
        </member>
        <member name="M:Bing.Utils.Timing.DateTimeHelper.GetDays(System.Int32,System.Globalization.CultureInfo)">
            <summary>
            获取指定年的总天数，使用指定区域性
            </summary>
            <param name="year">指定年</param>
            <param name="culture">指定区域性</param>
        </member>
        <member name="M:Bing.Utils.Timing.DateTimeHelper.GetDays(System.DateTime)">
            <summary>
            获取指定时间的年的总天数
            </summary>
            <param name="date">指定时间</param>
        </member>
        <member name="M:Bing.Utils.Timing.DateTimeHelper.GetDays(System.DateTime,System.DateTime)">
            <summary>
            获取两个时间之间的天数
            </summary>
            <param name="fromDate">开始时间</param>
            <param name="toDate">结束时间</param>
        </member>
        <member name="M:Bing.Utils.Timing.DateTimeHelper.CalculateAge(System.DateTime)">
            <summary>
            计算年龄
            </summary>
            <param name="dateOfBirth">出生日期</param>
        </member>
        <member name="M:Bing.Utils.Timing.DateTimeHelper.CalculateAge(System.DateTime,System.DateTime)">
            <summary>
            计算年龄，指定参考日期
            </summary>
            <param name="dateOfBirth">出生日期</param>
            <param name="referenceDate">参考日期</param>
        </member>
        <member name="M:Bing.Utils.Timing.DateTimeHelper.BusinessDateFormat(System.DateTime)">
            <summary>
            业务时间格式化，返回:大于60天-"yyyy-MM-dd",31~60天-1个月前，15~30天-2周前,8~14天-1周前,1~7天-x天前 ,大于1小时-x小时前,x秒前
            </summary>
            <param name="dateTime">时间</param>
        </member>
        <member name="M:Bing.Utils.Timing.DateTimeHelper.BusinessDateFormat(System.DateTime,System.String)">
            <summary>
            获取时间字符串(小于5分-刚刚、5~60分-x分钟前、1~24小时-x小时前、1~60天-x天前、yyyy-MM-dd HH:mm:ss)
            </summary>
            <param name="dt"></param>
            <param name="defaultFormat"></param>
        </member>
        <member name="M:Bing.Utils.Timing.DateTimeHelper.GetWeekDay(System.String)">
            <summary>
            根据当前日期确定当前是星期几
            </summary>
            <param name="strDate">The string date.</param>
            <returns>System.String.</returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Bing.Utils.Timing.DateTimeHelper.GetWeekDay(System.DateTime)">
            <summary>
            根据当前日期确定当前是星期几
            </summary>
            <param name="dTime">The d time.</param>
            <returns>System.String.</returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Bing.Utils.Timing.DateTimeHelper.GetWeekDay(System.Int32)">
            <summary>
            转换星期的表示方法
            </summary>
            <param name="index">The index.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Bing.Utils.Timing.DateTimeHelper.GetChineseWeekDay(System.DayOfWeek)">
            <summary>
            转换星期的表示方法
            </summary>
            <param name="dayOfWeek">The index.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Bing.Utils.Timing.DateTimeHelper.GetMaxWeekOfYear(System.Int32)">
            <summary>
            获取当前年的最大周数
            </summary>
            <param name="year">The year.</param>
            <returns>System.Int32.</returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Bing.Utils.Timing.DateTimeHelper.GetMaxWeekOfYear(System.DateTime)">
            <summary>
            获取当前年的最大周数
            </summary>
            <param name="dTime">The d time.</param>
            <returns>System.Int32.</returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Bing.Utils.Timing.DateTimeHelper.GetWeekIndex(System.DateTime)">
            <summary>
            根据时间获取当前是第几周
            </summary>
            <param name="dTime">The d time.</param>
            <returns>System.Int32.</returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Bing.Utils.Timing.DateTimeHelper.GetWeekIndex(System.String)">
            <summary>
            根据时间获取当前是第几周
            </summary>
            <param name="strDate">The string date.</param>
            <returns>System.Int32.</returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Bing.Utils.Timing.DateTimeHelper.GetWeekRange(System.String,System.DateTime@,System.DateTime@)">
            <summary>
            根据时间取周的日期范围
            </summary>
            <param name="strDate">The string date.</param>
            <param name="startDate">开始日期</param>
            <param name="endDate">结束日期</param>
            <returns>System.String.</returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Bing.Utils.Timing.DateTimeHelper.GetWeekRange(System.DateTime,System.DateTime@,System.DateTime@)">
            <summary>
            根据时间取周的日期范围
            </summary>
            <param name="dTime">The d time.</param>
            <param name="startDate">开始日期</param>
            <param name="endDate">结束日期</param>
            <returns>System.String.</returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Bing.Utils.Timing.DateTimeHelper.GetWeekRange(System.Int32,System.Int32,System.DateTime@,System.DateTime@)">
            <summary>
            根据时间取周的日期范围
            </summary>
            <param name="year">The year.</param>
            <param name="weekIndex">Index of the week.</param>
            <param name="startDate">开始日期</param>
            <param name="endDate">结束日期</param>
            <returns>System.String.</returns>
            <exception cref="T:System.Exception">
            请输入大于0的整数
            or
            今年没有第 + weekIndex + 周。
            or
            </exception>
        </member>
        <member name="M:Bing.Utils.Timing.DateTimeHelper.GetWeekRange(System.Int32,System.DateTime@,System.DateTime@)">
            <summary>
            根据时间取周的日期范围
            </summary>
            <param name="weekIndex">Index of the week.</param>
            <param name="startDate">输出开始日期</param>
            <param name="endDate">输出结束日期</param>
            <returns>System.String.</returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Bing.Utils.Timing.DateTimeHelper.GetDateRange(Bing.Utils.Timing.DateRangeEnum,System.DateTime@,System.DateTime@)">
            <summary>
            获取当前的时间范围
            </summary>
            <param name="range"></param>
            <param name="startDate"></param>
            <param name="endDate"></param>
        </member>
        <member name="M:Bing.Utils.Timing.DateTimeHelper.GetDateRange(System.DateTime,Bing.Utils.Timing.DateRangeEnum,System.DateTime@,System.DateTime@)">
            <summary>
            获取当前时间范围
            </summary>
            <param name="date">当前日期</param>
            <param name="range">日期范围</param>
            <param name="startDate">输出开始日期</param>
            <param name="endDate">输出结束日期</param>
        </member>
        <member name="T:Bing.Utils.Timing.IDateTimeRange">
            <summary>
            时间范围
            </summary>
        </member>
        <member name="P:Bing.Utils.Timing.IDateTimeRange.StartTime">
            <summary>
            获取或设置 起始时间
            </summary>
        </member>
        <member name="P:Bing.Utils.Timing.IDateTimeRange.EndTime">
            <summary>
            获取或设置 结束时间
            </summary>
        </member>
        <member name="T:Bing.Utils.Timing.DateTimeRange">
            <summary>
            时间范围
            </summary>
        </member>
        <member name="P:Bing.Utils.Timing.DateTimeRange.StartTime">
            <summary>
            获取或设置 起始时间
            </summary>
        </member>
        <member name="P:Bing.Utils.Timing.DateTimeRange.EndTime">
            <summary>
            获取或设置 结束时间
            </summary>
        </member>
        <member name="P:Bing.Utils.Timing.DateTimeRange.Now">
            <summary>
            当前时间
            </summary>
        </member>
        <member name="P:Bing.Utils.Timing.DateTimeRange.Weeks">
            <summary>
            周列表
            </summary>
        </member>
        <member name="P:Bing.Utils.Timing.DateTimeRange.Yesterday">
            <summary>
            获取 昨天的时间范围
            </summary>
        </member>
        <member name="P:Bing.Utils.Timing.DateTimeRange.Today">
            <summary>
            获取 今天的时间范围
            </summary>
        </member>
        <member name="P:Bing.Utils.Timing.DateTimeRange.Tomorrow">
            <summary>
            获取 明天的时间范围
            </summary>
        </member>
        <member name="P:Bing.Utils.Timing.DateTimeRange.LastWeek">
            <summary>
            获取 上周的时间范围
            </summary>
        </member>
        <member name="P:Bing.Utils.Timing.DateTimeRange.ThisWeek">
            <summary>
            获取 本周的时间范围
            </summary>
        </member>
        <member name="P:Bing.Utils.Timing.DateTimeRange.NextWeek">
            <summary>
            获取 下周的时间范围
            </summary>
        </member>
        <member name="P:Bing.Utils.Timing.DateTimeRange.LastMonth">
            <summary>
            获取 上个月的时间范围
            </summary>
        </member>
        <member name="P:Bing.Utils.Timing.DateTimeRange.ThisMonth">
            <summary>
            获取 本月的时间范围
            </summary>
        </member>
        <member name="P:Bing.Utils.Timing.DateTimeRange.NextMonth">
            <summary>
            获取 下个月的时间范围
            </summary>
        </member>
        <member name="P:Bing.Utils.Timing.DateTimeRange.LastYear">
            <summary>
            获取 上一年的时间范围
            </summary>
        </member>
        <member name="P:Bing.Utils.Timing.DateTimeRange.ThisYear">
            <summary>
            获取 本年的时间范围
            </summary>
        </member>
        <member name="P:Bing.Utils.Timing.DateTimeRange.NextYear">
            <summary>
            获取 下一年的时间范围
            </summary>
        </member>
        <member name="P:Bing.Utils.Timing.DateTimeRange.Last7Days">
            <summary>
            获取 相对于当前时间过去7天的时间范围
            </summary>
        </member>
        <member name="P:Bing.Utils.Timing.DateTimeRange.Last30Days">
            <summary>
            获取 相对于当前时间过去30天的时间范围
            </summary>
        </member>
        <member name="P:Bing.Utils.Timing.DateTimeRange.Last7DaysExceptToday">
            <summary>
            获取 截止到昨天的最近7天的天数范围
            </summary>
        </member>
        <member name="P:Bing.Utils.Timing.DateTimeRange.Last30DaysExceptToday">
            <summary>
            获取 截止到昨天的最近30天的天数范围
            </summary>
        </member>
        <member name="M:Bing.Utils.Timing.DateTimeRange.#ctor">
            <summary>
            初始化一个<see cref="T:Bing.Utils.Timing.DateTimeRange"/>类型的实例
            </summary>
        </member>
        <member name="M:Bing.Utils.Timing.DateTimeRange.#ctor(System.DateTime,System.DateTime)">
            <summary>
            初始化一个<see cref="T:Bing.Utils.Timing.DateTimeRange"/>类型的实例
            </summary>
            <param name="startTime">起始时间</param>
            <param name="endTime">结束时间</param>
        </member>
        <member name="M:Bing.Utils.Timing.DateTimeRange.#ctor(Bing.Utils.Timing.IDateTimeRange)">
            <summary>
            初始化一个<see cref="T:Bing.Utils.Timing.DateTimeRange"/>类型的实例
            </summary>
            <param name="dateTimeRange">事件范围</param>
        </member>
        <member name="M:Bing.Utils.Timing.DateTimeRange.ToString">
            <summary>
            输出字符串
            </summary>
        </member>
        <member name="M:Bing.Utils.Timing.DateTimeRange.GetDays">
            <summary>
            获取两个时间之间的天数
            </summary>
        </member>
        <member name="M:Bing.Utils.Timing.DateTimeRange.GetHours">
            <summary>
            获取两个时间之间的小时数
            </summary>
        </member>
        <member name="M:Bing.Utils.Timing.DateTimeRange.GetMinutes">
            <summary>
            获取两个时间之间的分钟数
            </summary>
        </member>
        <member name="M:Bing.Utils.Timing.DateTimeRange.GetSeconds">
            <summary>
            获取两个时间之间的秒数
            </summary>
        </member>
        <member name="M:Bing.Utils.Timing.DateTimeRange.GetMilliseconds">
            <summary>
            获取两个时间之间的毫秒数
            </summary>
        </member>
        <member name="T:Bing.Utils.Webs.Clients.HttpContentType">
            <summary>
            Http 内容类型
            </summary>
        </member>
        <member name="F:Bing.Utils.Webs.Clients.HttpContentType.FormUrlEncoded">
            <summary>
            Form格式：application/x-www-form-urlencoded
            </summary>
        </member>
        <member name="F:Bing.Utils.Webs.Clients.HttpContentType.Json">
            <summary>
            JSON格式：application/json
            </summary>
        </member>
        <member name="F:Bing.Utils.Webs.Clients.HttpContentType.FormData">
            <summary>
            表单文件上传：multipart/form-data
            </summary>
        </member>
        <member name="F:Bing.Utils.Webs.Clients.HttpContentType.Xml">
            <summary>
            XML格式：text/xml
            </summary>
        </member>
        <member name="T:Bing.Utils.Webs.Clients.HttpRequest">
            <summary>
            Http请求
            </summary>
        </member>
        <member name="F:Bing.Utils.Webs.Clients.HttpRequest._successAction">
            <summary>
            执行成功的回调函数
            </summary>
        </member>
        <member name="F:Bing.Utils.Webs.Clients.HttpRequest._successStatusCodeAction">
            <summary>
            执行成功的回调函数
            </summary>
        </member>
        <member name="M:Bing.Utils.Webs.Clients.HttpRequest.#ctor(System.Net.Http.HttpMethod,System.String)">
            <summary>
            初始化一个<see cref="T:Bing.Utils.Webs.Clients.HttpRequest"/>类型的实例
            </summary>
            <param name="httpMethod">Http请求方法</param>
            <param name="url">请求地址</param>
        </member>
        <member name="M:Bing.Utils.Webs.Clients.HttpRequest.OnSuccess(System.Action{System.String})">
            <summary>
            请求成功回调函数
            </summary>
            <param name="action">执行成功的回调函数，参数为响应结果</param>
        </member>
        <member name="M:Bing.Utils.Webs.Clients.HttpRequest.OnSuccess(System.Action{System.String,System.Net.HttpStatusCode})">
            <summary>
            请求成功回调函数
            </summary>
            <param name="action">执行成功的回调函数，第一个参数为响应结果，第二个参数为状态码</param>
        </member>
        <member name="M:Bing.Utils.Webs.Clients.HttpRequest.SuccessHandler(System.String,System.Net.HttpStatusCode,System.String)">
            <summary>
            成功处理操作
            </summary>
            <param name="result">结果</param>
            <param name="statusCode">状态码</param>
            <param name="contentType">内容类型</param>
        </member>
        <member name="M:Bing.Utils.Webs.Clients.HttpRequest.ResultFromJsonAsync``1">
            <summary>
            获取Json结果
            </summary>
            <typeparam name="TResult">返回结果类型</typeparam>
        </member>
        <member name="T:Bing.Utils.Webs.Clients.HttpRequest`1">
            <summary>
            Http请求
            </summary>
            <typeparam name="TResult">结果类型</typeparam>
        </member>
        <member name="F:Bing.Utils.Webs.Clients.HttpRequest`1._successAction">
            <summary>
            执行成功的回调函数
            </summary>
        </member>
        <member name="F:Bing.Utils.Webs.Clients.HttpRequest`1._successStatusCodeAction">
            <summary>
            执行成功的回调函数
            </summary>
        </member>
        <member name="F:Bing.Utils.Webs.Clients.HttpRequest`1._convertAction">
            <summary>
            执行成功的转换函数
            </summary>
        </member>
        <member name="M:Bing.Utils.Webs.Clients.HttpRequest`1.#ctor(System.Net.Http.HttpMethod,System.String)">
            <summary>
            初始化一个<see cref="T:Bing.Utils.Webs.Clients.HttpRequest`1"/>类型的实例
            </summary>
            <param name="httpMethod">Http请求方法</param>
            <param name="url">请求地址</param>
        </member>
        <member name="M:Bing.Utils.Webs.Clients.HttpRequest`1.OnSuccess(System.Action{`0},System.Func{System.String,`0})">
            <summary>
            请求成功回调函数
            </summary>
            <param name="action">执行成功的回调函数，参数为响应结果</param>
            <param name="convertAction">将结果字符串转换为指定类型，当默认转换实现无法转换时使用</param>
        </member>
        <member name="M:Bing.Utils.Webs.Clients.HttpRequest`1.OnSuccess(System.Action{`0,System.Net.HttpStatusCode},System.Func{System.String,`0})">
            <summary>
            请求成功回调函数
            </summary>
            <param name="action">执行成功的回调函数，第一个参数为响应结果，第二个参数为状态码</param>
            <param name="convertAction">将结果字符串转换为指定类型，当默认转换实现无法转换时使用</param>
        </member>
        <member name="M:Bing.Utils.Webs.Clients.HttpRequest`1.SuccessHandler(System.String,System.Net.HttpStatusCode,System.String)">
            <summary>
            成功处理操作
            </summary>
            <param name="result">结果</param>
            <param name="statusCode">状态码</param>
            <param name="contentType">内容类型</param>
        </member>
        <member name="M:Bing.Utils.Webs.Clients.HttpRequest`1.ConvertTo(System.String,System.String)">
            <summary>
            将结果字符串转换为指定类型
            </summary>
            <param name="result">结果</param>
            <param name="contentType">内容类型</param>
        </member>
        <member name="M:Bing.Utils.Webs.Clients.HttpRequest`1.ResultFromJsonAsync">
            <summary>
            获取Json结果
            </summary>
        </member>
        <member name="T:Bing.Utils.Webs.Clients.HttpRequestBase`1">
            <summary>
            Http请求基类
            </summary>
            <typeparam name="TRequest">Http请求</typeparam>
        </member>
        <member name="F:Bing.Utils.Webs.Clients.HttpRequestBase`1._url">
            <summary>
            请求地址
            </summary>
        </member>
        <member name="F:Bing.Utils.Webs.Clients.HttpRequestBase`1._httpMethod">
            <summary>
            Http请求方法
            </summary>
        </member>
        <member name="F:Bing.Utils.Webs.Clients.HttpRequestBase`1._params">
            <summary>
            参数集合
            </summary>
        </member>
        <member name="F:Bing.Utils.Webs.Clients.HttpRequestBase`1._data">
            <summary>
            参数
            </summary>
        </member>
        <member name="F:Bing.Utils.Webs.Clients.HttpRequestBase`1._encoding">
            <summary>
            字符编码
            </summary>
        </member>
        <member name="F:Bing.Utils.Webs.Clients.HttpRequestBase`1._contentType">
            <summary>
            内容类型
            </summary>
        </member>
        <member name="F:Bing.Utils.Webs.Clients.HttpRequestBase`1._cookieContainer">
            <summary>
            Cookie容器
            </summary>
        </member>
        <member name="F:Bing.Utils.Webs.Clients.HttpRequestBase`1._timeout">
            <summary>
            超时时间
            </summary>
        </member>
        <member name="F:Bing.Utils.Webs.Clients.HttpRequestBase`1._headers">
            <summary>
            请求头集合
            </summary>
        </member>
        <member name="F:Bing.Utils.Webs.Clients.HttpRequestBase`1._failAction">
            <summary>
            执行失败的回调函数
            </summary>
        </member>
        <member name="F:Bing.Utils.Webs.Clients.HttpRequestBase`1._failStatusCodeAction">
            <summary>
            执行失败的回调函数
            </summary>
        </member>
        <member name="F:Bing.Utils.Webs.Clients.HttpRequestBase`1._serverCertificateCustomValidationCallback">
            <summary>
            ssl证书验证委托
            </summary>
        </member>
        <member name="F:Bing.Utils.Webs.Clients.HttpRequestBase`1._token">
            <summary>
            令牌
            </summary>
        </member>
        <member name="F:Bing.Utils.Webs.Clients.HttpRequestBase`1._files">
            <summary>
            文件集合
            </summary>
        </member>
        <member name="M:Bing.Utils.Webs.Clients.HttpRequestBase`1.#ctor(System.Net.Http.HttpMethod,System.String)">
            <summary>
            初始化一个<see cref="T:Bing.Utils.Webs.Clients.HttpRequestBase`1"/>类型的实例
            </summary>
            <param name="httpMethod">Http请求方法</param>
            <param name="url">请求地址</param>
        </member>
        <member name="M:Bing.Utils.Webs.Clients.HttpRequestBase`1.This">
            <summary>
            返回自身
            </summary>
        </member>
        <member name="M:Bing.Utils.Webs.Clients.HttpRequestBase`1.Encoding(System.Text.Encoding)">
            <summary>
            设置字符编码
            </summary>
            <param name="encoding">字符编码</param>
        </member>
        <member name="M:Bing.Utils.Webs.Clients.HttpRequestBase`1.Encoding(System.String)">
            <summary>
            设置字符编码
            </summary>
            <param name="encoding">字符编码</param>
        </member>
        <member name="M:Bing.Utils.Webs.Clients.HttpRequestBase`1.ContentType(Bing.Utils.Webs.Clients.HttpContentType)">
            <summary>
            设置内容类型
            </summary>
            <param name="contentType">内容类型</param>
        </member>
        <member name="M:Bing.Utils.Webs.Clients.HttpRequestBase`1.ContentType(System.String)">
            <summary>
            设置内容类型
            </summary>
            <param name="contentType">内容类型</param>
        </member>
        <member name="M:Bing.Utils.Webs.Clients.HttpRequestBase`1.Cookie(System.String,System.String,System.Double)">
            <summary>
            设置Cookie
            </summary>
            <param name="name">名称</param>
            <param name="value">值</param>
            <param name="expiresDate">有效时间，单位：天</param>
        </member>
        <member name="M:Bing.Utils.Webs.Clients.HttpRequestBase`1.Cookie(System.String,System.String,System.DateTime)">
            <summary>
            设置Cookie
            </summary>
            <param name="name">名称</param>
            <param name="value">值</param>
            <param name="expiresDate">到期时间</param>
        </member>
        <member name="M:Bing.Utils.Webs.Clients.HttpRequestBase`1.Cookie(System.String,System.String,System.String,System.String,System.Nullable{System.DateTime})">
            <summary>
            设置Cookie
            </summary>
            <param name="name">名称</param>
            <param name="value">值</param>
            <param name="path">源服务器URL子集</param>
            <param name="domain">所属域</param>
            <param name="expiresDate">到期时间</param>
        </member>
        <member name="M:Bing.Utils.Webs.Clients.HttpRequestBase`1.Cookie(System.Net.Cookie)">
            <summary>
            设置Cookie
            </summary>
            <param name="cookie">cookie</param>
        </member>
        <member name="M:Bing.Utils.Webs.Clients.HttpRequestBase`1.Timeout(System.Int32)">
            <summary>
            设置超时时间
            </summary>
            <param name="timeout">超时时间。单位：秒</param>
        </member>
        <member name="M:Bing.Utils.Webs.Clients.HttpRequestBase`1.Timeout(System.TimeSpan)">
            <summary>
            设置超时时间
            </summary>
            <param name="timeout">超时时间</param>
        </member>
        <member name="M:Bing.Utils.Webs.Clients.HttpRequestBase`1.Header``1(System.String,``0)">
            <summary>
            设置请求头
            </summary>
            <typeparam name="T">值类型</typeparam>
            <param name="key">键</param>
            <param name="value">值</param>
        </member>
        <member name="M:Bing.Utils.Webs.Clients.HttpRequestBase`1.Data(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            添加参数字典
            </summary>
            <param name="parameters">参数字典</param>
        </member>
        <member name="M:Bing.Utils.Webs.Clients.HttpRequestBase`1.Data(System.String,System.Object)">
            <summary>
            添加参数
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
        </member>
        <member name="M:Bing.Utils.Webs.Clients.HttpRequestBase`1.JsonData``1(``0)">
            <summary>
            添加Json参数
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="value">值</param>
        </member>
        <member name="M:Bing.Utils.Webs.Clients.HttpRequestBase`1.XmlData(System.String)">
            <summary>
            添加Xml参数
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:Bing.Utils.Webs.Clients.HttpRequestBase`1.FileData(System.String)">
            <summary>
            添加文件参数
            </summary>
            <param name="filePath">文件路径</param>
        </member>
        <member name="M:Bing.Utils.Webs.Clients.HttpRequestBase`1.FileData(System.String,System.String)">
            <summary>
            添加文件参数
            </summary>
            <param name="name">参数名</param>
            <param name="filePath">文件路径</param>
        </member>
        <member name="M:Bing.Utils.Webs.Clients.HttpRequestBase`1.OnFail(System.Action{System.String})">
            <summary>
            请求失败回调函数
            </summary>
            <param name="action">执行失败的回调函数，参数为响应结果</param>
        </member>
        <member name="M:Bing.Utils.Webs.Clients.HttpRequestBase`1.OnFail(System.Action{System.String,System.Net.HttpStatusCode})">
            <summary>
            请求失败回调函数
            </summary>
            <param name="action">执行失败的回调函数，第一个参数为响应结果，第二个参数为状态码</param>
        </member>
        <member name="M:Bing.Utils.Webs.Clients.HttpRequestBase`1.IgnoreSsl">
            <summary>
            忽略Ssl
            </summary>
        </member>
        <member name="M:Bing.Utils.Webs.Clients.HttpRequestBase`1.BearerToken(System.String)">
            <summary>
            设置Bearer令牌
            </summary>
            <param name="token">令牌</param>
        </member>
        <member name="M:Bing.Utils.Webs.Clients.HttpRequestBase`1.ResultAsync">
            <summary>
            获取结果
            </summary>
        </member>
        <member name="M:Bing.Utils.Webs.Clients.HttpRequestBase`1.SendBefore">
            <summary>
            发送前操作
            </summary>
        </member>
        <member name="M:Bing.Utils.Webs.Clients.HttpRequestBase`1.SendAsync">
            <summary>
            发送请求
            </summary>
        </member>
        <member name="M:Bing.Utils.Webs.Clients.HttpRequestBase`1.CreateHttpClient">
            <summary>
            创建Http客户端
            </summary>
        </member>
        <member name="M:Bing.Utils.Webs.Clients.HttpRequestBase`1.InitHttpClient(System.Net.Http.HttpClient)">
            <summary>
            初始化Http客户端
            </summary>
            <param name="client">Http客户端</param>
        </member>
        <member name="M:Bing.Utils.Webs.Clients.HttpRequestBase`1.CreateRequestMessage">
            <summary>
            创建请求消息
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bing.Utils.Webs.Clients.HttpRequestBase`1.CreateHttpContent">
            <summary>
            创建请求内容
            </summary>
        </member>
        <member name="M:Bing.Utils.Webs.Clients.HttpRequestBase`1.CreateJsonContent">
            <summary>
            创建Json内容
            </summary>
        </member>
        <member name="M:Bing.Utils.Webs.Clients.HttpRequestBase`1.CreateXmlContent">
            <summary>
            创建Xml内容
            </summary>
        </member>
        <member name="M:Bing.Utils.Webs.Clients.HttpRequestBase`1.CreateMultipartFormDataContent">
            <summary>
            创建表单内容
            </summary>
        </member>
        <member name="M:Bing.Utils.Webs.Clients.HttpRequestBase`1.SendAfter(System.String,System.Net.Http.HttpResponseMessage)">
            <summary>
            发送后操作
            </summary>
            <param name="result">结果</param>
            <param name="response">Http响应消息</param>
        </member>
        <member name="M:Bing.Utils.Webs.Clients.HttpRequestBase`1.GetContentType(System.Net.Http.HttpResponseMessage)">
            <summary>
            获取内容类型
            </summary>
            <param name="response">Http响应消息</param>
        </member>
        <member name="M:Bing.Utils.Webs.Clients.HttpRequestBase`1.SuccessHandler(System.String,System.Net.HttpStatusCode,System.String)">
            <summary>
            成功处理操作
            </summary>
            <param name="result">结果</param>
            <param name="statusCode">状态码</param>
            <param name="contentType">内容类型</param>
        </member>
        <member name="M:Bing.Utils.Webs.Clients.HttpRequestBase`1.FailHandler(System.String,System.Net.HttpStatusCode,System.String)">
            <summary>
            失败处理操作
            </summary>
            <param name="result">结果</param>
            <param name="statusCode">状态码</param>
            <param name="contentType">内容类型</param>
        </member>
        <member name="T:Bing.Utils.Webs.Clients.IHttpRequest">
            <summary>
            Http请求
            </summary>
        </member>
        <member name="M:Bing.Utils.Webs.Clients.IHttpRequest.OnSuccess(System.Action{System.String})">
            <summary>
            请求成功回调函数
            </summary>
            <param name="action">执行成功的回调函数，参数为响应结果</param>
        </member>
        <member name="M:Bing.Utils.Webs.Clients.IHttpRequest.OnSuccess(System.Action{System.String,System.Net.HttpStatusCode})">
            <summary>
            请求成功回调函数
            </summary>
            <param name="action">执行成功的回调函数，第一个参数为响应结果，第二个参数为状态码</param>
        </member>
        <member name="M:Bing.Utils.Webs.Clients.IHttpRequest.ResultFromJsonAsync``1">
            <summary>
            获取Json结果
            </summary>
            <typeparam name="TResult">返回结果类型</typeparam>
        </member>
        <member name="T:Bing.Utils.Webs.Clients.IHttpRequest`1">
            <summary>
            Http请求
            </summary>
            <typeparam name="TResult">结果类型</typeparam>
        </member>
        <member name="M:Bing.Utils.Webs.Clients.IHttpRequest`1.OnSuccess(System.Action{`0},System.Func{System.String,`0})">
            <summary>
            请求成功回调函数
            </summary>
            <param name="action">执行成功的回调函数，参数为响应结果</param>
            <param name="convertAction">将结果字符串转换为指定类型，当默认转换实现无法转换时使用</param>
        </member>
        <member name="M:Bing.Utils.Webs.Clients.IHttpRequest`1.OnSuccess(System.Action{`0,System.Net.HttpStatusCode},System.Func{System.String,`0})">
            <summary>
            请求成功回调函数
            </summary>
            <param name="action">执行成功的回调函数，第一个参数为响应结果，第二个参数为状态码</param>
            <param name="convertAction">将结果字符串转换为指定类型，当默认转换实现无法转换时使用</param>
        </member>
        <member name="M:Bing.Utils.Webs.Clients.IHttpRequest`1.ResultFromJsonAsync">
            <summary>
            获取Json结果
            </summary>
        </member>
        <member name="T:Bing.Utils.Webs.Clients.Internal.HttpClientBuilderFactory">
            <summary>
            HttpClient 生成工厂
            </summary>
        </member>
        <member name="F:Bing.Utils.Webs.Clients.Internal.HttpClientBuilderFactory._httpClients">
            <summary>
            HttpClient 字典
            </summary>
        </member>
        <member name="F:Bing.Utils.Webs.Clients.Internal.HttpClientBuilderFactory._domainRegex">
            <summary>
            域名正则表达式
            </summary>
        </member>
        <member name="M:Bing.Utils.Webs.Clients.Internal.HttpClientBuilderFactory.CreateClient(System.String,System.TimeSpan)">
            <summary>
            创建Http客户端
            </summary>
            <param name="url">请求地址</param>
            <param name="timeout">超时时间</param>
        </member>
        <member name="M:Bing.Utils.Webs.Clients.Internal.HttpClientBuilderFactory.GetDomainByUrl(System.String)">
            <summary>
            通过Url地址获取域名
            </summary>
            <param name="url">Url地址</param>
        </member>
        <member name="M:Bing.Utils.Webs.Clients.Internal.HttpClientBuilderFactory.Create(System.TimeSpan)">
            <summary>
            创建Http客户端
            </summary>
        </member>
        <member name="T:Bing.Utils.Webs.Clients.IRequest`1">
            <summary>
            Http请求
            </summary>
            <typeparam name="TRequest">Http请求</typeparam>
        </member>
        <member name="M:Bing.Utils.Webs.Clients.IRequest`1.Encoding(System.Text.Encoding)">
            <summary>
            设置字符编码
            </summary>
            <param name="encoding">字符编码</param>
        </member>
        <member name="M:Bing.Utils.Webs.Clients.IRequest`1.Encoding(System.String)">
            <summary>
            设置字符编码
            </summary>
            <param name="encoding">字符编码，范例：gb2312</param>
        </member>
        <member name="M:Bing.Utils.Webs.Clients.IRequest`1.ContentType(Bing.Utils.Webs.Clients.HttpContentType)">
            <summary>
            设置内容类型
            </summary>
            <param name="contentType">内容类型</param>
        </member>
        <member name="M:Bing.Utils.Webs.Clients.IRequest`1.ContentType(System.String)">
            <summary>
            设置内容类型
            </summary>
            <param name="contentType">内容类型</param>
        </member>
        <member name="M:Bing.Utils.Webs.Clients.IRequest`1.Cookie(System.String,System.String,System.Double)">
            <summary>
            设置Cookie
            </summary>
            <param name="name">名称</param>
            <param name="value">值</param>
            <param name="expiresDate">有效时间，单位：天</param>
        </member>
        <member name="M:Bing.Utils.Webs.Clients.IRequest`1.Cookie(System.String,System.String,System.DateTime)">
            <summary>
            设置Cookie
            </summary>
            <param name="name">名称</param>
            <param name="value">值</param>
            <param name="expiresDate">到期时间</param>
        </member>
        <member name="M:Bing.Utils.Webs.Clients.IRequest`1.Cookie(System.String,System.String,System.String,System.String,System.Nullable{System.DateTime})">
            <summary>
            设置Cookie
            </summary>
            <param name="name">名称</param>
            <param name="value">值</param>
            <param name="path">源服务器URL子集</param>
            <param name="domain">所属域</param>
            <param name="expiresDate">到期时间</param>
        </member>
        <member name="M:Bing.Utils.Webs.Clients.IRequest`1.Cookie(System.Net.Cookie)">
            <summary>
            设置Cookie
            </summary>
            <param name="cookie">cookie</param>
        </member>
        <member name="M:Bing.Utils.Webs.Clients.IRequest`1.BearerToken(System.String)">
            <summary>
            设置Bearer令牌
            </summary>
            <param name="token">令牌</param>
        </member>
        <member name="M:Bing.Utils.Webs.Clients.IRequest`1.Timeout(System.Int32)">
            <summary>
            设置超时时间
            </summary>
            <param name="timeout">超时时间。单位：秒</param>
        </member>
        <member name="M:Bing.Utils.Webs.Clients.IRequest`1.Timeout(System.TimeSpan)">
            <summary>
            设置超时时间
            </summary>
            <param name="timeout">超时时间</param>
        </member>
        <member name="M:Bing.Utils.Webs.Clients.IRequest`1.Header``1(System.String,``0)">
            <summary>
            设置请求头
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="key">键</param>
            <param name="value">值</param>
        </member>
        <member name="M:Bing.Utils.Webs.Clients.IRequest`1.Data(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            添加参数字典
            </summary>
            <param name="parameters">参数字典</param>
        </member>
        <member name="M:Bing.Utils.Webs.Clients.IRequest`1.Data(System.String,System.Object)">
            <summary>
            添加参数
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
        </member>
        <member name="M:Bing.Utils.Webs.Clients.IRequest`1.JsonData``1(``0)">
            <summary>
            添加Json参数
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="value">值</param>
        </member>
        <member name="M:Bing.Utils.Webs.Clients.IRequest`1.XmlData(System.String)">
            <summary>
            添加Xml参数
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:Bing.Utils.Webs.Clients.IRequest`1.FileData(System.String)">
            <summary>
            添加文件参数
            </summary>
            <param name="filePath">文件路径</param>
        </member>
        <member name="M:Bing.Utils.Webs.Clients.IRequest`1.FileData(System.String,System.String)">
            <summary>
            添加文件参数
            </summary>
            <param name="name">参数名</param>
            <param name="filePath">文件路径</param>
        </member>
        <member name="M:Bing.Utils.Webs.Clients.IRequest`1.OnFail(System.Action{System.String})">
            <summary>
            请求失败回调函数
            </summary>
            <param name="action">执行失败的回调函数，参数为响应结果</param>
        </member>
        <member name="M:Bing.Utils.Webs.Clients.IRequest`1.OnFail(System.Action{System.String,System.Net.HttpStatusCode})">
            <summary>
            请求失败回调函数
            </summary>
            <param name="action">执行失败的回调函数，第一个参数为响应结果，第二个参数为状态码</param>
        </member>
        <member name="M:Bing.Utils.Webs.Clients.IRequest`1.IgnoreSsl">
            <summary>
            忽略Ssl
            </summary>
        </member>
        <member name="M:Bing.Utils.Webs.Clients.IRequest`1.ResultAsync">
            <summary>
            获取结果
            </summary>
        </member>
        <member name="T:Bing.Utils.Webs.Clients.Parameters.IFileParameter">
            <summary>
            文件参数
            </summary>
        </member>
        <member name="M:Bing.Utils.Webs.Clients.Parameters.IFileParameter.GetFileStream">
            <summary>
            获取文件流
            </summary>
        </member>
        <member name="M:Bing.Utils.Webs.Clients.Parameters.IFileParameter.GetFileName">
            <summary>
            获取文件名称
            </summary>
        </member>
        <member name="M:Bing.Utils.Webs.Clients.Parameters.IFileParameter.GetName">
            <summary>
            获取参数名
            </summary>
        </member>
        <member name="T:Bing.Utils.Webs.Clients.Parameters.PhysicalFileParameter">
            <summary>
            物理文件参数
            </summary>
        </member>
        <member name="F:Bing.Utils.Webs.Clients.Parameters.PhysicalFileParameter._stream">
            <summary>
            文件流
            </summary>
        </member>
        <member name="P:Bing.Utils.Webs.Clients.Parameters.PhysicalFileParameter.AbsolutePath">
            <summary>
            绝对路径
            </summary>
        </member>
        <member name="P:Bing.Utils.Webs.Clients.Parameters.PhysicalFileParameter.Name">
            <summary>
            参数名
            </summary>
        </member>
        <member name="M:Bing.Utils.Webs.Clients.Parameters.PhysicalFileParameter.#ctor(System.String)">
            <summary>
            初始化一个<see cref="T:Bing.Utils.Webs.Clients.Parameters.PhysicalFileParameter"/>类型的实例
            </summary>
            <param name="absolutePath">绝对路径</param>
        </member>
        <member name="M:Bing.Utils.Webs.Clients.Parameters.PhysicalFileParameter.#ctor(System.String,System.String)">
            <summary>
            初始化一个<see cref="T:Bing.Utils.Webs.Clients.Parameters.PhysicalFileParameter"/>类型的实例
            </summary>
            <param name="absolutePath">绝对路径</param>
            <param name="name">参数名</param>
        </member>
        <member name="M:Bing.Utils.Webs.Clients.Parameters.PhysicalFileParameter.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:Bing.Utils.Webs.Clients.Parameters.PhysicalFileParameter.GetFileStream">
            <summary>
            获取文件流
            </summary>
        </member>
        <member name="M:Bing.Utils.Webs.Clients.Parameters.PhysicalFileParameter.GetFileName">
            <summary>
            获取文件名
            </summary>
        </member>
        <member name="M:Bing.Utils.Webs.Clients.Parameters.PhysicalFileParameter.GetName">
            <summary>
            获取参数名
            </summary>
        </member>
        <member name="T:Bing.Utils.Webs.Clients.WebClient">
            <summary>
            Web客户端
            </summary>
        </member>
        <member name="M:Bing.Utils.Webs.Clients.WebClient.Get(System.String)">
            <summary>
            Get请求
            </summary>
            <param name="url">请求地址</param>
        </member>
        <member name="M:Bing.Utils.Webs.Clients.WebClient.Post(System.String)">
            <summary>
            Post请求
            </summary>
            <param name="url">请求地址</param>
        </member>
        <member name="M:Bing.Utils.Webs.Clients.WebClient.Put(System.String)">
            <summary>
            Put请求
            </summary>
            <param name="url">请求地址</param>
        </member>
        <member name="M:Bing.Utils.Webs.Clients.WebClient.Delete(System.String)">
            <summary>
            Delete请求
            </summary>
            <param name="url">请求地址</param>
        </member>
        <member name="T:Bing.Utils.Webs.Clients.WebClient`1">
            <summary>
            Web客户端
            </summary>
            <typeparam name="TResult">返回的结果类型</typeparam>
        </member>
        <member name="M:Bing.Utils.Webs.Clients.WebClient`1.Get(System.String)">
            <summary>
            Get请求
            </summary>
            <param name="url">请求地址</param>
        </member>
        <member name="M:Bing.Utils.Webs.Clients.WebClient`1.Post(System.String)">
            <summary>
            Post请求
            </summary>
            <param name="url">请求地址</param>
        </member>
        <member name="M:Bing.Utils.Webs.Clients.WebClient`1.Put(System.String)">
            <summary>
            Put请求
            </summary>
            <param name="url">请求地址</param>
        </member>
        <member name="M:Bing.Utils.Webs.Clients.WebClient`1.Delete(System.String)">
            <summary>
            Delete请求
            </summary>
            <param name="url">请求地址</param>
        </member>
        <member name="T:Bing.Utils.Webs.CookieHelper">
            <summary>
            Cookie 操作辅助类
            </summary>
        </member>
        <member name="M:Bing.Utils.Webs.CookieHelper.GetCookie(System.String)">
            <summary>
            获取 Cookie 值
            </summary>
            <param name="name">名称</param>
        </member>
        <member name="M:Bing.Utils.Webs.CookieHelper.GetCookie(Microsoft.AspNetCore.Http.HttpContext,System.String)">
            <summary>
            获取 Cookie 值
            </summary>
            <param name="context">Http上下文</param>
            <param name="name">名称</param>
        </member>
        <member name="M:Bing.Utils.Webs.CookieHelper.WriteCookie(System.String,System.String)">
            <summary>
            写入 Cookie 值。未设置过期时间，则写的是浏览器进程Cookie，一旦浏览器(是浏览器，而非标签页)关闭，则Cookie自动失效
            </summary>
            <param name="name">名称</param>
            <param name="value">值</param>
        </member>
        <member name="M:Bing.Utils.Webs.CookieHelper.WriteCookie(Microsoft.AspNetCore.Http.HttpContext,System.String,System.String)">
            <summary>
            写入 Cookie 值。未设置过期时间，则写的是浏览器进程Cookie，一旦浏览器(是浏览器，而非标签页)关闭，则Cookie自动失效
            </summary>
            <param name="context">Http上下文</param>
            <param name="name">名称</param>
            <param name="value">值</param>
        </member>
        <member name="M:Bing.Utils.Webs.CookieHelper.ClearCookie">
            <summary>
            清空 Cookie
            </summary>
        </member>
        <member name="M:Bing.Utils.Webs.CookieHelper.ClearCookie(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            清空 Cookie
            </summary>
            <param name="context">Http上下文</param>
        </member>
        <member name="T:Bing.Utils.Webs.UserAgentHelper">
            <summary>
            UserAgent操作辅助类
            </summary>
        </member>
        <member name="P:Bing.Utils.Webs.UserAgentHelper.OperationSystemDict">
            <summary>
            操作系统字典
            </summary>
        </member>
        <member name="M:Bing.Utils.Webs.UserAgentHelper.GetOperatingSystemName(System.String)">
            <summary>
            根据 UserAgent 获取操作系统名称
            </summary>
            <param name="userAgent">UA</param>
        </member>
        <member name="M:Bing.Utils.Webs.UserAgentHelper.GetBrowserName(System.String)">
            <summary>
            根据 UserAgent 获取浏览器名称
            </summary>
            <param name="userAgent">UA</param>
        </member>
        <member name="M:Bing.Utils.Webs.UserAgentHelper.IsWechatBrowser(System.String)">
            <summary>
            是否微信浏览器
            </summary>
            <param name="userAgent">UA</param>
        </member>
        <member name="T:Bing.Utils.Webs.UserAgentInfo">
            <summary>
            用户代理信息
            参考地址：https://github.com/mumuy/browser/blob/master/Browser.js
            </summary>
        </member>
        <member name="P:Bing.Utils.Webs.UserAgentInfo.Browser">
            <summary>
            浏览器
            </summary>
        </member>
        <member name="P:Bing.Utils.Webs.UserAgentInfo.Version">
            <summary>
            版本号
            </summary>
        </member>
        <member name="P:Bing.Utils.Webs.UserAgentInfo.Engine">
            <summary>
            内核
            </summary>
        </member>
        <member name="P:Bing.Utils.Webs.UserAgentInfo.Os">
            <summary>
            操作系统
            </summary>
        </member>
        <member name="P:Bing.Utils.Webs.UserAgentInfo.OsVersion">
            <summary>
            操作系统版本号
            </summary>
        </member>
        <member name="P:Bing.Utils.Webs.UserAgentInfo.Device">
            <summary>
            设备
            </summary>
        </member>
        <member name="P:Bing.Utils.Webs.UserAgentInfo.Language">
            <summary>
            语言
            </summary>
        </member>
    </members>
</doc>
