<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Bing</name>
    </assembly>
    <members>
        <member name="T:Bing.Applications.Commands.ICommand`2">
            <summary>
            命令
            </summary>
            <typeparam name="TRequest">请求类型</typeparam>
            <typeparam name="TResponse">响应类型</typeparam>
        </member>
        <member name="M:Bing.Applications.Commands.ICommand`2.Execute(`0)">
            <summary>
            执行
            </summary>
            <param name="request">请求参数</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Applications.Commands.ICommand`2.ExecuteAsync(`0)">
            <summary>
            执行
            </summary>
            <param name="request">请求参数</param>
            <returns></returns>
        </member>
        <member name="T:Bing.Applications.Commands.ICommandFactory">
            <summary>
            命令工厂
            </summary>
        </member>
        <member name="M:Bing.Applications.Commands.ICommandFactory.Create``2(System.String)">
            <summary>
            创建命令
            </summary>
            <typeparam name="TRequest">请求类型</typeparam>
            <typeparam name="TResponse">响应类型</typeparam>
            <param name="name">命令名称</param>
            <returns></returns>
        </member>
        <member name="T:Bing.Applications.Dtos.DtoBase">
            <summary>
            数据传输对象
            </summary>
        </member>
        <member name="P:Bing.Applications.Dtos.DtoBase.Id">
            <summary>
            标识
            </summary>
        </member>
        <member name="T:Bing.Applications.Dtos.IDto">
            <summary>
            数据传输对象
            </summary>
        </member>
        <member name="T:Bing.Applications.Dtos.IKey">
            <summary>
            标识
            </summary>
        </member>
        <member name="P:Bing.Applications.Dtos.IKey.Id">
            <summary>
            标识
            </summary>
        </member>
        <member name="T:Bing.Applications.Dtos.IRequest">
            <summary>
            请求对象
            </summary>
        </member>
        <member name="T:Bing.Applications.Dtos.IResponse">
            <summary>
            响应对象
            </summary>
        </member>
        <member name="T:Bing.Applications.Dtos.NullableIdDto`1">
            <summary>
            可空标识数据传输对象
            </summary>
            <typeparam name="TId">标识类型</typeparam>
        </member>
        <member name="P:Bing.Applications.Dtos.NullableIdDto`1.Id">
            <summary>
            标识
            </summary>
        </member>
        <member name="M:Bing.Applications.Dtos.NullableIdDto`1.#ctor">
            <summary>
            初始化一个<see cref="T:Bing.Applications.Dtos.NullableIdDto`1"/>类型的实例
            </summary>
        </member>
        <member name="M:Bing.Applications.Dtos.NullableIdDto`1.#ctor(System.Nullable{`0})">
            <summary>
            初始化一个<see cref="T:Bing.Applications.Dtos.NullableIdDto`1"/>类型的实例
            </summary>
            <param name="id">标识</param>
        </member>
        <member name="T:Bing.Applications.Dtos.NullableIdDto">
            <summary>
            可空标识数据传输对象
            </summary>
        </member>
        <member name="M:Bing.Applications.Dtos.NullableIdDto.#ctor">
            <summary>
            初始化一个<see cref="T:Bing.Applications.Dtos.NullableIdDto"/>类型的实例
            </summary>
        </member>
        <member name="M:Bing.Applications.Dtos.NullableIdDto.#ctor(System.Nullable{System.Guid})">
            <summary>
            初始化一个<see cref="T:Bing.Applications.Dtos.NullableIdDto"/>类型的实例
            </summary>
            <param name="id">标识</param>
        </member>
        <member name="T:Bing.Applications.Dtos.RequestBase">
            <summary>
            请求对象
            </summary>
        </member>
        <member name="M:Bing.Applications.Dtos.RequestBase.Validate">
            <summary>
            验证
            </summary>
            <returns></returns>
        </member>
        <member name="T:Bing.Applications.IQueryService`2">
            <summary>
            查询服务
            </summary>
            <typeparam name="TDto">数据传输对象类型</typeparam>
            <typeparam name="TQueryParameter">查询参数类型</typeparam>
        </member>
        <member name="T:Bing.Applications.IService">
            <summary>
            应用服务
            </summary>
        </member>
        <member name="T:Bing.Applications.Operations.IGetAll`1">
            <summary>
            获取全部数据
            </summary>
            <typeparam name="TDto">数据传输对象类型</typeparam>
        </member>
        <member name="M:Bing.Applications.Operations.IGetAll`1.GetAll">
            <summary>
            获取全部
            </summary>
        </member>
        <member name="T:Bing.Applications.Operations.IGetAllAsync`1">
            <summary>
            获取全部数据
            </summary>
            <typeparam name="TDto">数据传输对象类型</typeparam>
        </member>
        <member name="M:Bing.Applications.Operations.IGetAllAsync`1.GetAllAsync">
            <summary>
            获取全部
            </summary>
        </member>
        <member name="T:Bing.Applications.Operations.IGetById`1">
            <summary>
            获取指定标识实体
            </summary>
            <typeparam name="TDto">数据传输对象类型</typeparam>
        </member>
        <member name="M:Bing.Applications.Operations.IGetById`1.GetById(System.Object)">
            <summary>
            通过编号获取
            </summary>
            <param name="id">实体编号</param>
        </member>
        <member name="M:Bing.Applications.Operations.IGetById`1.GetByIds(System.String)">
            <summary>
            通过编号列表获取
            </summary>
            <param name="ids">用逗号分隔的Id列表，范例："1,2"</param>
        </member>
        <member name="T:Bing.Applications.Operations.IGetByIdAsync`1">
            <summary>
            获取指定标识实体
            </summary>
            <typeparam name="TDto">数据传输对象类型</typeparam>
        </member>
        <member name="M:Bing.Applications.Operations.IGetByIdAsync`1.GetByIdAsync(System.Object)">
            <summary>
            通过编号获取
            </summary>
            <param name="id">实体编号</param>
        </member>
        <member name="M:Bing.Applications.Operations.IGetByIdAsync`1.GetByIdsAsync(System.String)">
            <summary>
            通过编号列表获取
            </summary>
            <param name="ids">用逗号分隔带额Id列表，范例："1,2"</param>
        </member>
        <member name="T:Bing.Applications.Operations.IPageQuery`2">
            <summary>
            分页查询
            </summary>
            <typeparam name="TDto">数据传输对象类型</typeparam>
            <typeparam name="TQueryParameter">查询参数类型</typeparam>
        </member>
        <member name="M:Bing.Applications.Operations.IPageQuery`2.Query(`1)">
            <summary>
            查询
            </summary>
            <param name="parameter">查询参数</param>
        </member>
        <member name="M:Bing.Applications.Operations.IPageQuery`2.PagerQuery(`1)">
            <summary>
            分页查询
            </summary>
            <param name="parameter">查询参数</param>
        </member>
        <member name="T:Bing.Applications.Operations.IPageQueryAsync`2">
            <summary>
            分页查询
            </summary>
            <typeparam name="TDto">数据传输对象类型</typeparam>
            <typeparam name="TQueryParameter">查询参数类型</typeparam>
        </member>
        <member name="M:Bing.Applications.Operations.IPageQueryAsync`2.QueryAsync(`1)">
            <summary>
            查询
            </summary>
            <param name="parameter">查询参数</param>
        </member>
        <member name="M:Bing.Applications.Operations.IPageQueryAsync`2.PagerQueryAsync(`1)">
            <summary>
            分页查询
            </summary>
            <param name="parameter">查询参数</param>
        </member>
        <member name="T:Bing.Aspects.Base.InterceptorBase">
            <summary>
            拦截器基类
            </summary>
        </member>
        <member name="T:Bing.Aspects.Base.ParameterInterceptorBase">
            <summary>
            参数拦截器基类
            </summary>
        </member>
        <member name="T:Bing.Aspects.IgnoreAttribute">
            <summary>
            忽略拦截 属性
            </summary>
        </member>
        <member name="T:Bing.Aspects.NotEmptyAttribute">
            <summary>
            验证不能为空
            </summary>
        </member>
        <member name="M:Bing.Aspects.NotEmptyAttribute.Invoke(AspectCore.DynamicProxy.Parameters.ParameterAspectContext,AspectCore.DynamicProxy.Parameters.ParameterAspectDelegate)">
            <summary>
            执行
            </summary>
        </member>
        <member name="T:Bing.Aspects.NotNullAttribute">
            <summary>
            验证不能为null
            </summary>
        </member>
        <member name="M:Bing.Aspects.NotNullAttribute.Invoke(AspectCore.DynamicProxy.Parameters.ParameterAspectContext,AspectCore.DynamicProxy.Parameters.ParameterAspectDelegate)">
            <summary>
            执行
            </summary>
        </member>
        <member name="T:Bing.BingException">
            <summary>
            Bing框架异常
            </summary>
        </member>
        <member name="F:Bing.BingException.EmptyFlag">
            <summary>
            空标识
            </summary>
        </member>
        <member name="F:Bing.BingException.DefaultErrorMessage">
            <summary>
            默认错误消息
            </summary>
        </member>
        <member name="F:Bing.BingException.DefaultErrorCode">
            <summary>
            默认错误编码
            </summary>
        </member>
        <member name="F:Bing.BingException.DefaultExtendErrorCode">
            <summary>
            默认扩展错误编码
            </summary>
        </member>
        <member name="M:Bing.BingException.#ctor">
            <summary>
            初始化一个<see cref="T:Bing.BingException"/>类型的实例
            </summary>
        </member>
        <member name="M:Bing.BingException.#ctor(System.String,System.Exception)">
            <summary>
            初始化一个<see cref="T:Bing.BingException"/>类型的实例
            </summary>
            <param name="errorMessage">错误消息</param>
            <param name="innerException">内部异常</param>
        </member>
        <member name="M:Bing.BingException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            初始化一个<see cref="T:Bing.BingException"/>类型的实例
            </summary>
            <param name="errorMessage">错误消息</param>
            <param name="flag">错误标识</param>
            <param name="innerException">内部异常</param>
        </member>
        <member name="M:Bing.BingException.#ctor(System.Int64,System.String,System.Exception)">
            <summary>
            初始化一个<see cref="T:Bing.BingException"/>类型的实例
            </summary>
            <param name="errorCode">错误码</param>
            <param name="errorMessage">错误消息</param>
            <param name="innerException">内部异常</param>
        </member>
        <member name="M:Bing.BingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            初始化一个<see cref="T:Bing.BingException"/>类型的实例
            </summary>
            <param name="info">序列化信息</param>
            <param name="context">流上下文</param>
        </member>
        <member name="M:Bing.BingException.#ctor(System.Int64,System.String,System.String,System.Exception)">
            <summary>
            初始化一个<see cref="T:Bing.BingException"/>类型的实例
            </summary>
            <param name="errorCode">错误码</param>
            <param name="errorMessage">错误消息</param>
            <param name="flag">错误标识</param>
            <param name="innerException">内部异常</param>
        </member>
        <member name="M:Bing.BingException.#ctor(Bing.Exceptions.BingExceptionOptions)">
            <summary>
            初始化一个<see cref="T:Bing.BingException"/>类型的实例
            </summary>
            <param name="options">Bing框架异常选项配置</param>
        </member>
        <member name="P:Bing.BingException.Code">
            <summary>
            错误码
            </summary>
        </member>
        <member name="P:Bing.BingException.Flag">
            <summary>
            错误标识
            </summary>
        </member>
        <member name="P:Bing.BingException.ExtraData">
            <summary>
            额外数据
            </summary>
        </member>
        <member name="M:Bing.BingException.GetFullMessage">
            <summary>
            获取完整的消息
            </summary>
        </member>
        <member name="M:Bing.BingException.Throw">
            <summary>
            抛出异常
            </summary>
        </member>
        <member name="T:Bing.Caching.CacheAttribute">
            <summary>
            缓存 属性
            </summary>
        </member>
        <member name="P:Bing.Caching.CacheAttribute.Key">
            <summary>
            缓存键值。可以附加参数，例如：UserInfo{model:Nmae}_{type}
            </summary>
        </member>
        <member name="P:Bing.Caching.CacheAttribute.Expiration">
            <summary>
            过期时间间隔
            </summary>
        </member>
        <member name="F:Bing.Caching.CacheAttribute.AppendKeyParameters">
            <summary>
            拼接缓存键参数
            </summary>
        </member>
        <member name="F:Bing.Caching.CacheAttribute.TaskResultMethod">
            <summary>
            异步结果方法
            </summary>
        </member>
        <member name="F:Bing.Caching.CacheAttribute._lock">
            <summary>
            异步锁
            </summary>
        </member>
        <member name="P:Bing.Caching.CacheAttribute.Cache">
            <summary>
            缓存
            </summary>
        </member>
        <member name="M:Bing.Caching.CacheAttribute.#cctor">
            <summary>
            静态构造函数
            </summary>
        </member>
        <member name="M:Bing.Caching.CacheAttribute.Invoke(AspectCore.DynamicProxy.AspectContext,AspectCore.DynamicProxy.AspectDelegate)">
            <summary>
            执行
            </summary>
        </member>
        <member name="T:Bing.Caching.ICache">
            <summary>
            缓存 - 异步
            </summary>
            <summary>
            缓存
            </summary>
        </member>
        <member name="M:Bing.Caching.ICache.ExistsAsync(System.String)">
            <summary>
            是否存在指定键的缓存
            </summary>
            <param name="key">缓存键</param>
        </member>
        <member name="M:Bing.Caching.ICache.GetAsync``1(System.String,System.Func{System.Threading.Tasks.Task{``0}},System.Nullable{System.TimeSpan})">
            <summary>
            从缓存中获取数据，如果不存在，则执行获取数据操作并添加到缓存中
            </summary>
            <typeparam name="T">缓存数据类型</typeparam>
            <param name="key">缓存键</param>
            <param name="func">获取数据操作</param>
            <param name="expiration">过期时间间隔</param>
        </member>
        <member name="M:Bing.Caching.ICache.GetAsync(System.String,System.Type)">
            <summary>
            从缓存中获取数据
            </summary>
            <param name="key">缓存键</param>
            <param name="type">缓存数据类型</param>
        </member>
        <member name="M:Bing.Caching.ICache.GetAsync``1(System.String)">
            <summary>
            从缓存中获取数据
            </summary>
            <typeparam name="T">缓存数据类型</typeparam>
            <param name="key">缓存键</param>
        </member>
        <member name="M:Bing.Caching.ICache.TryAddAsync``1(System.String,``0,System.Nullable{System.TimeSpan})">
            <summary>
            当缓存数据不存在则添加，已存在不会添加，添加成功返回true
            </summary>
            <typeparam name="T">缓存数据类型</typeparam>
            <param name="key">缓存键</param>
            <param name="value">值</param>
            <param name="expiration">过期时间间隔</param>
        </member>
        <member name="M:Bing.Caching.ICache.AddAsync``1(System.String,``0,System.Nullable{System.TimeSpan})">
            <summary>
            添加缓存。如果已存在缓存，将覆盖
            </summary>
            <typeparam name="T">缓存数据类型</typeparam>
            <param name="key">缓存键</param>
            <param name="value">值</param>
            <param name="expiration">过期时间间隔</param>
        </member>
        <member name="M:Bing.Caching.ICache.RemoveAsync(System.String)">
            <summary>
            移除缓存
            </summary>
            <param name="key">缓存键</param>
        </member>
        <member name="M:Bing.Caching.ICache.RemoveByPrefixAsync(System.String)">
            <summary>
            通过缓存键前缀移除缓存
            </summary>
            <param name="prefix">缓存键前缀</param>
        </member>
        <member name="M:Bing.Caching.ICache.ClearAsync">
            <summary>
            清空缓存
            </summary>
        </member>
        <member name="M:Bing.Caching.ICache.Exists(System.String)">
            <summary>
            是否存在指定键的缓存
            </summary>
            <param name="key">缓存键</param>
        </member>
        <member name="M:Bing.Caching.ICache.Get``1(System.String,System.Func{``0},System.Nullable{System.TimeSpan})">
            <summary>
            从缓存中获取数据，如果不存在，则执行获取数据操作并添加到缓存中
            </summary>
            <typeparam name="T">缓存数据类型</typeparam>
            <param name="key">缓存键</param>
            <param name="func">获取数据操作</param>
            <param name="expiration">过期时间间隔</param>
        </member>
        <member name="M:Bing.Caching.ICache.Get``1(System.String)">
            <summary>
            从缓存中获取数据
            </summary>
            <typeparam name="T">缓存数据类型</typeparam>
            <param name="key">缓存键</param>
        </member>
        <member name="M:Bing.Caching.ICache.TryAdd``1(System.String,``0,System.Nullable{System.TimeSpan})">
            <summary>
            当缓存数据不存在则添加，已存在不会添加，添加成功返回true
            </summary>
            <typeparam name="T">缓存数据类型</typeparam>
            <param name="key">缓存键</param>
            <param name="value">值</param>
            <param name="expiration">过期时间间隔</param>
        </member>
        <member name="M:Bing.Caching.ICache.Add``1(System.String,``0,System.Nullable{System.TimeSpan})">
            <summary>
            添加缓存。如果已存在缓存，将覆盖
            </summary>
            <typeparam name="T">缓存数据类型</typeparam>
            <param name="key">缓存键</param>
            <param name="value">值</param>
            <param name="expiration">过期时间间隔</param>
        </member>
        <member name="M:Bing.Caching.ICache.Remove(System.String)">
            <summary>
            移除缓存
            </summary>
            <param name="key">缓存键</param>
        </member>
        <member name="M:Bing.Caching.ICache.RemoveByPrefix(System.String)">
            <summary>
            通过缓存键前缀移除缓存
            </summary>
            <param name="prefix">缓存键前缀</param>
        </member>
        <member name="M:Bing.Caching.ICache.Clear">
            <summary>
            清空缓存
            </summary>
        </member>
        <member name="T:Bing.Caching.ICacheKeyGenerator">
            <summary>
            缓存键生成器
            </summary>
        </member>
        <member name="M:Bing.Caching.ICacheKeyGenerator.GetKey(System.Object[])">
            <summary>
            生成缓存键
            </summary>
            <param name="args">参数</param>
        </member>
        <member name="T:Bing.Caching.IListCache`1">
            <summary>
            列表缓存
            </summary>
            <typeparam name="T">类型</typeparam>
        </member>
        <member name="P:Bing.Caching.IListCache`1.Count">
            <summary>
            缓存键数量
            </summary>
        </member>
        <member name="M:Bing.Caching.IListCache`1.Add(`0)">
            <summary>
            添加。如果存在则不添加，返回false
            </summary>
            <param name="item">列表项</param>
        </member>
        <member name="M:Bing.Caching.IListCache`1.Remove(`0)">
            <summary>
            移除。如果存在则删除并返回true，否则返回false
            </summary>
            <param name="item">列表项</param>
        </member>
        <member name="M:Bing.Caching.IListCache`1.Exists(`0)">
            <summary>
            判断是否存在
            </summary>
            <param name="item">列表项</param>
        </member>
        <member name="T:Bing.Caching.Internal.Helper">
            <summary>
            帮助类
            </summary>
        </member>
        <member name="F:Bing.Caching.Internal.Helper.DictionaryCache">
            <summary>
            字典缓存
            </summary>
        </member>
        <member name="M:Bing.Caching.Internal.Helper.ToDictionary(System.Object)">
            <summary>
            将对象转换成字典
            </summary>
            <param name="obj">对象</param>
        </member>
        <member name="M:Bing.Caching.Internal.Helper.CreateDictionaryGenerator(System.Type)">
            <summary>
            创建字典生成器
            </summary>
            <param name="type">类型</param>
        </member>
        <member name="T:Bing.Caching.ISingleTypeCache`2">
            <summary>
            单类型缓存
            </summary>
            <typeparam name="TKey">键类型</typeparam>
            <typeparam name="TValue">值类型</typeparam>
        </member>
        <member name="P:Bing.Caching.ISingleTypeCache`2.Count">
            <summary>
            缓存键数量
            </summary>
        </member>
        <member name="M:Bing.Caching.ISingleTypeCache`2.Add(`0,`1)">
            <summary>
            添加。如果存在则不添加，返回false
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
        </member>
        <member name="M:Bing.Caching.ISingleTypeCache`2.Update(`0,`1)">
            <summary>
            更新。如果不存在则不更新，返回false
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
        </member>
        <member name="M:Bing.Caching.ISingleTypeCache`2.Set(`0,`1)">
            <summary>
            设置。如果村则则更新，不存在则添加
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
        </member>
        <member name="M:Bing.Caching.ISingleTypeCache`2.Remove(`0)">
            <summary>
            移除
            </summary>
            <param name="key">键</param>
        </member>
        <member name="M:Bing.Caching.ISingleTypeCache`2.Remove(`0[])">
            <summary>
            移除集合
            </summary>
            <param name="keys">键数组</param>
        </member>
        <member name="M:Bing.Caching.ISingleTypeCache`2.Exists(`0)">
            <summary>
            判断是否存在
            </summary>
            <param name="key">键</param>
        </member>
        <member name="T:Bing.Caching.ListLocalMemoryBase`1">
            <summary>
            基于本地内存的列表缓存基类
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Bing.Caching.ListLocalMemoryBase`1.Count">
            <summary>
            缓存键数量
            </summary>
        </member>
        <member name="M:Bing.Caching.ListLocalMemoryBase`1.ReaderAll">
            <summary>
            读取全部
            </summary>
        </member>
        <member name="M:Bing.Caching.ListLocalMemoryBase`1.Clear">
            <summary>
            清空
            </summary>
        </member>
        <member name="M:Bing.Caching.ListLocalMemoryBase`1.Add(`0)">
            <summary>
            添加。如果存在则不添加，返回false
            </summary>
            <param name="item">列表项</param>
        </member>
        <member name="M:Bing.Caching.ListLocalMemoryBase`1.Remove(`0)">
            <summary>
            移除。如果存在则删除并返回true，否则返回false
            </summary>
            <param name="item">列表项</param>
        </member>
        <member name="M:Bing.Caching.ListLocalMemoryBase`1.Exists(`0)">
            <summary>
            判断是否存在
            </summary>
            <param name="item">列表项</param>
        </member>
        <member name="M:Bing.Caching.ListLocalMemoryBase`1.GetCache">
            <summary>
            获取缓存
            </summary>
        </member>
        <member name="M:Bing.Caching.ListLocalMemoryBase`1.GetSyncCache">
            <summary>
            获取同步的缓存对象。用于线程安全
            </summary>
        </member>
        <member name="T:Bing.Caching.SingleTypeLocalMemoryBase`2">
            <summary>
            基于本地内存的单类型缓存基类
            </summary>
            <typeparam name="TKey">键类型</typeparam>
            <typeparam name="TValue">值类型</typeparam>
        </member>
        <member name="P:Bing.Caching.SingleTypeLocalMemoryBase`2.Count">
            <summary>
            缓存键数量
            </summary>
        </member>
        <member name="M:Bing.Caching.SingleTypeLocalMemoryBase`2.Get(`0)">
            <summary>
            根据键获取值
            </summary>
            <param name="key">键</param>
        </member>
        <member name="M:Bing.Caching.SingleTypeLocalMemoryBase`2.Clear">
            <summary>
            清空
            </summary>
        </member>
        <member name="M:Bing.Caching.SingleTypeLocalMemoryBase`2.Reader">
            <summary>
            读取
            </summary>
        </member>
        <member name="M:Bing.Caching.SingleTypeLocalMemoryBase`2.Add(`0,`1)">
            <summary>
            添加。如果存在则不添加，返回false
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
        </member>
        <member name="M:Bing.Caching.SingleTypeLocalMemoryBase`2.Update(`0,`1)">
            <summary>
            更新。如果不存在则不更新，返回false
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
        </member>
        <member name="M:Bing.Caching.SingleTypeLocalMemoryBase`2.Set(`0,`1)">
            <summary>
            设置。如果村则则更新，不存在则添加
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
        </member>
        <member name="M:Bing.Caching.SingleTypeLocalMemoryBase`2.Remove(`0)">
            <summary>
            移除
            </summary>
            <param name="key">键</param>
        </member>
        <member name="M:Bing.Caching.SingleTypeLocalMemoryBase`2.Remove(`0[])">
            <summary>
            移除集合
            </summary>
            <param name="keys">键数组</param>
        </member>
        <member name="M:Bing.Caching.SingleTypeLocalMemoryBase`2.Exists(`0)">
            <summary>
            判断是否存在
            </summary>
            <param name="key">键</param>
        </member>
        <member name="M:Bing.Caching.SingleTypeLocalMemoryBase`2.GetCache">
            <summary>
            获取缓存
            </summary>
        </member>
        <member name="M:Bing.Caching.SingleTypeLocalMemoryBase`2.GetSyncCache">
            <summary>
            获取同步的缓存对象。用于线程安全
            </summary>
        </member>
        <member name="T:Bing.Caching.StringCacheKeyGenerator">
            <summary>
            字符串缓存键生成器
            </summary>
        </member>
        <member name="M:Bing.Caching.StringCacheKeyGenerator.GetKey(System.Object[])">
            <summary>
            生成缓存键
            </summary>
            <param name="args">参数</param>
        </member>
        <member name="T:Bing.Contexts.ContextFactory">
            <summary>
            上下文工厂
            </summary>
        </member>
        <member name="M:Bing.Contexts.ContextFactory.Create">
            <summary>
            创建上下文
            </summary>
        </member>
        <member name="T:Bing.Contexts.IContext">
            <summary>
            上下文
            </summary>
        </member>
        <member name="P:Bing.Contexts.IContext.TraceId">
            <summary>
            跟踪号
            </summary>
        </member>
        <member name="M:Bing.Contexts.IContext.Add``1(System.String,``0)">
            <summary>
            添加对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="key">键名</param>
            <param name="value">对象</param>
        </member>
        <member name="M:Bing.Contexts.IContext.Get``1(System.String)">
            <summary>
            获取对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="key">键名</param>
        </member>
        <member name="M:Bing.Contexts.IContext.Remove(System.String)">
            <summary>
            移除对象
            </summary>
            <param name="key">键名</param>
        </member>
        <member name="T:Bing.Contexts.NullContext">
            <summary>
            空上下文
            </summary>
        </member>
        <member name="P:Bing.Contexts.NullContext.TraceId">
            <summary>
            跟踪号
            </summary>
        </member>
        <member name="F:Bing.Contexts.NullContext.Instance">
            <summary>
            空上下文实例
            </summary>
        </member>
        <member name="M:Bing.Contexts.NullContext.Add``1(System.String,``0)">
            <summary>
            添加对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="key">键名</param>
            <param name="value">对象</param>
        </member>
        <member name="M:Bing.Contexts.NullContext.Get``1(System.String)">
            <summary>
            获取对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="key">键名</param>
        </member>
        <member name="M:Bing.Contexts.NullContext.Remove(System.String)">
            <summary>
            移除对象
            </summary>
            <param name="key">键名</param>
        </member>
        <member name="T:Bing.Contexts.WebContext">
            <summary>
            Web上下文
            </summary>
        </member>
        <member name="P:Bing.Contexts.WebContext.TraceId">
            <summary>
            跟踪号
            </summary>
        </member>
        <member name="M:Bing.Contexts.WebContext.Add``1(System.String,``0)">
            <summary>
            添加对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="key">键名</param>
            <param name="value">对象</param>
        </member>
        <member name="M:Bing.Contexts.WebContext.Get``1(System.String)">
            <summary>
            获取对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="key">键名</param>
        </member>
        <member name="M:Bing.Contexts.WebContext.Remove(System.String)">
            <summary>
            移除对象
            </summary>
            <param name="key">键名</param>
        </member>
        <member name="T:Bing.Core.Builders.BingBuilder">
            <summary>
            Bing 构建器
            </summary>
        </member>
        <member name="M:Bing.Core.Builders.BingBuilder.#ctor">
            <summary>
            初始化一个<see cref="T:Bing.Core.Builders.BingBuilder"/>类型的实例
            </summary>
        </member>
        <member name="P:Bing.Core.Builders.BingBuilder.AddModules">
            <summary>
            加载的模块集合
            </summary>
        </member>
        <member name="P:Bing.Core.Builders.BingBuilder.ExceptModules">
            <summary>
            排除的模块集合
            </summary>
        </member>
        <member name="P:Bing.Core.Builders.BingBuilder.OptionsAction">
            <summary>
            Bing 选项配置委托
            </summary>
        </member>
        <member name="M:Bing.Core.Builders.BingBuilder.AddModule``1">
            <summary>
            添加指定模块。执行此功能后将仅加载指定的模块
            </summary>
            <typeparam name="TModule">要添加的模块类型</typeparam>
        </member>
        <member name="M:Bing.Core.Builders.BingBuilder.ExceptModule``1">
            <summary>
            排除指定模块。执行此功能后将从自动加载的模块中排除指定模块
            </summary>
            <typeparam name="TModule">要排除的模块类型</typeparam>
        </member>
        <member name="M:Bing.Core.Builders.BingBuilder.AddOptions(System.Action{Bing.Core.Options.BingOptions})">
            <summary>
            添加Bing选项配置
            </summary>
            <param name="optionsAction">选项操作</param>
        </member>
        <member name="T:Bing.Core.Builders.BingBuilderExtensions">
            <summary>
            Bing构建器(<see cref="T:Bing.Core.Builders.IBingBuilder"/>) 扩展
            </summary>
        </member>
        <member name="M:Bing.Core.Builders.BingBuilderExtensions.AddCoreModule(Bing.Core.Builders.IBingBuilder)">
            <summary>
            添加核心模块
            </summary>
            <param name="builder">Bing构建器</param>
        </member>
        <member name="T:Bing.Core.Builders.IBingBuilder">
            <summary>
            Bing 构建器
            </summary>
        </member>
        <member name="P:Bing.Core.Builders.IBingBuilder.AddModules">
            <summary>
            加载的模块集合
            </summary>
        </member>
        <member name="P:Bing.Core.Builders.IBingBuilder.ExceptModules">
            <summary>
            排除的模块集合
            </summary>
        </member>
        <member name="P:Bing.Core.Builders.IBingBuilder.OptionsAction">
            <summary>
            Bing 选项配置委托
            </summary>
        </member>
        <member name="M:Bing.Core.Builders.IBingBuilder.AddModule``1">
            <summary>
            添加指定模块
            </summary>
            <typeparam name="TModule">要添加的模块类型</typeparam>
        </member>
        <member name="M:Bing.Core.Builders.IBingBuilder.ExceptModule``1">
            <summary>
            排除指定模块
            </summary>
            <typeparam name="TModule">要排除的模块类型</typeparam>
        </member>
        <member name="M:Bing.Core.Builders.IBingBuilder.AddOptions(System.Action{Bing.Core.Options.BingOptions})">
            <summary>
            添加Bing选项配置
            </summary>
            <param name="optionsAction">选项操作</param>
        </member>
        <member name="T:Bing.Core.Data.DataHandler">
            <summary>
            数据处理委托
            </summary>
            <param name="o">引发对象</param>
            <param name="e">数据事件参数</param>
        </member>
        <member name="T:Bing.Core.Data.DataEventArgs">
            <summary>
            数据事件参数
            </summary>
        </member>
        <member name="P:Bing.Core.Data.DataEventArgs.Data">
            <summary>
            数据
            </summary>
        </member>
        <member name="M:Bing.Core.Data.DataEventArgs.#ctor(System.Object)">
            <summary>
            初始化一个<see cref="T:Bing.Core.Data.DataEventArgs"/>类型的实例
            </summary>
            <param name="data">数据</param>
        </member>
        <member name="T:Bing.Core.Data.IGetable`2">
            <summary>
            可获取
            </summary>
            <typeparam name="TKey">键类型</typeparam>
            <typeparam name="TValue">值类型</typeparam>
        </member>
        <member name="M:Bing.Core.Data.IGetable`2.Get(`0)">
            <summary>
            根据键获取值
            </summary>
            <param name="key">键</param>
        </member>
        <member name="T:Bing.Core.Data.IGetObject`1">
            <summary>
            获取对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
        </member>
        <member name="M:Bing.Core.Data.IGetObject`1.Get">
            <summary>
            获取对象
            </summary>
        </member>
        <member name="T:Bing.Core.Data.IReader`1">
            <summary>
            读取
            </summary>
            <typeparam name="T">数据类型</typeparam>
        </member>
        <member name="M:Bing.Core.Data.IReader`1.Reader">
            <summary>
            读取
            </summary>
        </member>
        <member name="T:Bing.Core.Data.IReaderAll`1">
            <summary>
            读取全部
            </summary>
            <typeparam name="T">数据类型</typeparam>
        </member>
        <member name="M:Bing.Core.Data.IReaderAll`1.ReaderAll">
            <summary>
            读取全部
            </summary>
        </member>
        <member name="T:Bing.Core.Data.IReaderDictionary`2">
            <summary>
            读取字典
            </summary>
            <typeparam name="TKey">键类型</typeparam>
            <typeparam name="TValue">值类型</typeparam>
        </member>
        <member name="M:Bing.Core.Data.IReaderDictionary`2.Reader(`0)">
            <summary>
            读取
            </summary>
            <param name="key">键</param>
        </member>
        <member name="T:Bing.Core.Enums.EnvironmentType">
            <summary>
            环境类型
            </summary>
        </member>
        <member name="F:Bing.Core.Enums.EnvironmentType.Development">
            <summary>
            开发环境
            </summary>
        </member>
        <member name="F:Bing.Core.Enums.EnvironmentType.Test">
            <summary>
            测试环境
            </summary>
        </member>
        <member name="F:Bing.Core.Enums.EnvironmentType.Preview">
            <summary>
            预览环境
            </summary>
        </member>
        <member name="F:Bing.Core.Enums.EnvironmentType.Prod">
            <summary>
            生产环境
            </summary>
        </member>
        <member name="T:Bing.Core.Modularity.BingCoreModule">
            <summary>
            Bing 核心模块
            </summary>
        </member>
        <member name="P:Bing.Core.Modularity.BingCoreModule.Level">
            <summary>
            模块级别
            </summary>
        </member>
        <member name="M:Bing.Core.Modularity.BingCoreModule.AddServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            添加服务。将模块服务添加到依赖注入服务容器中
            </summary>
            <param name="services">服务集合</param>
        </member>
        <member name="T:Bing.Core.Modularity.BingModule">
            <summary>
            Bing 模块基类
            </summary>
        </member>
        <member name="P:Bing.Core.Modularity.BingModule.Level">
            <summary>
            模块级别。级别越小越先启动
            </summary>
        </member>
        <member name="P:Bing.Core.Modularity.BingModule.Order">
            <summary>
            模块启动顺序。模块启动的顺序先按级别启动，同一级别内部再按此顺序启动，
            级别默认为0，表示无依赖，需要在同级别有依赖顺序的时候，再重写为>0的顺序值
            </summary>
        </member>
        <member name="P:Bing.Core.Modularity.BingModule.Enabled">
            <summary>
            是否已启用
            </summary>
        </member>
        <member name="M:Bing.Core.Modularity.BingModule.AddServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            添加服务。将模块服务添加到依赖注入服务容器中
            </summary>
            <param name="services">服务集合</param>
        </member>
        <member name="M:Bing.Core.Modularity.BingModule.UseModule(System.IServiceProvider)">
            <summary>
            应用模块服务
            </summary>
            <param name="provider">服务提供程序</param>
        </member>
        <member name="M:Bing.Core.Modularity.BingModule.GetDependModuleTypes(System.Type)">
            <summary>
            获取当前模块的依赖模块类型
            </summary>
            <param name="moduleType">模块类型</param>
        </member>
        <member name="T:Bing.Core.Modularity.BingModuleManager">
            <summary>
            Bing 模块管理器
            </summary>
        </member>
        <member name="F:Bing.Core.Modularity.BingModuleManager._sourceModules">
            <summary>
            所有模块信息集合
            </summary>
        </member>
        <member name="P:Bing.Core.Modularity.BingModuleManager.SourceModules">
            <summary>
            自动检索到的所有模块信息
            </summary>
        </member>
        <member name="P:Bing.Core.Modularity.BingModuleManager.LoadedModules">
            <summary>
            最终加载的模块信息集合
            </summary>
        </member>
        <member name="P:Bing.Core.Modularity.BingModuleManager.Log">
            <summary>
            日志操作
            </summary>
        </member>
        <member name="M:Bing.Core.Modularity.BingModuleManager.#ctor">
            <summary>
            初始化一个<see cref="T:Bing.Core.Modularity.BingModuleManager"/>类型的实例
            </summary>
        </member>
        <member name="M:Bing.Core.Modularity.BingModuleManager.LoadModules(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            加载模块服务
            </summary>
            <param name="services">服务集合</param>
        </member>
        <member name="M:Bing.Core.Modularity.BingModuleManager.UseModule(System.IServiceProvider)">
            <summary>
            应用模块服务
            </summary>
            <param name="provider">服务提供程序</param>
        </member>
        <member name="T:Bing.Core.Modularity.BingModuleTypeFinder">
            <summary>
            Bing 模块类型查找器
            </summary>
        </member>
        <member name="M:Bing.Core.Modularity.BingModuleTypeFinder.#ctor(Bing.Reflections.IAllAssemblyFinder)">
            <summary>
            初始化一个<see cref="T:Bing.Core.Modularity.BingModuleTypeFinder"/>类型的实例
            </summary>
            <param name="allAssemblyFinder">所有程序集查找器</param>
        </member>
        <member name="M:Bing.Core.Modularity.BingModuleTypeFinder.FindAllItems">
            <summary>
            重写已实现所有项的查找
            </summary>
        </member>
        <member name="T:Bing.Core.Modularity.DependsOnModuleAttribute">
            <summary>
            Bing 模块依赖
            </summary>
        </member>
        <member name="P:Bing.Core.Modularity.DependsOnModuleAttribute.DependedModuleTypes">
            <summary>
            当前模块的依赖模块类型集合
            </summary>
        </member>
        <member name="M:Bing.Core.Modularity.DependsOnModuleAttribute.#ctor(System.Type[])">
            <summary>
            初始化一个<see cref="T:Bing.Core.Modularity.DependsOnModuleAttribute"/>类型的实例
            </summary>
            <param name="dependedModuleTypes">依赖模块类型集合</param>
        </member>
        <member name="T:Bing.Core.Modularity.IBingModule">
            <summary>
            Bing 模块
            </summary>
        </member>
        <member name="P:Bing.Core.Modularity.IBingModule.Level">
            <summary>
            模块级别。级别越小越先启动
            </summary>
        </member>
        <member name="P:Bing.Core.Modularity.IBingModule.Order">
            <summary>
            模块启动顺序。模块启动的顺序先按级别启动，同一级别内部再按此顺序启动，
            级别默认为0，表示无依赖，需要在同级别有依赖顺序的时候，再重写为>0的顺序值
            </summary>
        </member>
        <member name="P:Bing.Core.Modularity.IBingModule.Enabled">
            <summary>
            是否已启用
            </summary>
        </member>
        <member name="M:Bing.Core.Modularity.IBingModule.AddServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            添加服务。将模块服务添加到依赖注入服务容器中
            </summary>
            <param name="services">服务集合</param>
        </member>
        <member name="M:Bing.Core.Modularity.IBingModule.UseModule(System.IServiceProvider)">
            <summary>
            应用模块服务
            </summary>
            <param name="provider">服务提供程序</param>
        </member>
        <member name="T:Bing.Core.Modularity.IBingModuleManager">
            <summary>
            Bing 模块管理器
            </summary>
        </member>
        <member name="P:Bing.Core.Modularity.IBingModuleManager.SourceModules">
            <summary>
            自动检索到的所有模块信息
            </summary>
        </member>
        <member name="P:Bing.Core.Modularity.IBingModuleManager.LoadedModules">
            <summary>
            最终加载的模块信息集合
            </summary>
        </member>
        <member name="M:Bing.Core.Modularity.IBingModuleManager.LoadModules(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            加载模块服务
            </summary>
            <param name="services">服务集合</param>
        </member>
        <member name="M:Bing.Core.Modularity.IBingModuleManager.UseModule(System.IServiceProvider)">
            <summary>
            应用模块服务
            </summary>
            <param name="provider">服务提供程序</param>
        </member>
        <member name="T:Bing.Core.Modularity.IBingModuleTypeFinder">
            <summary>
            Bing 模块类型查找器
            </summary>
        </member>
        <member name="T:Bing.Core.Modularity.ModuleLevel">
            <summary>
            模块级别。级别越核心，优先启动
            </summary>
        </member>
        <member name="F:Bing.Core.Modularity.ModuleLevel.Core">
            <summary>
            核心级别。表示系统的核心模块，
            这些模块不涉及第三方组件，在系统运行中是不可替换的，核心模块将始终加载
            </summary>
        </member>
        <member name="F:Bing.Core.Modularity.ModuleLevel.Framework">
            <summary>
            框架级别。表示涉及第三方组件得基础模块
            </summary>
        </member>
        <member name="F:Bing.Core.Modularity.ModuleLevel.Application">
            <summary>
            应用级别。表示涉及应用数据的基础模块
            </summary>
        </member>
        <member name="F:Bing.Core.Modularity.ModuleLevel.Business">
            <summary>
            业务级别。表示涉及真实业务处理的模块
            </summary>
        </member>
        <member name="T:Bing.Core.Options.BingOptions">
            <summary>
            Bing框架配置选项信息
            </summary>
        </member>
        <member name="P:Bing.Core.Options.BingOptions.Environment">
            <summary>
            环境类型
            </summary>
        </member>
        <member name="T:Bing.Core.ServiceExtensions">
            <summary>
            服务扩展
            </summary>
        </member>
        <member name="M:Bing.Core.ServiceExtensions.AddBing``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Bing.Core.Builders.IBingBuilder})">
            <summary>
            将Bing服务，各个<see cref="T:Bing.Core.Modularity.BingModule"/>模块的服务添加到服务容器中
            </summary>
            <typeparam name="TBingModuleManager">Bing模块管理器类型</typeparam>
            <param name="services">服务集合</param>
            <param name="builderAction">Bing构建器操作</param>
        </member>
        <member name="M:Bing.Core.ServiceExtensions.GetConfiguration(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            获取<see cref="T:Microsoft.Extensions.Configuration.IConfiguration"/>配置信息
            </summary>
            <param name="services">服务集合</param>
        </member>
        <member name="M:Bing.Core.ServiceExtensions.GetBingOptions(System.IServiceProvider)">
            <summary>
            获取Bing框架配置选项信息
            </summary>
            <param name="provider">服务提供程序</param>
        </member>
        <member name="M:Bing.Core.ServiceExtensions.UseBing(System.IServiceProvider)">
            <summary>
            Bing框架初始化，适用于非AspNetCore环境
            </summary>
            <param name="provider">服务提供程序</param>
        </member>
        <member name="T:Bing.Datas.Enums.DatabaseType">
            <summary>
            数据库类型
            </summary>
        </member>
        <member name="F:Bing.Datas.Enums.DatabaseType.SqlServer">
            <summary>
            Sql Server数据库
            </summary>
        </member>
        <member name="F:Bing.Datas.Enums.DatabaseType.MySql">
            <summary>
            MySql数据库
            </summary>
        </member>
        <member name="F:Bing.Datas.Enums.DatabaseType.PgSql">
            <summary>
            PostgreSQL数据库
            </summary>
        </member>
        <member name="F:Bing.Datas.Enums.DatabaseType.Oracle">
            <summary>
            Oracle数据库
            </summary>
        </member>
        <member name="F:Bing.Datas.Enums.DatabaseType.Sqlite">
            <summary>
            Sqlite数据库
            </summary>
        </member>
        <member name="T:Bing.Datas.Persistence.PersistentEntityBase">
            <summary>
            持久化实体基类
            </summary>
        </member>
        <member name="T:Bing.Datas.Persistence.PersistentEntityBase`1">
            <summary>
            持久化实体基类
            </summary>
            <typeparam name="TKey">标识类型</typeparam>
        </member>
        <member name="P:Bing.Datas.Persistence.PersistentEntityBase`1.Id">
            <summary>
            标识
            </summary>
        </member>
        <member name="M:Bing.Datas.Persistence.PersistentEntityBase`1.Equals(System.Object)">
            <summary>
            相等运算
            </summary>
            <param name="other">比较对象</param>
        </member>
        <member name="M:Bing.Datas.Persistence.PersistentEntityBase`1.GetHashCode">
            <summary>
            获取哈希
            </summary>
        </member>
        <member name="M:Bing.Datas.Persistence.PersistentEntityBase`1.op_Equality(Bing.Datas.Persistence.PersistentEntityBase{`0},Bing.Datas.Persistence.PersistentEntityBase{`0})">
            <summary>
            相等比较
            </summary>
            <param name="left">左比较对象</param>
            <param name="right">右比较对象</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.Persistence.PersistentEntityBase`1.op_Inequality(Bing.Datas.Persistence.PersistentEntityBase{`0},Bing.Datas.Persistence.PersistentEntityBase{`0})">
            <summary>
            不相等比较
            </summary>
            <param name="left">左比较对象</param>
            <param name="right">右比较对象</param>
        </member>
        <member name="T:Bing.Datas.Persistence.PersistentObjectBase">
            <summary>
            持久化对象基类
            </summary>
        </member>
        <member name="T:Bing.Datas.Persistence.PersistentObjectBase`1">
            <summary>
            持久化对象基类
            </summary>
            <typeparam name="TKey">标识类型</typeparam>
        </member>
        <member name="P:Bing.Datas.Persistence.PersistentObjectBase`1.Version">
            <summary>
            版本号（乐观锁）
            </summary>
        </member>
        <member name="T:Bing.Datas.Persistence.TreePersistentObjectBase">
            <summary>
            树型持久化对象
            </summary>
        </member>
        <member name="T:Bing.Datas.Persistence.TreePersistentObjectBase`2">
            <summary>
            树型持久化对象
            </summary>
            <typeparam name="TKey">标识类型</typeparam>
            <typeparam name="TParentId">父标识类型</typeparam>
        </member>
        <member name="P:Bing.Datas.Persistence.TreePersistentObjectBase`2.ParentId">
            <summary>
            父标识
            </summary>
        </member>
        <member name="P:Bing.Datas.Persistence.TreePersistentObjectBase`2.Path">
            <summary>
            路径
            </summary>
        </member>
        <member name="P:Bing.Datas.Persistence.TreePersistentObjectBase`2.Level">
            <summary>
            级数
            </summary>
        </member>
        <member name="P:Bing.Datas.Persistence.TreePersistentObjectBase`2.Enabled">
            <summary>
            启用
            </summary>
        </member>
        <member name="P:Bing.Datas.Persistence.TreePersistentObjectBase`2.SortId">
            <summary>
            排序号
            </summary>
        </member>
        <member name="T:Bing.Datas.Sql.Builders.Clauses.FromClause">
            <summary>
            From子句
            </summary>
        </member>
        <member name="F:Bing.Datas.Sql.Builders.Clauses.FromClause.Table">
            <summary>
            Sql项
            </summary>
        </member>
        <member name="F:Bing.Datas.Sql.Builders.Clauses.FromClause.Dialect">
            <summary>
            Sql方言
            </summary>
        </member>
        <member name="F:Bing.Datas.Sql.Builders.Clauses.FromClause.Resolver">
            <summary>
            实体解析器
            </summary>
        </member>
        <member name="F:Bing.Datas.Sql.Builders.Clauses.FromClause.Register">
            <summary>
            实体别名注册器
            </summary>
        </member>
        <member name="F:Bing.Datas.Sql.Builders.Clauses.FromClause.Builder">
            <summary>
            Sql生成器
            </summary>
        </member>
        <member name="F:Bing.Datas.Sql.Builders.Clauses.FromClause.TableDatabase">
            <summary>
            表数据库
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.FromClause.#ctor(Bing.Datas.Sql.ISqlBuilder,Bing.Datas.Sql.Builders.IDialect,Bing.Datas.Sql.Builders.IEntityResolver,Bing.Datas.Sql.Builders.IEntityAliasRegister,Bing.Datas.Sql.Matedatas.ITableDatabase,Bing.Datas.Sql.Builders.Core.SqlItem)">
            <summary>
            初始化一个<see cref="T:Bing.Datas.Sql.Builders.Clauses.FromClause"/>类型的实例
            </summary>
            <param name="builder">Sql生成器</param>
            <param name="dialect">Sql方言</param>
            <param name="resolver">实体解析器</param>
            <param name="register">实体别名注册器</param>
            <param name="tableDatabase">表数据库</param>
            <param name="table">表</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.FromClause.Clone(Bing.Datas.Sql.ISqlBuilder,Bing.Datas.Sql.Builders.IEntityAliasRegister)">
            <summary>
            克隆
            </summary>
            <param name="builder">Sql生成器</param>
            <param name="register">实体别名注册器</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.FromClause.From(System.String,System.String)">
            <summary>
            设置表名
            </summary>
            <param name="table">表名</param>
            <param name="alias">别名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.FromClause.CreateSqlItem(System.String,System.String,System.String)">
            <summary>
            创建Sql项
            </summary>
            <param name="table">表名</param>
            <param name="schema">架构名</param>
            <param name="alias">别名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.FromClause.From``1(System.String,System.String)">
            <summary>
            设置表名
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="alias">别名</param>
            <param name="schema">架构名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.FromClause.From(Bing.Datas.Sql.ISqlBuilder,System.String)">
            <summary>
            设置子查询表
            </summary>
            <param name="builder">Sql生成器</param>
            <param name="alias">表别名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.FromClause.From(System.Action{Bing.Datas.Sql.ISqlBuilder},System.String)">
            <summary>
            设置子查询表
            </summary>
            <param name="action">子查询操作</param>
            <param name="alias">表别名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.FromClause.AppendSql(System.String)">
            <summary>
            添加到From子句
            </summary>
            <param name="sql">Sql语句</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.FromClause.Validate">
            <summary>
            验证
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.FromClause.ToSql">
            <summary>
            输出Sql
            </summary>
        </member>
        <member name="T:Bing.Datas.Sql.Builders.Clauses.GroupByClause">
            <summary>
            Group By子句
            </summary>
        </member>
        <member name="F:Bing.Datas.Sql.Builders.Clauses.GroupByClause._dialect">
            <summary>
            Sql方言
            </summary>
        </member>
        <member name="F:Bing.Datas.Sql.Builders.Clauses.GroupByClause._resolver">
            <summary>
            实体解析器
            </summary>
        </member>
        <member name="F:Bing.Datas.Sql.Builders.Clauses.GroupByClause._register">
            <summary>
            实体别名注册器
            </summary>
        </member>
        <member name="F:Bing.Datas.Sql.Builders.Clauses.GroupByClause._group">
            <summary>
            分组条件
            </summary>
        </member>
        <member name="F:Bing.Datas.Sql.Builders.Clauses.GroupByClause._having">
            <summary>
            分组条件
            </summary>
        </member>
        <member name="P:Bing.Datas.Sql.Builders.Clauses.GroupByClause.IsGroup">
            <summary>
            是否存在分组
            </summary>
        </member>
        <member name="P:Bing.Datas.Sql.Builders.Clauses.GroupByClause.GroupColumns">
            <summary>
            分组列表
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.GroupByClause.#ctor(Bing.Datas.Sql.Builders.IDialect,Bing.Datas.Sql.Builders.IEntityResolver,Bing.Datas.Sql.Builders.IEntityAliasRegister,System.Collections.Generic.List{Bing.Datas.Sql.Builders.Core.SqlItem},System.String)">
            <summary>
            初始化一个<see cref="T:Bing.Datas.Sql.Builders.Clauses.GroupByClause"/>类型的实例
            </summary>
            <param name="dialect">Sql方言</param>
            <param name="resolver">实体解析器</param>
            <param name="register">实体别名注册器</param>
            <param name="group">分组字段</param>
            <param name="having">分组条件</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.GroupByClause.Clone(Bing.Datas.Sql.Builders.IEntityAliasRegister)">
            <summary>
            克隆
            </summary>
            <param name="register">实体别名注册器</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.GroupByClause.GroupBy(System.String,System.String)">
            <summary>
            分组
            </summary>
            <param name="columns">分组字段</param>
            <param name="having">分组条件</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.GroupByClause.GroupBy``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            分组
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="columns">分组字段</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.GroupByClause.GroupBy``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String)">
            <summary>
            分组
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="column">分组字段</param>
            <param name="having">分组条件</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.GroupByClause.AppendSql(System.String)">
            <summary>
            添加到GroupBy子句
            </summary>
            <param name="sql">Sql语句</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.GroupByClause.ToSql">
            <summary>
            获取Sql
            </summary>
        </member>
        <member name="T:Bing.Datas.Sql.Builders.Clauses.JoinClause">
            <summary>
            表连接子句
            </summary>
        </member>
        <member name="F:Bing.Datas.Sql.Builders.Clauses.JoinClause.JoinKey">
            <summary>
            Join关键字
            </summary>
        </member>
        <member name="F:Bing.Datas.Sql.Builders.Clauses.JoinClause.LeftJoinKey">
            <summary>
            Left Join关键字
            </summary>
        </member>
        <member name="F:Bing.Datas.Sql.Builders.Clauses.JoinClause.RightJoinKey">
            <summary>
            Right Join关键字
            </summary>
        </member>
        <member name="F:Bing.Datas.Sql.Builders.Clauses.JoinClause._sqlBuilder">
            <summary>
            Sql生成器
            </summary>
        </member>
        <member name="F:Bing.Datas.Sql.Builders.Clauses.JoinClause._dialect">
            <summary>
            Sql方言
            </summary>
        </member>
        <member name="F:Bing.Datas.Sql.Builders.Clauses.JoinClause._resolver">
            <summary>
            实体解析器
            </summary>
        </member>
        <member name="F:Bing.Datas.Sql.Builders.Clauses.JoinClause._register">
            <summary>
            实体别名注册器
            </summary>
        </member>
        <member name="F:Bing.Datas.Sql.Builders.Clauses.JoinClause._parameterManager">
            <summary>
            参数管理器
            </summary>
        </member>
        <member name="F:Bing.Datas.Sql.Builders.Clauses.JoinClause.TableDatabase">
            <summary>
            表数据库
            </summary>
        </member>
        <member name="F:Bing.Datas.Sql.Builders.Clauses.JoinClause._helper">
            <summary>
            辅助操作
            </summary>
        </member>
        <member name="F:Bing.Datas.Sql.Builders.Clauses.JoinClause._params">
            <summary>
            连接参数
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.JoinClause.#ctor(Bing.Datas.Sql.ISqlBuilder,Bing.Datas.Sql.Builders.IDialect,Bing.Datas.Sql.Builders.IEntityResolver,Bing.Datas.Sql.Builders.IEntityAliasRegister,Bing.Datas.Sql.Builders.IParameterManager,Bing.Datas.Sql.Matedatas.ITableDatabase,System.Collections.Generic.List{Bing.Datas.Sql.Builders.Core.JoinItem})">
            <summary>
            初始化一个<see cref="T:Bing.Datas.Sql.Builders.Clauses.JoinClause"/>类型的实例
            </summary>
            <param name="sqlBuilder">Sql生成器</param>
            <param name="dialect">Sql方言</param>
            <param name="resolver">实体解析器</param>
            <param name="register">实体别名注册器</param>
            <param name="parameterManager">参数管理器</param>
            <param name="tableDatabase">表数据库</param>
            <param name="joinItems">连接参数列表</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.JoinClause.Clone(Bing.Datas.Sql.ISqlBuilder,Bing.Datas.Sql.Builders.IEntityAliasRegister,Bing.Datas.Sql.Builders.IParameterManager)">
            <summary>
            克隆
            </summary>
            <param name="sqlBuilder">Sql生成器</param>
            <param name="register">实体别名注册器</param>
            <param name="parameterManager">参数管理器</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.JoinClause.Find(System.Type)">
            <summary>
            查找连接项
            </summary>
            <param name="type">表实体类型</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.JoinClause.Join(System.String,System.String)">
            <summary>
            内连接
            </summary>
            <param name="table">表名</param>
            <param name="alias">别名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.JoinClause.Join(System.String,System.String,System.String)">
            <summary>
            表连接
            </summary>
            <param name="joinType">连接类型</param>
            <param name="table">表名</param>
            <param name="alias">别名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.JoinClause.CreateJoinItem(System.String,System.String,System.String,System.String,System.Type)">
            <summary>
            创建连接项
            </summary>
            <param name="joinType">连接类型</param>
            <param name="table">表名</param>
            <param name="schema">架构名</param>
            <param name="alias">别名</param>
            <param name="type">类型</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.JoinClause.AddItem(Bing.Datas.Sql.Builders.Core.JoinItem)">
            <summary>
            添加连接项
            </summary>
            <param name="item">表连接项</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.JoinClause.Join``1(System.String,System.String)">
            <summary>
            内连接
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="alias">别名</param>
            <param name="schema">架构名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.JoinClause.Join``1(System.String,System.String,System.String)">
            <summary>
            表连接
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="joinType">连接类型</param>
            <param name="alias">别名</param>
            <param name="schema">架构名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.JoinClause.Join(Bing.Datas.Sql.ISqlBuilder,System.String)">
            <summary>
            内连接子查询
            </summary>
            <param name="builder">Sql生成器</param>
            <param name="alias">表别名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.JoinClause.AppendJoin(System.String,Bing.Datas.Sql.ISqlBuilder,System.String)">
            <summary>
            添加到连接子句
            </summary>
            <param name="joinType">连接类型</param>
            <param name="builder">Sql生成器</param>
            <param name="alias">表别名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.JoinClause.Join(System.Action{Bing.Datas.Sql.ISqlBuilder},System.String)">
            <summary>
            内连接子查询
            </summary>
            <param name="action">子查询操作</param>
            <param name="alias">表别名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.JoinClause.AppendJoin(System.String,System.Action{Bing.Datas.Sql.ISqlBuilder},System.String)">
            <summary>
            添加到连接子句
            </summary>
            <param name="joinType">连接类型</param>
            <param name="action">子查询操作</param>
            <param name="alias">表别名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.JoinClause.AppendJoin(System.String)">
            <summary>
            添加到内连接子句
            </summary>
            <param name="sql">Sql语句</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.JoinClause.AppendJoin(System.String,System.String)">
            <summary>
            添加到连接子句
            </summary>
            <param name="joinType">连接类型</param>
            <param name="sql">Sql语句</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.JoinClause.LeftJoin(System.String,System.String)">
            <summary>
            左外连接
            </summary>
            <param name="table">表名</param>
            <param name="alias">别名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.JoinClause.LeftJoin``1(System.String,System.String)">
            <summary>
            左外连接
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="alias">别名</param>
            <param name="schema">架构名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.JoinClause.LeftJoin(Bing.Datas.Sql.ISqlBuilder,System.String)">
            <summary>
            左外连接子查询
            </summary>
            <param name="builder">Sql生成器</param>
            <param name="alias">表别名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.JoinClause.LeftJoin(System.Action{Bing.Datas.Sql.ISqlBuilder},System.String)">
            <summary>
            左外连接子查询
            </summary>
            <param name="action">子查询操作</param>
            <param name="alias">表别名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.JoinClause.AppendLeftJoin(System.String)">
            <summary>
            添加到左外连接子句
            </summary>
            <param name="sql">Sql语句</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.JoinClause.RightJoin(System.String,System.String)">
            <summary>
            右外连接
            </summary>
            <param name="table">表名</param>
            <param name="alias">别名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.JoinClause.RightJoin``1(System.String,System.String)">
            <summary>
            右外连接
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="alias">别名</param>
            <param name="schema">架构名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.JoinClause.RightJoin(Bing.Datas.Sql.ISqlBuilder,System.String)">
            <summary>
            右外连接子查询
            </summary>
            <param name="builder">Sql生成器</param>
            <param name="alias">表别名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.JoinClause.RightJoin(System.Action{Bing.Datas.Sql.ISqlBuilder},System.String)">
            <summary>
            右外连接子查询
            </summary>
            <param name="action">子查询操作</param>
            <param name="alias">表别名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.JoinClause.AppendRightJoin(System.String)">
            <summary>
            添加到右外连接子句
            </summary>
            <param name="sql">Sql语句</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.JoinClause.On(Bing.Datas.Sql.Builders.ICondition)">
            <summary>
            设置连接条件
            </summary>
            <param name="condition">连接条件</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.JoinClause.On(System.String,System.Object,Bing.Utils.Operator)">
            <summary>
            设置连接条件
            </summary>
            <param name="column">列名</param>
            <param name="value">值</param>
            <param name="operator">运算符</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.JoinClause.On``2(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``1,System.Object}},Bing.Utils.Operator)">
            <summary>
            设置连接条件
            </summary>
            <typeparam name="TLeft">左表实体类型</typeparam>
            <typeparam name="TRight">右表实体类型</typeparam>
            <param name="left">左表列名</param>
            <param name="right">右表列名</param>
            <param name="operator">条件运算符</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.JoinClause.GetColumn``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            获取列
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="column">列名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.JoinClause.GetColumn(System.Type,System.String)">
            <summary>
            获取列
            </summary>
            <param name="entity">实体类型</param>
            <param name="column">列名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.JoinClause.On``2(System.Linq.Expressions.Expression{System.Func{``0,``1,System.Boolean}})">
            <summary>
            设置连接条件
            </summary>
            <typeparam name="TLeft">左表实体类型</typeparam>
            <typeparam name="TRight">右表实体类型</typeparam>
            <param name="expression">条件表达式</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.JoinClause.GetOnItems(System.Collections.Generic.List{System.Linq.Expressions.Expression})">
            <summary>
            设置连接条件组
            </summary>
            <param name="group">条件组</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.JoinClause.GetColumn(System.Linq.Expressions.Expression,System.Boolean)">
            <summary>
            获取列
            </summary>
            <param name="expression">表达式</param>
            <param name="right">是否取右侧操作数</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.JoinClause.AppendOn(System.String)">
            <summary>
            添加到On子句
            </summary>
            <param name="sql">Sql语句</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.JoinClause.ToSql">
            <summary>
            输出Sql
            </summary>
        </member>
        <member name="T:Bing.Datas.Sql.Builders.Clauses.OrderByClause">
            <summary>
            Order By子句
            </summary>
        </member>
        <member name="F:Bing.Datas.Sql.Builders.Clauses.OrderByClause._items">
            <summary>
            排序项列表
            </summary>
        </member>
        <member name="F:Bing.Datas.Sql.Builders.Clauses.OrderByClause._dialect">
            <summary>
            Sql方言
            </summary>
        </member>
        <member name="F:Bing.Datas.Sql.Builders.Clauses.OrderByClause._resolver">
            <summary>
            实体解析器
            </summary>
        </member>
        <member name="F:Bing.Datas.Sql.Builders.Clauses.OrderByClause._register">
            <summary>
            实体别名注册器
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.OrderByClause.#ctor(Bing.Datas.Sql.Builders.IDialect,Bing.Datas.Sql.Builders.IEntityResolver,Bing.Datas.Sql.Builders.IEntityAliasRegister,System.Collections.Generic.List{Bing.Datas.Sql.Builders.Core.OrderByItem})">
            <summary>
            初始化一个<see cref="T:Bing.Datas.Sql.Builders.Clauses.OrderByClause"/>类型的实例
            </summary>
            <param name="dialect">Sql方言</param>
            <param name="resolver">实体解析器</param>
            <param name="register">实体别名注册器</param>
            <param name="items">排序项列表</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.OrderByClause.Clone(Bing.Datas.Sql.Builders.IEntityAliasRegister)">
            <summary>
            克隆
            </summary>
            <param name="register">实体别名注册器</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.OrderByClause.OrderBy(System.String,System.String)">
            <summary>
            排序
            </summary>
            <param name="order">排序列表</param>
            <param name="tableAlias">表别名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.OrderByClause.AddItem(System.String,System.Boolean,System.Type,System.String)">
            <summary>
            添加排序项
            </summary>
            <param name="column">排序列</param>
            <param name="desc">是否倒序</param>
            <param name="type">实体类型</param>
            <param name="tableAlias">表别名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.OrderByClause.Exists(System.String,System.String)">
            <summary>
            是否已存在
            </summary>
            <param name="column">排序列</param>
            <param name="tableAlias">表别名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.OrderByClause.OrderBy``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Boolean)">
            <summary>
            排序
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="column">排序列</param>
            <param name="desc">是否倒序</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.OrderByClause.AppendSql(System.String)">
            <summary>
            添加到OrderBy子句
            </summary>
            <param name="sql">Sql语句</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.OrderByClause.Validate(System.Boolean)">
            <summary>
            验证
            </summary>
            <param name="isPage">是否分页</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.OrderByClause.ToSql">
            <summary>
            获取Sql
            </summary>
        </member>
        <member name="T:Bing.Datas.Sql.Builders.Clauses.SelectClause">
            <summary>
            Select子句
            </summary>
        </member>
        <member name="F:Bing.Datas.Sql.Builders.Clauses.SelectClause._sqlBuilder">
            <summary>
            Sql生成器
            </summary>
        </member>
        <member name="F:Bing.Datas.Sql.Builders.Clauses.SelectClause._dialect">
            <summary>
            Sql方言
            </summary>
        </member>
        <member name="F:Bing.Datas.Sql.Builders.Clauses.SelectClause._resolver">
            <summary>
            实体解析器
            </summary>
        </member>
        <member name="F:Bing.Datas.Sql.Builders.Clauses.SelectClause._register">
            <summary>
            实体别名注册器
            </summary>
        </member>
        <member name="F:Bing.Datas.Sql.Builders.Clauses.SelectClause._columns">
            <summary>
            列集合
            </summary>
        </member>
        <member name="F:Bing.Datas.Sql.Builders.Clauses.SelectClause._distinct">
            <summary>
            是否排除重复记录
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.SelectClause.#ctor(Bing.Datas.Sql.ISqlBuilder,Bing.Datas.Sql.Builders.IDialect,Bing.Datas.Sql.Builders.IEntityResolver,Bing.Datas.Sql.Builders.IEntityAliasRegister,Bing.Datas.Sql.Builders.Core.ColumnCollection)">
            <summary>
            初始化一个<see cref="T:Bing.Datas.Sql.Builders.Clauses.SelectClause"/>类型的实例
            </summary>
            <param name="sqlBuilder">Sql生成器</param>
            <param name="dialect">Sql方言</param>
            <param name="resolver">实体解析器</param>
            <param name="register">实体别名注册器</param>
            <param name="columns">列名集合</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.SelectClause.Clone(Bing.Datas.Sql.ISqlBuilder,Bing.Datas.Sql.Builders.IEntityAliasRegister)">
            <summary>
            克隆
            </summary>
            <param name="builder">Sql生成器</param>
            <param name="register">实体别名注册器</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.SelectClause.Distinct">
            <summary>
            过滤重复记录
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.SelectClause.Count(System.String)">
            <summary>
            求总行数
            </summary>
            <param name="columnAlias">列别名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.SelectClause.Count(System.String,System.String)">
            <summary>
            求总行数
            </summary>
            <param name="column">列</param>
            <param name="columnAlias">列别名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.SelectClause.Count``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String)">
            <summary>
            求总行数
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="expression">列名表达式</param>
            <param name="columnAlias">列别名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.SelectClause.Aggregate(System.String,System.String)">
            <summary>
            聚合
            </summary>
            <param name="sql">Sql语句</param>
            <param name="columnAlias">列别名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.SelectClause.Sum(System.String,System.String)">
            <summary>
            求和
            </summary>
            <param name="column">列</param>
            <param name="columnAlias">列别名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.SelectClause.Aggregate(System.String,System.String,System.String)">
            <summary>
            聚合
            </summary>
            <param name="func">函数名</param>
            <param name="column">列名</param>
            <param name="columnAlias">列别名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.SelectClause.Sum``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String)">
            <summary>
            求和
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="expression">列名表达式</param>
            <param name="columnAlias">列别名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.SelectClause.Avg(System.String,System.String)">
            <summary>
            求平均值
            </summary>
            <param name="column">列</param>
            <param name="columnAlias">列别名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.SelectClause.Avg``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String)">
            <summary>
            求平均值
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="expression">列名表达式</param>
            <param name="columnAlias">列别名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.SelectClause.Max(System.String,System.String)">
            <summary>
            求最大值
            </summary>
            <param name="column">列</param>
            <param name="columnAlias">列别名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.SelectClause.Max``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String)">
            <summary>
            求最大值
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="expression">列名表达式</param>
            <param name="columnAlias">列别名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.SelectClause.Min(System.String,System.String)">
            <summary>
            求最小值
            </summary>
            <param name="column">列</param>
            <param name="columnAlias">列别名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.SelectClause.Min``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String)">
            <summary>
            求最小值
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="expression">列名表达式</param>
            <param name="columnAlias">列别名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.SelectClause.Select(System.String,System.String)">
            <summary>
            设置列名
            </summary>
            <param name="columns">列名</param>
            <param name="tableAlias">表别名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.SelectClause.Select``1(System.Boolean)">
            <summary>
            设置列名
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="propertyAsAlias">是否将属性名映射为列别名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.SelectClause.Select``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object[]}},System.Boolean)">
            <summary>
            设置列名
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="expression">列名表达式</param>
            <param name="propertyAsAlias">是否将属性名映射为列别名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.SelectClause.Select``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String)">
            <summary>
            设置列名
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="expression">列名表达式</param>
            <param name="columnAlias">列别名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.SelectClause.Select(Bing.Datas.Sql.ISqlBuilder,System.String)">
            <summary>
            设置子查询列
            </summary>
            <param name="builder">Sql生成器</param>
            <param name="columnAlias">列别名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.SelectClause.Select(System.Action{Bing.Datas.Sql.ISqlBuilder},System.String)">
            <summary>
            设置子查询列
            </summary>
            <param name="action">子查询操作</param>
            <param name="columnAlias">列别名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.SelectClause.AppendSql(System.String,System.String)">
            <summary>
            添加到Select子句
            </summary>
            <param name="sql">Sql语句</param>
            <param name="columnAlias">列别名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.SelectClause.RemoveSelect(System.String,System.String)">
            <summary>
            移除列名
            </summary>
            <param name="columns">列名</param>
            <param name="tableAlias">表别名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.SelectClause.RemoveSelect``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object[]}})">
            <summary>
            移除列名
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="expression">列名表达式</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.SelectClause.RemoveSelect``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            移除列名
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="expression">列名表达式</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.SelectClause.ToSql">
            <summary>
            输出Sql
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.SelectClause.GetDistinct">
            <summary>
            获取Distinct
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.SelectClause.GetColumns">
            <summary>
            获取列名
            </summary>
        </member>
        <member name="T:Bing.Datas.Sql.Builders.Clauses.WhereClause">
            <summary>
            Where子句
            </summary>
        </member>
        <member name="F:Bing.Datas.Sql.Builders.Clauses.WhereClause.Builder">
            <summary>
            Sql生成器
            </summary>
        </member>
        <member name="F:Bing.Datas.Sql.Builders.Clauses.WhereClause._helper">
            <summary>
            辅助操作
            </summary>
        </member>
        <member name="F:Bing.Datas.Sql.Builders.Clauses.WhereClause._expressionResolver">
            <summary>
            谓词表达式解析器
            </summary>
        </member>
        <member name="F:Bing.Datas.Sql.Builders.Clauses.WhereClause._dialect">
            <summary>
            方言
            </summary>
        </member>
        <member name="F:Bing.Datas.Sql.Builders.Clauses.WhereClause._resolver">
            <summary>
            实体解析器
            </summary>
        </member>
        <member name="F:Bing.Datas.Sql.Builders.Clauses.WhereClause._condition">
            <summary>
            查询条件
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.WhereClause.#ctor(Bing.Datas.Sql.ISqlBuilder,Bing.Datas.Sql.Builders.IDialect,Bing.Datas.Sql.Builders.IEntityResolver,Bing.Datas.Sql.Builders.IEntityAliasRegister,Bing.Datas.Sql.Builders.IParameterManager,Bing.Datas.Sql.Builders.ICondition)">
            <summary>
            初始化一个<see cref="T:Bing.Datas.Sql.Builders.Clauses.WhereClause"/>类型的实例
            </summary>
            <param name="builder">Sql生成器</param>
            <param name="dialect">Sql方言</param>
            <param name="resolver">实体解析器</param>
            <param name="register">实体别名注册器</param>
            <param name="parameterManager">参数管理器</param>
            <param name="condition">查询条件</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.WhereClause.Clone(Bing.Datas.Sql.ISqlBuilder,Bing.Datas.Sql.Builders.IEntityAliasRegister,Bing.Datas.Sql.Builders.IParameterManager)">
            <summary>
            克隆
            </summary>
            <param name="builder">Sql生成器</param>
            <param name="register">实体别名注册器</param>
            <param name="parameterManager">参数管理器</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.WhereClause.And(Bing.Datas.Sql.Builders.ICondition)">
            <summary>
            And连接条件
            </summary>
            <param name="condition">查询条件</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.WhereClause.Or(Bing.Datas.Sql.Builders.ICondition)">
            <summary>
            Or连接条件
            </summary>
            <param name="condition">查询条件</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.WhereClause.Or``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}[])">
            <summary>
            Or连接条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="conditions">查询条件</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.WhereClause.OrIfNotEmpty``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}[])">
            <summary>
            Or连接条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="conditions">查询条件</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.WhereClause.Where(Bing.Datas.Sql.Builders.ICondition)">
            <summary>
            设置查询条件
            </summary>
            <param name="condition">查询条件</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.WhereClause.Where(System.String,System.Object,Bing.Utils.Operator)">
            <summary>
            设置查询条件
            </summary>
            <param name="column">列名</param>
            <param name="value">值</param>
            <param name="operator">运算符</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.WhereClause.Where``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object,Bing.Utils.Operator)">
            <summary>
            设置查询条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="expression">列名表达式</param>
            <param name="value">值</param>
            <param name="operator">运算符</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.WhereClause.Where``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            设置查询条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="expression">查询条件表达式</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.WhereClause.Where(System.String,Bing.Datas.Sql.ISqlBuilder,Bing.Utils.Operator)">
            <summary>
            设置子查询条件
            </summary>
            <param name="column">列名</param>
            <param name="builder">子查询Sql生成器</param>
            <param name="operator">运算符</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.WhereClause.Where``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},Bing.Datas.Sql.ISqlBuilder,Bing.Utils.Operator)">
            <summary>
            设置子查询条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="expression">列名表达式</param>
            <param name="builder">子查询Sql生成器</param>
            <param name="operator">运算符</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.WhereClause.Where(System.String,System.Action{Bing.Datas.Sql.ISqlBuilder},Bing.Utils.Operator)">
            <summary>
            设置子查询条件
            </summary>
            <param name="column">列名</param>
            <param name="action">子查询操作</param>
            <param name="operator">运算符</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.WhereClause.Where``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Action{Bing.Datas.Sql.ISqlBuilder},Bing.Utils.Operator)">
            <summary>
            设置子查询条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="expression">列名表达式</param>
            <param name="action">子查询操作</param>
            <param name="operator">运算符</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.WhereClause.WhereIfNotEmpty(System.String,System.Object,Bing.Utils.Operator)">
            <summary>
            设置查询条件
            </summary>
            <param name="column">列名</param>
            <param name="value">值，如果该值为空，则忽略该查询条件</param>
            <param name="operator">运算符</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.WhereClause.WhereIfNotEmpty``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object,Bing.Utils.Operator)">
            <summary>
            设置查询条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="expression">列名表达式</param>
            <param name="value">值，如果该值为空，则忽略该查询条件</param>
            <param name="operator">运算符</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.WhereClause.WhereIfNotEmpty``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            设置查询条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="expression">查询条件表达式，如果参数值为空，则忽略该查询条件</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.WhereClause.IsNull(System.String)">
            <summary>
            设置Is Null条件
            </summary>
            <param name="column">列名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.WhereClause.IsNull``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            设置Is Null条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="expression">列名表达式</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.WhereClause.IsNotNull(System.String)">
            <summary>
            设置Is Not Null条件
            </summary>
            <param name="column">列名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.WhereClause.IsNotNull``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            设置Is Not Null条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="expression">列名表达式</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.WhereClause.IsEmpty(System.String)">
            <summary>
            设置空条件
            </summary>
            <param name="column">列名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.WhereClause.IsEmpty``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            设置空条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="expression">列名表达式</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.WhereClause.IsNotEmpty(System.String)">
            <summary>
            设置非空条件
            </summary>
            <param name="column">列名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.WhereClause.IsNotEmpty``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            设置非空条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="expression">列名表达式</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.WhereClause.In(System.String,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            设置In条件
            </summary>
            <param name="column">列名</param>
            <param name="values">值集合</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.WhereClause.In``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            设置In条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="expression">列名表达式</param>
            <param name="values">值集合</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.WhereClause.In(System.String,Bing.Datas.Sql.ISqlBuilder)">
            <summary>
            设置In条件
            </summary>
            <param name="column">列名</param>
            <param name="builder">Sql生成器</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.WhereClause.AppendSqlBuilder(System.String,System.String,Bing.Datas.Sql.ISqlBuilder)">
            <summary>
            添加子查询
            </summary>
            <param name="operation">操作符</param>
            <param name="column">列名</param>
            <param name="builder">Sql生成器</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.WhereClause.In``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},Bing.Datas.Sql.ISqlBuilder)">
            <summary>
            设置In条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="expression">列名表达式</param>
            <param name="builder">Sql生成器</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.WhereClause.In(System.String,System.Action{Bing.Datas.Sql.ISqlBuilder})">
            <summary>
            设置In条件
            </summary>
            <param name="column">列名</param>
            <param name="action">子查询操作</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.WhereClause.In``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Action{Bing.Datas.Sql.ISqlBuilder})">
            <summary>
            设置In条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="expression">列名表达式</param>
            <param name="action">子查询操作</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.WhereClause.NotIn(System.String,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            设置Not In条件
            </summary>
            <param name="column">列名</param>
            <param name="values">值集合</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.WhereClause.NotIn``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            设置Not In条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="expression">列名表达式</param>
            <param name="values">值集合</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.WhereClause.NotIn(System.String,Bing.Datas.Sql.ISqlBuilder)">
            <summary>
            设置Not In条件
            </summary>
            <param name="column">列名</param>
            <param name="builder">Sql生成器</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.WhereClause.NotIn``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},Bing.Datas.Sql.ISqlBuilder)">
            <summary>
            设置Not In条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="expression">列名表达式</param>
            <param name="builder">Sql生成器</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.WhereClause.NotIn(System.String,System.Action{Bing.Datas.Sql.ISqlBuilder})">
            <summary>
            设置Not In条件
            </summary>
            <param name="column">列名</param>
            <param name="action">子查询操作</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.WhereClause.NotIn``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Action{Bing.Datas.Sql.ISqlBuilder})">
            <summary>
            设置Not In条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="expression">列名表达式</param>
            <param name="action">子查询操作</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.WhereClause.Exists(Bing.Datas.Sql.ISqlBuilder)">
            <summary>
            设置Exists条件
            </summary>
            <param name="builder">Sql生成器</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.WhereClause.Exists(System.Action{Bing.Datas.Sql.ISqlBuilder})">
            <summary>
            设置Exists条件
            </summary>
            <param name="action">子查询操作</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.WhereClause.NotExists(Bing.Datas.Sql.ISqlBuilder)">
            <summary>
            设置Not Exists条件
            </summary>
            <param name="builder">Sql生成器</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.WhereClause.NotExists(System.Action{Bing.Datas.Sql.ISqlBuilder})">
            <summary>
            设置Not Exists条件
            </summary>
            <param name="action">子查询操作</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.WhereClause.Between``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Nullable{System.Int32},System.Nullable{System.Int32},Bing.Datas.Queries.Boundary)">
            <summary>
            添加范围查询条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="expression">列名表达式</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <param name="boundary">包含边界</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.WhereClause.Between``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Nullable{System.Int64},System.Nullable{System.Int64},Bing.Datas.Queries.Boundary)">
            <summary>
            添加范围查询条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="expression">列名表达式</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <param name="boundary">包含边界</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.WhereClause.Between``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Nullable{System.Single},System.Nullable{System.Single},Bing.Datas.Queries.Boundary)">
            <summary>
            添加范围查询条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="expression">列名表达式</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <param name="boundary">包含边界</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.WhereClause.Between``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Nullable{System.Double},System.Nullable{System.Double},Bing.Datas.Queries.Boundary)">
            <summary>
            添加范围查询条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="expression">列名表达式</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <param name="boundary">包含边界</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.WhereClause.Between``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Nullable{System.Decimal},System.Nullable{System.Decimal},Bing.Datas.Queries.Boundary)">
            <summary>
            添加范围查询条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="expression">列名表达式</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <param name="boundary">包含边界</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.WhereClause.Between``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Boolean,System.Nullable{Bing.Datas.Queries.Boundary})">
            <summary>
            添加范围查询条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="expression">列名表达式</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <param name="includeTime">是否包含时间</param>
            <param name="boundary">包含边界</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.WhereClause.Between(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},Bing.Datas.Queries.Boundary)">
            <summary>
            添加范围查询条件
            </summary>
            <param name="column">列名</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <param name="boundary">包含边界</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.WhereClause.Between(System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},Bing.Datas.Queries.Boundary)">
            <summary>
            添加范围查询条件
            </summary>
            <param name="column">列名</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <param name="boundary">包含边界</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.WhereClause.Between(System.String,System.Nullable{System.Single},System.Nullable{System.Single},Bing.Datas.Queries.Boundary)">
            <summary>
            添加范围查询条件
            </summary>
            <param name="column">列名</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <param name="boundary">包含边界</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.WhereClause.Between(System.String,System.Nullable{System.Double},System.Nullable{System.Double},Bing.Datas.Queries.Boundary)">
            <summary>
            添加范围查询条件
            </summary>
            <param name="column">列名</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <param name="boundary">包含边界</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.WhereClause.Between(System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},Bing.Datas.Queries.Boundary)">
            <summary>
            添加范围查询条件
            </summary>
            <param name="column">列名</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <param name="boundary">包含边界</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.WhereClause.Between(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Boolean,System.Nullable{Bing.Datas.Queries.Boundary})">
            <summary>
            添加范围查询条件
            </summary>
            <param name="column">列名</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <param name="includeTime">是否包含时间</param>
            <param name="boundary">包含边界</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.WhereClause.GetMin(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Boolean)">
            <summary>
            获取最小日期
            </summary>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <param name="includeTime">是否包含时间</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.WhereClause.GetMax(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Boolean)">
            <summary>
            获取最大日期
            </summary>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <param name="includeTime">是否包含时间</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.WhereClause.GetBoundary(System.Nullable{Bing.Datas.Queries.Boundary},System.Boolean)">
            <summary>
            获取日期范围查询条件边界
            </summary>
            <param name="boundary">包含边界</param>
            <param name="includeTime">是否包含时间</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.WhereClause.AppendSql(System.String)">
            <summary>
            添加到Where子句
            </summary>
            <param name="sql">Sql语句</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.WhereClause.ToSql">
            <summary>
            输出Sql
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Clauses.WhereClause.GetCondition">
            <summary>
            获取查询条件
            </summary>
        </member>
        <member name="T:Bing.Datas.Sql.Builders.Conditions.AndCondition">
            <summary>
            And连接条件
            </summary>
        </member>
        <member name="F:Bing.Datas.Sql.Builders.Conditions.AndCondition._left">
            <summary>
            左操作数
            </summary>
        </member>
        <member name="F:Bing.Datas.Sql.Builders.Conditions.AndCondition._right">
            <summary>
            右操作数
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Conditions.AndCondition.#ctor(System.String,System.String)">
            <summary>
            初始化一个<see cref="T:Bing.Datas.Sql.Builders.Conditions.AndCondition"/>类型的实例
            </summary>
            <param name="left">左操作数</param>
            <param name="right">右操作数</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Conditions.AndCondition.#ctor(Bing.Datas.Sql.Builders.ICondition,Bing.Datas.Sql.Builders.ICondition)">
            <summary>
            初始化一个<see cref="T:Bing.Datas.Sql.Builders.Conditions.AndCondition"/>类型的实例
            </summary>
            <param name="left">左操作数</param>
            <param name="right">右操作数</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Conditions.AndCondition.GetCondition">
            <summary>
            获取查询条件
            </summary>
        </member>
        <member name="T:Bing.Datas.Sql.Builders.Conditions.EqualCondition">
            <summary>
            Sql相等查询条件
            </summary>
        </member>
        <member name="F:Bing.Datas.Sql.Builders.Conditions.EqualCondition._left">
            <summary>
            左操作数
            </summary>
        </member>
        <member name="F:Bing.Datas.Sql.Builders.Conditions.EqualCondition._right">
            <summary>
            右操作数
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Conditions.EqualCondition.#ctor(System.String,System.String)">
            <summary>
            初始化一个<see cref="T:Bing.Datas.Sql.Builders.Conditions.EqualCondition"/>类型的实例
            </summary>
            <param name="left">左操作数</param>
            <param name="right">右操作数</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Conditions.EqualCondition.GetCondition">
            <summary>
            获取查询条件
            </summary>
        </member>
        <member name="T:Bing.Datas.Sql.Builders.Conditions.GreaterCondition">
            <summary>
            Sql大于查询条件
            </summary>
        </member>
        <member name="F:Bing.Datas.Sql.Builders.Conditions.GreaterCondition._left">
            <summary>
            左操作数
            </summary>
        </member>
        <member name="F:Bing.Datas.Sql.Builders.Conditions.GreaterCondition._right">
            <summary>
            右操作数
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Conditions.GreaterCondition.#ctor(System.String,System.String)">
            <summary>
            初始化一个<see cref="T:Bing.Datas.Sql.Builders.Conditions.GreaterCondition"/>类型的实例
            </summary>
            <param name="left">左操作数</param>
            <param name="right">右操作数</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Conditions.GreaterCondition.GetCondition">
            <summary>
            获取查询条件
            </summary>
        </member>
        <member name="T:Bing.Datas.Sql.Builders.Conditions.GreaterEqualCondition">
            <summary>
            Sql大于等于查询条件
            </summary>
        </member>
        <member name="F:Bing.Datas.Sql.Builders.Conditions.GreaterEqualCondition._left">
            <summary>
            左操作数
            </summary>
        </member>
        <member name="F:Bing.Datas.Sql.Builders.Conditions.GreaterEqualCondition._right">
            <summary>
            右操作数
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Conditions.GreaterEqualCondition.#ctor(System.String,System.String)">
            <summary>
            初始化一个<see cref="T:Bing.Datas.Sql.Builders.Conditions.GreaterEqualCondition"/>类型的实例
            </summary>
            <param name="left">左操作数</param>
            <param name="right">右操作数</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Conditions.GreaterEqualCondition.GetCondition">
            <summary>
            获取查询条件
            </summary>
        </member>
        <member name="T:Bing.Datas.Sql.Builders.Conditions.InCondition">
            <summary>
            In查询条件
            </summary>
        </member>
        <member name="F:Bing.Datas.Sql.Builders.Conditions.InCondition._name">
            <summary>
            列名
            </summary>
        </member>
        <member name="F:Bing.Datas.Sql.Builders.Conditions.InCondition._values">
            <summary>
            值集合
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Conditions.InCondition.#ctor(System.String,System.Collections.Generic.IList{System.String})">
            <summary>
            初始化一个<see cref="T:Bing.Datas.Sql.Builders.Conditions.InCondition"/>类型的实例
            </summary>
            <param name="name">列名</param>
            <param name="values">值集合</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Conditions.InCondition.GetCondition">
            <summary>
            获取查询条件
            </summary>
        </member>
        <member name="T:Bing.Datas.Sql.Builders.Conditions.IsNotNullCondition">
            <summary>
            Is Not Null查询条件
            </summary>
        </member>
        <member name="F:Bing.Datas.Sql.Builders.Conditions.IsNotNullCondition._name">
            <summary>
            列名
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Conditions.IsNotNullCondition.#ctor(System.String)">
            <summary>
            初始化一个<see cref="T:Bing.Datas.Sql.Builders.Conditions.IsNotNullCondition"/>类型的实例
            </summary>
            <param name="name">列名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Conditions.IsNotNullCondition.GetCondition">
            <summary>
            获取查询条件
            </summary>
        </member>
        <member name="T:Bing.Datas.Sql.Builders.Conditions.IsNullCondition">
            <summary>
            Is Null查询条件
            </summary>
        </member>
        <member name="F:Bing.Datas.Sql.Builders.Conditions.IsNullCondition._name">
            <summary>
            列名
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Conditions.IsNullCondition.#ctor(System.String)">
            <summary>
            初始化一个<see cref="T:Bing.Datas.Sql.Builders.Conditions.IsNullCondition"/>类型的实例
            </summary>
            <param name="name">列名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Conditions.IsNullCondition.GetCondition">
            <summary>
            获取查询条件
            </summary>
        </member>
        <member name="T:Bing.Datas.Sql.Builders.Conditions.LessCondition">
            <summary>
            Sql小于查询条件
            </summary>
        </member>
        <member name="F:Bing.Datas.Sql.Builders.Conditions.LessCondition._left">
            <summary>
            左操作数
            </summary>
        </member>
        <member name="F:Bing.Datas.Sql.Builders.Conditions.LessCondition._right">
            <summary>
            右操作数
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Conditions.LessCondition.#ctor(System.String,System.String)">
            <summary>
            初始化一个<see cref="T:Bing.Datas.Sql.Builders.Conditions.LessCondition"/>类型的实例
            </summary>
            <param name="left">左操作数</param>
            <param name="right">右操作数</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Conditions.LessCondition.GetCondition">
            <summary>
            获取查询条件
            </summary>
        </member>
        <member name="T:Bing.Datas.Sql.Builders.Conditions.LessEqualCondition">
            <summary>
            Sql小于等于查询条件
            </summary>
        </member>
        <member name="F:Bing.Datas.Sql.Builders.Conditions.LessEqualCondition._left">
            <summary>
            左操作数
            </summary>
        </member>
        <member name="F:Bing.Datas.Sql.Builders.Conditions.LessEqualCondition._right">
            <summary>
            右操作数
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Conditions.LessEqualCondition.#ctor(System.String,System.String)">
            <summary>
            初始化一个<see cref="T:Bing.Datas.Sql.Builders.Conditions.LessEqualCondition"/>类型的实例
            </summary>
            <param name="left">左操作数</param>
            <param name="right">右操作数</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Conditions.LessEqualCondition.GetCondition">
            <summary>
            获取查询条件
            </summary>
        </member>
        <member name="T:Bing.Datas.Sql.Builders.Conditions.LikeCondition">
            <summary>
            Sql模糊查询条件
            </summary>
        </member>
        <member name="F:Bing.Datas.Sql.Builders.Conditions.LikeCondition._left">
            <summary>
            左操作数
            </summary>
        </member>
        <member name="F:Bing.Datas.Sql.Builders.Conditions.LikeCondition._right">
            <summary>
            右操作数
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Conditions.LikeCondition.#ctor(System.String,System.String)">
            <summary>
            初始化一个<see cref="T:Bing.Datas.Sql.Builders.Conditions.LikeCondition"/>类型的实例
            </summary>
            <param name="left">左操作数</param>
            <param name="right">右操作数</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Conditions.LikeCondition.GetCondition">
            <summary>
            获取查询条件
            </summary>
        </member>
        <member name="T:Bing.Datas.Sql.Builders.Conditions.NotEqualCondition">
            <summary>
            Sql不相等查询条件
            </summary>
        </member>
        <member name="F:Bing.Datas.Sql.Builders.Conditions.NotEqualCondition._left">
            <summary>
            左操作数
            </summary>
        </member>
        <member name="F:Bing.Datas.Sql.Builders.Conditions.NotEqualCondition._right">
            <summary>
            右操作数
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Conditions.NotEqualCondition.#ctor(System.String,System.String)">
            <summary>
            初始化一个<see cref="T:Bing.Datas.Sql.Builders.Conditions.NotEqualCondition"/>类型的实例
            </summary>
            <param name="left">左操作数</param>
            <param name="right">右操作数</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Conditions.NotEqualCondition.GetCondition">
            <summary>
            获取查询条件
            </summary>
        </member>
        <member name="T:Bing.Datas.Sql.Builders.Conditions.NotInCondition">
            <summary>
            Not In查询条件
            </summary>
        </member>
        <member name="F:Bing.Datas.Sql.Builders.Conditions.NotInCondition._name">
            <summary>
            列名
            </summary>
        </member>
        <member name="F:Bing.Datas.Sql.Builders.Conditions.NotInCondition._values">
            <summary>
            值集合
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Conditions.NotInCondition.#ctor(System.String,System.Collections.Generic.IList{System.String})">
            <summary>
            初始化一个<see cref="T:Bing.Datas.Sql.Builders.Conditions.NotInCondition"/>类型的实例
            </summary>
            <param name="name">列名</param>
            <param name="values">值集合</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Conditions.NotInCondition.GetCondition">
            <summary>
            获取查询条件
            </summary>
        </member>
        <member name="T:Bing.Datas.Sql.Builders.Conditions.NullCondition">
            <summary>
            空查询条件
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Conditions.NullCondition.#ctor">
            <summary>
            初始化一个<see cref="T:Bing.Datas.Sql.Builders.Conditions.NullCondition"/>类型的实例
            </summary>
        </member>
        <member name="F:Bing.Datas.Sql.Builders.Conditions.NullCondition.Instance">
            <summary>
            空查询条件实例
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Conditions.NullCondition.GetCondition">
            <summary>
            获取查询条件
            </summary>
        </member>
        <member name="T:Bing.Datas.Sql.Builders.Conditions.OrCondition">
            <summary>
            Or连接条件
            </summary>
        </member>
        <member name="F:Bing.Datas.Sql.Builders.Conditions.OrCondition._left">
            <summary>
            左操作数
            </summary>
        </member>
        <member name="F:Bing.Datas.Sql.Builders.Conditions.OrCondition._right">
            <summary>
            右操作数
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Conditions.OrCondition.#ctor(System.String,System.String)">
            <summary>
            初始化一个<see cref="T:Bing.Datas.Sql.Builders.Conditions.OrCondition"/>类型的实例
            </summary>
            <param name="left">左操作数</param>
            <param name="right">右操作数</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Conditions.OrCondition.#ctor(Bing.Datas.Sql.Builders.ICondition,Bing.Datas.Sql.Builders.ICondition)">
            <summary>
            初始化一个<see cref="T:Bing.Datas.Sql.Builders.Conditions.OrCondition"/>类型的实例
            </summary>
            <param name="left">左操作数</param>
            <param name="right">右操作数</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Conditions.OrCondition.GetCondition">
            <summary>
            获取查询条件
            </summary>
        </member>
        <member name="T:Bing.Datas.Sql.Builders.Conditions.SegmentCondition">
            <summary>
            范围过滤条件
            </summary>
        </member>
        <member name="F:Bing.Datas.Sql.Builders.Conditions.SegmentCondition._name">
            <summary>
            列名
            </summary>
        </member>
        <member name="F:Bing.Datas.Sql.Builders.Conditions.SegmentCondition._min">
            <summary>
            最小值
            </summary>
        </member>
        <member name="F:Bing.Datas.Sql.Builders.Conditions.SegmentCondition._max">
            <summary>
            最大值
            </summary>
        </member>
        <member name="F:Bing.Datas.Sql.Builders.Conditions.SegmentCondition._boundary">
            <summary>
            包含边界
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Conditions.SegmentCondition.#ctor(System.String,System.String,System.String,Bing.Datas.Queries.Boundary)">
            <summary>
            初始化一个<see cref="T:Bing.Datas.Sql.Builders.Conditions.SegmentCondition"/>类型的实例
            </summary>
            <param name="name">列名</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <param name="boundary">包含边界</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Conditions.SegmentCondition.GetCondition">
            <summary>
            获取查询条件
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Conditions.SegmentCondition.CreateLeftCondition">
            <summary>
            创建左条件
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Conditions.SegmentCondition.CreateLeftOperator">
            <summary>
            创建左操作符
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Conditions.SegmentCondition.CreateRightCondition">
            <summary>
            创建右条件
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Conditions.SegmentCondition.CreateRightOperator">
            <summary>
            创建右操作符
            </summary>
        </member>
        <member name="T:Bing.Datas.Sql.Builders.Conditions.SqlCondition">
            <summary>
            Sql查询条件
            </summary>
        </member>
        <member name="F:Bing.Datas.Sql.Builders.Conditions.SqlCondition._condition">
            <summary>
            Sql查询条件
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Conditions.SqlCondition.#ctor(System.String)">
            <summary>
            初始化一个<see cref="T:Bing.Datas.Sql.Builders.Conditions.SqlCondition"/>类型的实例
            </summary>
            <param name="condition">查询条件</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Conditions.SqlCondition.GetCondition">
            <summary>
             获取查询条件
            </summary>
        </member>
        <member name="T:Bing.Datas.Sql.Builders.Conditions.SqlConditionFactory">
            <summary>
            Sql查询条件工厂
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Conditions.SqlConditionFactory.Create(System.String,System.String,Bing.Utils.Operator)">
            <summary>
            创建Sql查询条件
            </summary>
            <param name="left">左操作数</param>
            <param name="right">右操作数</param>
            <param name="operator">操作符</param>
        </member>
        <member name="T:Bing.Datas.Sql.Builders.Core.BuilderItem">
            <summary>
            Sql生成器操作项
            </summary>
        </member>
        <member name="P:Bing.Datas.Sql.Builders.Core.BuilderItem.Name">
            <summary>
            操作名称
            </summary>
        </member>
        <member name="P:Bing.Datas.Sql.Builders.Core.BuilderItem.Builder">
            <summary>
            Sql生成器
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.BuilderItem.#ctor(System.String,Bing.Datas.Sql.ISqlBuilder)">
            <summary>
            初始化一个<see cref="T:Bing.Datas.Sql.Builders.Core.BuilderItem"/>类型的实例
            </summary>
            <param name="name">操作名称</param>
            <param name="builder">Sql生成器</param>
        </member>
        <member name="T:Bing.Datas.Sql.Builders.Core.ColumnCollection">
            <summary>
            列集合
            </summary>
        </member>
        <member name="F:Bing.Datas.Sql.Builders.Core.ColumnCollection._items">
            <summary>
            列集合
            </summary>
        </member>
        <member name="P:Bing.Datas.Sql.Builders.Core.ColumnCollection.Item(System.Int32)">
            <summary>
            获取列
            </summary>
            <param name="index">索引</param>
        </member>
        <member name="P:Bing.Datas.Sql.Builders.Core.ColumnCollection.Count">
            <summary>
            集合数量
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.ColumnCollection.#ctor(System.Collections.Generic.List{Bing.Datas.Sql.Builders.Core.ColumnItem})">
            <summary>
            初始化一个<see cref="T:Bing.Datas.Sql.Builders.Core.ColumnCollection"/>类型的实例
            </summary>
            <param name="items">列集合</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.ColumnCollection.AddColumns(System.String,System.String)">
            <summary>
            添加列集合
            </summary>
            <param name="columns">列集合</param>
            <param name="tableAlias">表别名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.ColumnCollection.CreateItem(System.String,System.String)">
            <summary>
            创建列
            </summary>
            <param name="column">列</param>
            <param name="tableAlias">表别名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.ColumnCollection.AddColumns(System.String,System.Type,System.String)">
            <summary>
            添加列集合
            </summary>
            <param name="columns">列集合</param>
            <param name="tableType">表类型</param>
            <param name="columnAlias">列别名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.ColumnCollection.CreateItem(System.String,System.Type,System.String)">
            <summary>
            创建列
            </summary>
            <param name="column">列名</param>
            <param name="tableType">表类型</param>
            <param name="columnAlias">列别名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.ColumnCollection.AddColumn(Bing.Datas.Sql.Builders.Core.ColumnItem)">
            <summary>
            添加列
            </summary>
            <param name="item">列</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.ColumnCollection.AddRawColumn(System.String,System.String)">
            <summary>
            添加原始列
            </summary>
            <param name="sql">Sql语句</param>
            <param name="columnAlias">列别名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.ColumnCollection.AddAggregationColumn(System.String,System.String)">
            <summary>
            添加聚合列
            </summary>
            <param name="column">列</param>
            <param name="columnAlias">列别名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.ColumnCollection.RemoveColumns(System.String,System.String)">
            <summary>
            移除列集合
            </summary>
            <param name="columns">列集合</param>
            <param name="tableAlias">表别名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.ColumnCollection.RemoveColumn(Bing.Datas.Sql.Builders.Core.ColumnItem)">
            <summary>
            移除列
            </summary>
            <param name="item">列</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.ColumnCollection.RemoveColumns(System.String,System.Type)">
            <summary>
            移除列集合
            </summary>
            <param name="columns">列集合</param>
            <param name="tableType">表实体类型</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.ColumnCollection.Clone">
            <summary>
            克隆
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.ColumnCollection.ToSql(Bing.Datas.Sql.Builders.IDialect,Bing.Datas.Sql.Builders.IEntityAliasRegister)">
            <summary>
            获取列名列表
            </summary>
            <param name="dialect">Sql方言</param>
            <param name="register">实体别名注册器</param>
        </member>
        <member name="T:Bing.Datas.Sql.Builders.Core.ColumnItem">
            <summary>
            列
            </summary>
        </member>
        <member name="P:Bing.Datas.Sql.Builders.Core.ColumnItem.Name">
            <summary>
            列名
            </summary>
        </member>
        <member name="P:Bing.Datas.Sql.Builders.Core.ColumnItem.TableAlias">
            <summary>
            表别名
            </summary>
        </member>
        <member name="P:Bing.Datas.Sql.Builders.Core.ColumnItem.ColumnAlias">
            <summary>
            列别名
            </summary>
        </member>
        <member name="P:Bing.Datas.Sql.Builders.Core.ColumnItem.Raw">
            <summary>
            是否使用原始值
            </summary>
        </member>
        <member name="P:Bing.Datas.Sql.Builders.Core.ColumnItem.TableType">
            <summary>
            表实体类型
            </summary>
        </member>
        <member name="P:Bing.Datas.Sql.Builders.Core.ColumnItem.IsAggregation">
            <summary>
            是否聚合函数
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.ColumnItem.#ctor(System.String,System.String,System.String,System.Type,System.Boolean,System.Boolean)">
            <summary>
            初始化一个<see cref="T:Bing.Datas.Sql.Builders.Core.ColumnItem"/>类型的实例
            </summary>
            <param name="name">列名</param>
            <param name="tableAlias">表别名</param>
            <param name="columnAlias">列别名</param>
            <param name="tableType">表类型</param>
            <param name="raw">是否使用原始值</param>
            <param name="isAggregation">是否聚合函数</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.ColumnItem.ToSql(Bing.Datas.Sql.Builders.IDialect,Bing.Datas.Sql.Builders.IEntityAliasRegister)">
            <summary>
            获取列名列表
            </summary>
            <param name="dialect">Sql方言</param>
            <param name="register">实体别名注册器</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.ColumnItem.GetTableAlias(Bing.Datas.Sql.Builders.IEntityAliasRegister)">
            <summary>
            获取表别名
            </summary>
            <param name="register">实体别名注册器</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.ColumnItem.Clone">
            <summary>
            克隆
            </summary>
        </member>
        <member name="T:Bing.Datas.Sql.Builders.Core.DialectBase">
            <summary>
            Sql方言基类
            </summary>
        </member>
        <member name="P:Bing.Datas.Sql.Builders.Core.DialectBase.OpeningIdentifier">
            <summary>
            起始转义标识符
            </summary>
        </member>
        <member name="P:Bing.Datas.Sql.Builders.Core.DialectBase.ClosingIdentifier">
            <summary>
            结束转义标识符
            </summary>
        </member>
        <member name="P:Bing.Datas.Sql.Builders.Core.DialectBase.BatchSeperator">
            <summary>
            批量操作分隔符
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.DialectBase.SafeName(System.String)">
            <summary>
            安全名称
            </summary>
            <param name="name">名称</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.DialectBase.FilterName(System.String)">
            <summary>
            过滤名称
            </summary>
            <param name="name">明后才能</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.DialectBase.GetSafeName(System.String)">
            <summary>
            获取安全名称
            </summary>
            <param name="name">名称</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.DialectBase.GetPrefix">
            <summary>
            获取参数前缀
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.DialectBase.SupportSelectAs">
            <summary>
            Select子句是否支持As关键字
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.DialectBase.GenerateName(System.Int32)">
            <summary>
            生成参数名
            </summary>
            <param name="paramIndex">参数索引</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.DialectBase.GetParamName(System.String)">
            <summary>
            获取参数名
            </summary>
            <param name="paramName">参数名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.DialectBase.GetParamValue(System.Object)">
            <summary>
            获取参数值
            </summary>
            <param name="paramValue">参数值</param>
        </member>
        <member name="T:Bing.Datas.Sql.Builders.Core.EntityAliasRegister">
            <summary>
            实体别名注册器
            </summary>
        </member>
        <member name="P:Bing.Datas.Sql.Builders.Core.EntityAliasRegister.FromType">
            <summary>
            From子句设置的实体类型
            </summary>
        </member>
        <member name="P:Bing.Datas.Sql.Builders.Core.EntityAliasRegister.Data">
            <summary>
            实体别名
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.EntityAliasRegister.#ctor(System.Collections.Generic.IDictionary{System.Type,System.String},System.Type)">
            <summary>
            初始化一个<see cref="T:Bing.Datas.Sql.Builders.Core.EntityAliasRegister"/>类型的实例
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.EntityAliasRegister.Register(System.Type,System.String)">
            <summary>
            注册实体别名
            </summary>
            <param name="entity">实体类型</param>
            <param name="alias">别名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.EntityAliasRegister.Contains(System.Type)">
            <summary>
            是否包含实体
            </summary>
            <param name="entity">实体类型</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.EntityAliasRegister.GetAlias(System.Type)">
            <summary>
            获取实体别名
            </summary>
            <param name="entity">实体类型</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.EntityAliasRegister.Clone">
            <summary>
            克隆
            </summary>
        </member>
        <member name="T:Bing.Datas.Sql.Builders.Core.EntityResolver">
            <summary>
            实体解析器
            </summary>
        </member>
        <member name="F:Bing.Datas.Sql.Builders.Core.EntityResolver._matedata">
            <summary>
            实体元数据
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.EntityResolver.#ctor(Bing.Datas.Sql.Matedatas.IEntityMatedata)">
            <summary>
            初始化一个<see cref="T:Bing.Datas.Sql.Builders.Core.EntityResolver"/>类型的实例
            </summary>
            <param name="matedata">实体元数据</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.EntityResolver.GetTable(System.Type)">
            <summary>
            获取表
            </summary>
            <param name="entity">实体类型</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.EntityResolver.GetSchema(System.Type)">
            <summary>
            获取架构
            </summary>
            <param name="entity">实体类型</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.EntityResolver.GetColumns``1(System.Boolean)">
            <summary>
            获取列名
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="propertyAsAlias">是否将属性名映射为列别名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.EntityResolver.GetProperties(System.Type)">
            <summary>
            获取属性列表
            </summary>
            <param name="type">类型</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.EntityResolver.GetColumns``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object[]}},System.Boolean)">
            <summary>
            获取列名
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="columns">列名表达式</param>
            <param name="propertyAsAlias">是否将属性名映射为列别名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.EntityResolver.GetColumns``1(System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>
            获取列名
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="names">列名集合</param>
            <param name="propertyAsAlias">是否将属性名映射为列别名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.EntityResolver.GetColumn``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            获取列名
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="column">列名表达式</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.EntityResolver.GetExpressionColumn``1(System.Linq.Expressions.Expression)">
            <summary>
            获取表达式列名
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="expression">列名表达式</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.EntityResolver.GetSingleColumn``1(System.Linq.Expressions.Expression)">
            <summary>
            获取单列
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="expression">列名表达式</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.EntityResolver.GetDictionaryColumns``1(System.Linq.Expressions.ListInitExpression)">
            <summary>
            获取字典多列
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="expression">列表表达式</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.EntityResolver.GetDictionaryByListInitExpression(System.Linq.Expressions.ListInitExpression)">
            <summary>
            获取字典
            </summary>
            <param name="expression">列表表达式</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.EntityResolver.GetKeyValue(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <summary>
            获取键值对
            </summary>
            <param name="arguments">参数表达式</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.EntityResolver.GetColumnsByMatedata``1(System.Collections.Generic.IDictionary{System.Object,System.String})">
            <summary>
            通过元数据解析创建列
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="dictionary">字典</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.EntityResolver.GetColumns(System.Collections.Generic.IDictionary{System.Object,System.String})">
            <summary>
            通过字典创建列
            </summary>
            <param name="dictionary">字典</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.EntityResolver.GetColumn(System.Linq.Expressions.Expression,System.Type,System.Boolean)">
            <summary>
            获取列名
            </summary>
            <param name="expression">表达式</param>
            <param name="entity">实体类型</param>
            <param name="right">是否取右侧操作数</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.EntityResolver.GetType(System.Linq.Expressions.Expression,System.Boolean)">
            <summary>
            获取类型
            </summary>
            <param name="expression">表达式</param>
            <param name="right">是否取右侧操作数</param>
        </member>
        <member name="T:Bing.Datas.Sql.Builders.Core.JoinItem">
            <summary>
            表连接项
            </summary>
        </member>
        <member name="F:Bing.Datas.Sql.Builders.Core.JoinItem._helper">
            <summary>
            辅助操作
            </summary>
        </member>
        <member name="P:Bing.Datas.Sql.Builders.Core.JoinItem.JoinType">
            <summary>
            连接类型
            </summary>
        </member>
        <member name="P:Bing.Datas.Sql.Builders.Core.JoinItem.Table">
            <summary>
            表
            </summary>
        </member>
        <member name="P:Bing.Datas.Sql.Builders.Core.JoinItem.Type">
            <summary>
            表实体类型
            </summary>
        </member>
        <member name="P:Bing.Datas.Sql.Builders.Core.JoinItem.Condition">
            <summary>
            连接条件
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.JoinItem.#ctor(System.String,System.String,System.String,System.String,System.Boolean,System.Boolean,System.Type)">
            <summary>
            初始化一个<see cref="T:Bing.Datas.Sql.Builders.Core.JoinItem"/>类型的实例
            </summary>
            <param name="joinType">连接类型</param>
            <param name="table">表名</param>
            <param name="schema">架构名</param>
            <param name="alias">别名</param>
            <param name="raw">是否使用原始值</param>
            <param name="isSplit">是否用句点分割表名</param>
            <param name="type">表实体类型</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.JoinItem.#ctor(System.String,Bing.Datas.Sql.Builders.Core.SqlItem,System.Type,Bing.Datas.Sql.Builders.ICondition)">
            <summary>
            初始化一个<see cref="T:Bing.Datas.Sql.Builders.Core.JoinItem"/>类型的实例
            </summary>
            <param name="joinType">连接类型</param>
            <param name="table">表</param>
            <param name="type">表实体类型</param>
            <param name="condition">连接条件列表</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.JoinItem.SetDependency(Bing.Datas.Sql.Builders.Internal.Helper)">
            <summary>
            设置依赖项
            </summary>
            <param name="helper">辅助操作</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.JoinItem.On(Bing.Datas.Sql.Builders.ICondition)">
            <summary>
            设置连接条件
            </summary>
            <param name="condition">连接条件</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.JoinItem.On(System.String,System.Object,Bing.Utils.Operator)">
            <summary>
            设置连接条件
            </summary>
            <param name="column">列名</param>
            <param name="value">值</param>
            <param name="operator">运算符</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.JoinItem.On(System.Collections.Generic.List{System.Collections.Generic.List{Bing.Datas.Sql.Builders.Core.OnItem}},Bing.Datas.Sql.Builders.IDialect)">
            <summary>
            设置连接条件
            </summary>
            <param name="items">连接条件项</param>
            <param name="dialect">Sql方言</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.JoinItem.AppendOn(System.String,Bing.Datas.Sql.Builders.IDialect)">
            <summary>
            添加到On子句
            </summary>
            <param name="sql">Sql语句</param>
            <param name="dialect">Sql方言</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.JoinItem.Clone(Bing.Datas.Sql.Builders.Internal.Helper)">
            <summary>
            克隆
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.JoinItem.ToSql(Bing.Datas.Sql.Builders.IDialect,Bing.Datas.Sql.Matedatas.ITableDatabase)">
            <summary>
            获取Join语句
            </summary>
            <param name="dialect">Sql方言</param>
            <param name="tableDatabase">表数据表</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.JoinItem.GetOn">
            <summary>
            获取On语句
            </summary>
        </member>
        <member name="T:Bing.Datas.Sql.Builders.Core.NameItem">
            <summary>
            名称项，处理名称中包含符号.
            </summary>
        </member>
        <member name="P:Bing.Datas.Sql.Builders.Core.NameItem.DatabaseName">
            <summary>
            数据库名称
            </summary>
        </member>
        <member name="F:Bing.Datas.Sql.Builders.Core.NameItem._prefix">
            <summary>
            前缀
            </summary>
        </member>
        <member name="P:Bing.Datas.Sql.Builders.Core.NameItem.Prefix">
            <summary>
            前缀
            </summary>
        </member>
        <member name="F:Bing.Datas.Sql.Builders.Core.NameItem._name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:Bing.Datas.Sql.Builders.Core.NameItem.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.NameItem.#ctor(System.String)">
            <summary>
            初始化一个<see cref="T:Bing.Datas.Sql.Builders.Core.NameItem"/>类型的实例
            </summary>
            <param name="name">名称</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.NameItem.IsComplex(System.String)">
            <summary>
            是否复杂名称
            </summary>
            <param name="name">名称</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.NameItem.ResolveBySplit(System.String)">
            <summary>
            分割句点
            </summary>
            <param name="name">名称</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.NameItem.ResolveByPattern(System.String)">
            <summary>
            通过正则表达式进行解析
            </summary>
            <param name="name">名称</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.NameItem.ToSql(Bing.Datas.Sql.Builders.IDialect,System.String,Bing.Datas.Sql.Matedatas.ITableDatabase)">
            <summary>
            获取Sql
            </summary>
            <param name="dialect">Sql方言</param>
            <param name="prefix">前缀</param>
            <param name="tableDatabase">表数据库</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.NameItem.GetPrefix(System.String)">
            <summary>
            获取前缀
            </summary>
            <param name="prefix">前缀</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.NameItem.GetDatabase(Bing.Datas.Sql.Builders.IDialect,Bing.Datas.Sql.Matedatas.ITableDatabase,System.String)">
            <summary>
            获取前缀
            </summary>
            <param name="dialect">Sql方言</param>
            <param name="tableDatabase">表数据库</param>
            <param name="prefix">前缀</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.NameItem.GetName(Bing.Datas.Sql.Builders.IDialect,System.String)">
            <summary>
            获取名称
            </summary>
            <param name="dialect">Sql方言</param>
            <param name="prefix">前缀</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.NameItem.GetName(System.String)">
            <summary>
            获取名称
            </summary>
            <param name="prefix">前缀</param>
        </member>
        <member name="T:Bing.Datas.Sql.Builders.Core.OnItem">
            <summary>
            连接条件项
            </summary>
        </member>
        <member name="P:Bing.Datas.Sql.Builders.Core.OnItem.Left">
            <summary>
            左表列名
            </summary>
        </member>
        <member name="P:Bing.Datas.Sql.Builders.Core.OnItem.Right">
            <summary>
            右表列名
            </summary>
        </member>
        <member name="P:Bing.Datas.Sql.Builders.Core.OnItem.Operator">
            <summary>
            条件运算符
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.OnItem.#ctor(System.String,System.String,Bing.Utils.Operator)">
            <summary>
            初始化一个<see cref="T:Bing.Datas.Sql.Builders.Core.OnItem"/>类型的实例
            </summary>
            <param name="left">左表列名</param>
            <param name="right">右表列名</param>
            <param name="operator">条件运算符</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.OnItem.#ctor(Bing.Datas.Sql.Builders.Core.SqlItem,Bing.Datas.Sql.Builders.Core.SqlItem,Bing.Utils.Operator)">
            <summary>
            初始化一个<see cref="T:Bing.Datas.Sql.Builders.Core.OnItem"/>类型的实例
            </summary>
            <param name="left">左表列名</param>
            <param name="right">右表列名</param>
            <param name="operator">条件运算符</param>
        </member>
        <member name="T:Bing.Datas.Sql.Builders.Core.OrderByItem">
            <summary>
            排序项
            </summary>
        </member>
        <member name="P:Bing.Datas.Sql.Builders.Core.OrderByItem.Order">
            <summary>
            排序列
            </summary>
        </member>
        <member name="P:Bing.Datas.Sql.Builders.Core.OrderByItem.Column">
            <summary>
            排序列，不带前缀
            </summary>
        </member>
        <member name="P:Bing.Datas.Sql.Builders.Core.OrderByItem.Desc">
            <summary>
            是否降序
            </summary>
        </member>
        <member name="P:Bing.Datas.Sql.Builders.Core.OrderByItem.Type">
            <summary>
            实体类型
            </summary>
        </member>
        <member name="P:Bing.Datas.Sql.Builders.Core.OrderByItem.Raw">
            <summary>
            是否使用原始值
            </summary>
        </member>
        <member name="P:Bing.Datas.Sql.Builders.Core.OrderByItem.Prefix">
            <summary>
            前缀
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.OrderByItem.#ctor(System.String,System.Boolean,System.Type,System.Boolean,System.String)">
            <summary>
            初始化一个<see cref="T:Bing.Datas.Sql.Builders.Core.OrderByItem"/>类型的实例
            </summary>
            <param name="order">排序列</param>
            <param name="desc">是否降序</param>
            <param name="type">实体类型</param>
            <param name="raw">是否使用原始值</param>
            <param name="prefix">前缀</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.OrderByItem.ToSql(Bing.Datas.Sql.Builders.IDialect,Bing.Datas.Sql.Builders.IEntityAliasRegister)">
            <summary>
            获取Sql
            </summary>
            <param name="dialect">Sql方言</param>
            <param name="register">实体别名注册器</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.OrderByItem.GetPrefix(Bing.Datas.Sql.Builders.IEntityAliasRegister)">
            <summary>
            获取前缀
            </summary>
            <param name="register">实体别名注册器</param>
        </member>
        <member name="T:Bing.Datas.Sql.Builders.Core.ParameterManager">
            <summary>
            参数管理器
            </summary>
        </member>
        <member name="F:Bing.Datas.Sql.Builders.Core.ParameterManager._params">
            <summary>
            参数集合
            </summary>
        </member>
        <member name="F:Bing.Datas.Sql.Builders.Core.ParameterManager._paramIndex">
            <summary>
            参数索引
            </summary>
        </member>
        <member name="F:Bing.Datas.Sql.Builders.Core.ParameterManager._dialect">
            <summary>
            Sql方言
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.ParameterManager.#ctor(Bing.Datas.Sql.Builders.IDialect)">
            <summary>
            初始化一个<see cref="T:Bing.Datas.Sql.Builders.Core.ParameterManager"/>类型的实例
            </summary>
            <param name="dialect">Sql方言</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.ParameterManager.#ctor(Bing.Datas.Sql.Builders.Core.ParameterManager)">
            <summary>
            初始化一个<see cref="T:Bing.Datas.Sql.Builders.Core.ParameterManager"/>类型的实例
            </summary>
            <param name="parameterManager">参数管理器</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.ParameterManager.GenerateName">
            <summary>
            创建参数名
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.ParameterManager.GetParams">
            <summary>
            获取参数列表
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.ParameterManager.Add(System.String,System.Object,System.Nullable{Bing.Utils.Operator})">
            <summary>
            添加参数，如果参数已存在则替换
            </summary>
            <param name="name">参数名</param>
            <param name="value">参数值</param>
            <param name="operator">运算符</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.ParameterManager.GetValue(System.Object,System.Nullable{Bing.Utils.Operator})">
            <summary>
            获取值
            </summary>
            <param name="value">参数值</param>
            <param name="operator">运算符</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.ParameterManager.Clone">
            <summary>
            克隆
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.ParameterManager.Clear">
            <summary>
            清空参数
            </summary>
        </member>
        <member name="T:Bing.Datas.Sql.Builders.Core.ParamLiteralsResolver">
            <summary>
            参数字面值解析器
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.ParamLiteralsResolver.GetParamLiterals(System.Object)">
            <summary>
            获取参数字面值
            </summary>
            <param name="value">参数值</param>
        </member>
        <member name="T:Bing.Datas.Sql.Builders.Core.PredicateExpressionResolver">
            <summary>
            谓词表达式解析器
            </summary>
        </member>
        <member name="F:Bing.Datas.Sql.Builders.Core.PredicateExpressionResolver._helper">
            <summary>
            辅助操作
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.PredicateExpressionResolver.#ctor(Bing.Datas.Sql.Builders.IDialect,Bing.Datas.Sql.Builders.IEntityResolver,Bing.Datas.Sql.Builders.IEntityAliasRegister,Bing.Datas.Sql.Builders.IParameterManager)">
            <summary>
            初始化一个<see cref="T:Bing.Datas.Sql.Builders.Core.PredicateExpressionResolver"/>类型的实例
            </summary>
            <param name="dialect">Sql方言</param>
            <param name="resolver">实体解析器</param>
            <param name="register">实体别名注册器</param>
            <param name="parameterManager">参数管理器</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.PredicateExpressionResolver.Resolve``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            解析谓词表达式
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="expression">谓词表达式</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.PredicateExpressionResolver.ResolveExpression(System.Linq.Expressions.Expression,System.Type)">
            <summary>
            解析谓词表达式
            </summary>
            <param name="expression">表达式</param>
            <param name="type">实体类型</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.PredicateExpressionResolver.ResolveOrExpression(System.Linq.Expressions.BinaryExpression,System.Type)">
            <summary>
            解析Or表达式
            </summary>
            <param name="expression">二元表达式</param>
            <param name="type">实体类型</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.PredicateExpressionResolver.ResolveAndExpression(System.Linq.Expressions.BinaryExpression,System.Type)">
            <summary>
            解析And表达式
            </summary>
            <param name="expression">二元表达式</param>
            <param name="type">实体类型</param>
        </member>
        <member name="T:Bing.Datas.Sql.Builders.Core.SqlBuilderBase">
            <summary>
            Sql生成器基类
            </summary>
        </member>
        <member name="F:Bing.Datas.Sql.Builders.Core.SqlBuilderBase._parameterManager">
            <summary>
            参数管理器
            </summary>
        </member>
        <member name="F:Bing.Datas.Sql.Builders.Core.SqlBuilderBase._dialect">
            <summary>
            方言
            </summary>
        </member>
        <member name="F:Bing.Datas.Sql.Builders.Core.SqlBuilderBase._selectClause">
            <summary>
            Select子句
            </summary>
        </member>
        <member name="F:Bing.Datas.Sql.Builders.Core.SqlBuilderBase._fromClause">
            <summary>
            From子句
            </summary>
        </member>
        <member name="F:Bing.Datas.Sql.Builders.Core.SqlBuilderBase._joinClause">
            <summary>
            Join子句
            </summary>
        </member>
        <member name="F:Bing.Datas.Sql.Builders.Core.SqlBuilderBase._whereClause">
            <summary>
            Where子句
            </summary>
        </member>
        <member name="F:Bing.Datas.Sql.Builders.Core.SqlBuilderBase._groupByClause">
            <summary>
            分组字句
            </summary>
        </member>
        <member name="F:Bing.Datas.Sql.Builders.Core.SqlBuilderBase._orderByClause">
            <summary>
            排序子句
            </summary>
        </member>
        <member name="F:Bing.Datas.Sql.Builders.Core.SqlBuilderBase._paramLiteralsResolver">
            <summary>
            参数字面值解析器
            </summary>
        </member>
        <member name="F:Bing.Datas.Sql.Builders.Core.SqlBuilderBase._isAddFilters">
            <summary>
            是否已添加过滤器
            </summary>
        </member>
        <member name="F:Bing.Datas.Sql.Builders.Core.SqlBuilderBase._excludedFilters">
            <summary>
            已排除过滤器集合
            </summary>
        </member>
        <member name="P:Bing.Datas.Sql.Builders.Core.SqlBuilderBase.EntityMatedata">
            <summary>
            实体元数据解析器
            </summary>
        </member>
        <member name="P:Bing.Datas.Sql.Builders.Core.SqlBuilderBase.TableDatabase">
            <summary>
            表数据库
            </summary>
        </member>
        <member name="P:Bing.Datas.Sql.Builders.Core.SqlBuilderBase.EntityResolver">
            <summary>
            实体解析器
            </summary>
        </member>
        <member name="P:Bing.Datas.Sql.Builders.Core.SqlBuilderBase.AliasRegister">
            <summary>
            实体别名注册器
            </summary>
        </member>
        <member name="P:Bing.Datas.Sql.Builders.Core.SqlBuilderBase.ParameterManager">
            <summary>
            参数管理器
            </summary>
        </member>
        <member name="P:Bing.Datas.Sql.Builders.Core.SqlBuilderBase.Dialect">
            <summary>
            Sql方言
            </summary>
        </member>
        <member name="P:Bing.Datas.Sql.Builders.Core.SqlBuilderBase.SelectClause">
            <summary>
            Select子句
            </summary>
        </member>
        <member name="P:Bing.Datas.Sql.Builders.Core.SqlBuilderBase.FromClause">
            <summary>
            From子句
            </summary>
        </member>
        <member name="P:Bing.Datas.Sql.Builders.Core.SqlBuilderBase.JoinClause">
            <summary>
            Join子句
            </summary>
        </member>
        <member name="P:Bing.Datas.Sql.Builders.Core.SqlBuilderBase.WhereClause">
            <summary>
            Where子句
            </summary>
        </member>
        <member name="P:Bing.Datas.Sql.Builders.Core.SqlBuilderBase.GroupByClause">
            <summary>
            分组子句
            </summary>
        </member>
        <member name="P:Bing.Datas.Sql.Builders.Core.SqlBuilderBase.OrderByClause">
            <summary>
            排序子句
            </summary>
        </member>
        <member name="P:Bing.Datas.Sql.Builders.Core.SqlBuilderBase.ParamLiteralsResolver">
            <summary>
            参数字面值解析器
            </summary>
        </member>
        <member name="P:Bing.Datas.Sql.Builders.Core.SqlBuilderBase.OffsetParam">
            <summary>
            跳过行数参数名
            </summary>
        </member>
        <member name="P:Bing.Datas.Sql.Builders.Core.SqlBuilderBase.LimitParam">
            <summary>
            限制行数参数名
            </summary>
        </member>
        <member name="P:Bing.Datas.Sql.Builders.Core.SqlBuilderBase.Pager">
            <summary>
            分页
            </summary>
        </member>
        <member name="P:Bing.Datas.Sql.Builders.Core.SqlBuilderBase.IsGroup">
            <summary>
            是否分组
            </summary>
        </member>
        <member name="P:Bing.Datas.Sql.Builders.Core.SqlBuilderBase.IsLimit">
            <summary>
            是否限制行数
            </summary>
        </member>
        <member name="P:Bing.Datas.Sql.Builders.Core.SqlBuilderBase.IsUnion">
            <summary>
            是否包含联合操作
            </summary>
        </member>
        <member name="P:Bing.Datas.Sql.Builders.Core.SqlBuilderBase.UnionItems">
            <summary>
            联合操作项集合
            </summary>
        </member>
        <member name="P:Bing.Datas.Sql.Builders.Core.SqlBuilderBase.CteItems">
            <summary>
            公用表表达式CTE集合
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.SqlBuilderBase.#ctor(Bing.Datas.Sql.Matedatas.IEntityMatedata,Bing.Datas.Sql.Matedatas.ITableDatabase,Bing.Datas.Sql.Builders.IParameterManager)">
            <summary>
            初始化一个<see cref="T:Bing.Datas.Sql.Builders.Core.SqlBuilderBase"/>类型的实例
            </summary>
            <param name="matedata">实体元数据解析器</param>
            <param name="tableDatabase">表数据库</param>
            <param name="parameterManager">参数管理器</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.SqlBuilderBase.CreateParameterManager">
            <summary>
            创建参数管理器
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.SqlBuilderBase.GetDialect">
            <summary>
            获取Sql方言
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.SqlBuilderBase.CreateSelectClause">
            <summary>
            创建Select子句
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.SqlBuilderBase.CreateFromClause">
            <summary>
            创建From子句
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.SqlBuilderBase.CreateJoinClause">
            <summary>
            创建Join子句
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.SqlBuilderBase.CreateWhereClause">
            <summary>
            创建Where子句
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.SqlBuilderBase.CreateGroupByClause">
            <summary>
            创建分组子句
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.SqlBuilderBase.CreateOrderByClause">
            <summary>
            创建排序子句
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.SqlBuilderBase.GetParamLiteralsResolver">
            <summary>
            获取参数字面值解析器
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.SqlBuilderBase.Clone">
            <summary>
            克隆
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.SqlBuilderBase.Clone(Bing.Datas.Sql.Builders.Core.SqlBuilderBase)">
            <summary>
            克隆
            </summary>
            <param name="sqlBuilder">源生成器</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.SqlBuilderBase.Clear">
            <summary>
            清空并初始化
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.SqlBuilderBase.ClearSelect">
            <summary>
            清空Select子句
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.SqlBuilderBase.ClearFrom">
            <summary>
            清空From子句
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.SqlBuilderBase.ClearJoin">
            <summary>
            清空Join子句
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.SqlBuilderBase.ClearWhere">
            <summary>
            清空Where子句
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.SqlBuilderBase.ClearGroupBy">
            <summary>
            清空GroupBy子句
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.SqlBuilderBase.ClearOrderBy">
            <summary>
            清空OrderBy子句
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.SqlBuilderBase.ClearSqlParams">
            <summary>
            清空Sql参数
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.SqlBuilderBase.ClearPageParams">
            <summary>
            清空分页参数
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.SqlBuilderBase.ClearUnionBuilders">
            <summary>
            清空联合操作项
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.SqlBuilderBase.ClearCte">
            <summary>
            清空公用表表达式
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.SqlBuilderBase.New">
            <summary>
            创建Sql生成器
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.SqlBuilderBase.ToDebugSql">
            <summary>
            生成调试Sql语句，Sql语句中的参数被替换为参数值
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.SqlBuilderBase.GetDebugSql(System.String)">
            <summary>
            获取调试Sql
            </summary>
            <param name="sql">Sql语句</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.SqlBuilderBase.ToSql">
            <summary>
            生成Sql语句
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.SqlBuilderBase.Init">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.SqlBuilderBase.Validate">
            <summary>
            验证
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.SqlBuilderBase.CreateSql(System.Text.StringBuilder)">
            <summary>
            创建Sql语句
            </summary>
            <param name="result">Sql拼接</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.SqlBuilderBase.CreateCte(System.Text.StringBuilder)">
            <summary>
            创建CTE
            </summary>
            <param name="result">Sql拼接</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.SqlBuilderBase.GetCteKeyWord">
            <summary>
            获取CTE关键字
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.SqlBuilderBase.CreateSqlByUnion(System.Text.StringBuilder)">
            <summary>
            创建Sql语句 - 联合
            </summary>
            <param name="result">Sql拼接</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.SqlBuilderBase.CreateSqlByNoUnion(System.Text.StringBuilder)">
            <summary>
            创建Sql语句
            </summary>
            <param name="result">Sql拼接</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.SqlBuilderBase.AppendSql(System.Text.StringBuilder,System.String)">
            <summary>
            添加Sql
            </summary>
            <param name="result">Sql拼接</param>
            <param name="sql">Sql语句</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.SqlBuilderBase.AppendSelect(System.Text.StringBuilder)">
            <summary>
            添加Select子句
            </summary>
            <param name="result">Sql拼接器</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.SqlBuilderBase.AppendFrom(System.Text.StringBuilder)">
            <summary>
            添加From子句
            </summary>
            <param name="result">Sql拼接器</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.SqlBuilderBase.AddFilters">
            <summary>
            添加过滤器列表
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.SqlBuilderBase.AppendLimit(System.Text.StringBuilder)">
            <summary>
            添加分页Sql
            </summary>
            <param name="result">Sql拼接器</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.SqlBuilderBase.CreateLimitSql">
            <summary>
            创建分页Sql
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.SqlBuilderBase.AddParam(System.String,System.Object)">
            <summary>
            添加Sql参数
            </summary>
            <param name="name">参数名</param>
            <param name="value">参数值</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.SqlBuilderBase.GetParams">
            <summary>
            获取参数
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.SqlBuilderBase.GetCondition">
            <summary>
            获取查询条件
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.SqlBuilderBase.Skip(System.Int32)">
            <summary>
            设置跳过行数
            </summary>
            <param name="count">跳过的行数</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.SqlBuilderBase.GetOffsetParam">
            <summary>
            获取跳过行数的参数名
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.SqlBuilderBase.Take(System.Int32)">
            <summary>
            设置获取行数
            </summary>
            <param name="count">获取的行数</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.SqlBuilderBase.GetLimitParam">
            <summary>
            获取限制行数的参数名
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.SqlBuilderBase.Page(Bing.Domains.Repositories.IPager)">
            <summary>
            设置分页
            </summary>
            <param name="pager">分页参数</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.SqlBuilderBase.IgnoreFilter``1">
            <summary>
            忽略过滤器
            </summary>
            <typeparam name="TSqlFilter">Sql过滤器类型</typeparam>
        </member>
        <member name="T:Bing.Datas.Sql.Builders.Core.SqlContext">
            <summary>
            Sql执行上下文
            </summary>
        </member>
        <member name="P:Bing.Datas.Sql.Builders.Core.SqlContext.Dialect">
            <summary>
            Sql方言
            </summary>
        </member>
        <member name="P:Bing.Datas.Sql.Builders.Core.SqlContext.EntityAliasRegister">
            <summary>
            实体别名注册器
            </summary>
        </member>
        <member name="P:Bing.Datas.Sql.Builders.Core.SqlContext.Matedata">
            <summary>
            实体元数据解析器
            </summary>
        </member>
        <member name="P:Bing.Datas.Sql.Builders.Core.SqlContext.ParameterManager">
            <summary>
            参数管理器
            </summary>
        </member>
        <member name="P:Bing.Datas.Sql.Builders.Core.SqlContext.ClauseAccessor">
            <summary>
            Sql子句访问器
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.SqlContext.#ctor(Bing.Datas.Sql.Builders.IDialect,Bing.Datas.Sql.Builders.IEntityAliasRegister,Bing.Datas.Sql.Matedatas.IEntityMatedata,Bing.Datas.Sql.Builders.IParameterManager,Bing.Datas.Sql.Builders.IClauseAccessor)">
            <summary>
            初始化一个<see cref="T:Bing.Datas.Sql.Builders.Core.SqlContext"/>类型的实例
            </summary>
            <param name="dialect">Sql方言</param>
            <param name="entityAliasRegister">实体别名注册器</param>
            <param name="matedata">实体原始数据解析器</param>
            <param name="parameterManager">参数管理器</param>
            <param name="clause">Sql子句访问器</param>
        </member>
        <member name="T:Bing.Datas.Sql.Builders.Core.SqlItem">
            <summary>
            Sql项
            </summary>
        </member>
        <member name="F:Bing.Datas.Sql.Builders.Core.SqlItem._name">
            <summary>
            名称
            </summary>
        </member>
        <member name="F:Bing.Datas.Sql.Builders.Core.SqlItem._prefix">
            <summary>
            前缀
            </summary>
        </member>
        <member name="F:Bing.Datas.Sql.Builders.Core.SqlItem._alias">
            <summary>
            别名
            </summary>
        </member>
        <member name="P:Bing.Datas.Sql.Builders.Core.SqlItem.Raw">
            <summary>
            是否使用原始值
            </summary>
        </member>
        <member name="P:Bing.Datas.Sql.Builders.Core.SqlItem.Prefix">
            <summary>
            前缀，范例：t.a As b，值为 t
            </summary>
        </member>
        <member name="P:Bing.Datas.Sql.Builders.Core.SqlItem.Name">
            <summary>
            名称，范例：t.a As b，值为 a
            </summary>
        </member>
        <member name="P:Bing.Datas.Sql.Builders.Core.SqlItem.Alias">
            <summary>
            别名，范例：t.a As b，值为 b
            </summary>
        </member>
        <member name="P:Bing.Datas.Sql.Builders.Core.SqlItem.DatabaseName">
            <summary>
            数据库名称
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.SqlItem.#ctor(System.String,System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            初始化一个<see cref="T:Bing.Datas.Sql.Builders.Core.SqlItem"/>类型的实例
            </summary>
            <param name="name">名称</param>
            <param name="prefix">前缀</param>
            <param name="alias">别名</param>
            <param name="raw">是否使用原始值</param>
            <param name="isSplit">是否用句点分割名称</param>
            <param name="isResolve">是否解析名称</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.SqlItem.Resolve(System.String,System.Boolean,System.Boolean)">
            <summary>
            设置别名，返回前缀和名称
            </summary>
            <param name="name">名称</param>
            <param name="isSplit">是否用句点分割名称</param>
            <param name="isResolve">是否解析名称</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.SqlItem.SplitName(System.String)">
            <summary>
            分割名称
            </summary>
            <param name="name">名称</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.SqlItem.Clone">
            <summary>
            克隆
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.SqlItem.ToSql(Bing.Datas.Sql.Builders.IDialect,Bing.Datas.Sql.Matedatas.ITableDatabase)">
            <summary>
            获取Sql
            </summary>
            <param name="dialect">Sql方言</param>
            <param name="tableDatabase">表数据库</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.SqlItem.GetColumn(Bing.Datas.Sql.Builders.IDialect,Bing.Datas.Sql.Matedatas.ITableDatabase)">
            <summary>
            获取列
            </summary>
            <param name="dialect">Sql方言</param>
            <param name="tableDatabase">表数据库</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.SqlItem.GetName">
            <summary>
            获取名称
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Core.SqlItem.GetSafeName(Bing.Datas.Sql.Builders.IDialect,System.String)">
            <summary>
            获取安全名称
            </summary>
            <param name="dialect">Sql方言</param>
            <param name="name">名称</param>
        </member>
        <member name="T:Bing.Datas.Sql.Builders.Extensions.DialectExtensions">
            <summary>
            Sql方言扩展
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Extensions.DialectExtensions.GetColumn(Bing.Datas.Sql.Builders.IDialect,System.String,System.String)">
            <summary>
            获取列
            </summary>
            <param name="dialect">Sql方言</param>
            <param name="column">列名</param>
            <param name="columnAlias">列别名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Extensions.DialectExtensions.GetAs(Bing.Datas.Sql.Builders.IDialect)">
            <summary>
            获取As关键字
            </summary>
            <param name="dialect">Sql方言</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Extensions.DialectExtensions.GetSafeName(Bing.Datas.Sql.Builders.IDialect,System.String)">
            <summary>
            获取安全名称
            </summary>
            <param name="dialect">Sql方言</param>
            <param name="name">名称</param>
        </member>
        <member name="T:Bing.Datas.Sql.Builders.Extensions.EntityResolverExtensions">
            <summary>
            实体解析器扩展
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Extensions.EntityResolverExtensions.GetTableAndSchema(Bing.Datas.Sql.Builders.IEntityResolver,System.Type)">
            <summary>
            获取表，带架构
            </summary>
            <param name="resolver">实体解析器</param>
            <param name="entity">实体类型</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Extensions.EntityResolverExtensions.GetAlias(Bing.Datas.Sql.Builders.IEntityResolver,System.Type,System.String)">
            <summary>
            获取别名，如果别名为空，返回表名
            </summary>
            <param name="resolver">实体解析器</param>
            <param name="entity">实体类型</param>
            <param name="alias">别名</param>
        </member>
        <member name="T:Bing.Datas.Sql.Builders.Filters.IsDeletedFilter">
            <summary>
            逻辑删除过滤器
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Filters.IsDeletedFilter.Filter(Bing.Datas.Sql.Builders.Core.SqlContext)">
            <summary>
            过滤
            </summary>
            <param name="context">Sql查询执行上下文</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Filters.IsDeletedFilter.Filter(Bing.Datas.Sql.Builders.IDialect,Bing.Datas.Sql.Matedatas.IEntityMatedata,Bing.Datas.Sql.Builders.IEntityAliasRegister,Bing.Datas.Sql.Builders.IJoinClause,Bing.Datas.Sql.Builders.IWhereClause,System.Type,System.String)">
            <summary>
            过滤
            </summary>
            <param name="dialect">Sql方言</param>
            <param name="matedata">实体元数据解析器</param>
            <param name="register">实体别名注册器</param>
            <param name="join">Join子句</param>
            <param name="where">Where子句</param>
            <param name="type">类型</param>
            <param name="alias">表别名</param>
        </member>
        <member name="T:Bing.Datas.Sql.Builders.Filters.SqlFilterCollection">
            <summary>
            Sql过滤器集合
            </summary>
        </member>
        <member name="P:Bing.Datas.Sql.Builders.Filters.SqlFilterCollection.Filters">
            <summary>
            Sql过滤器集合
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Filters.SqlFilterCollection.#cctor">
            <summary>
            初始化一个<see cref="T:Bing.Datas.Sql.Builders.Filters.SqlFilterCollection"/>类型的静态实例
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Filters.SqlFilterCollection.Add(Bing.Datas.Sql.Builders.ISqlFilter)">
            <summary>
            添加Sql过滤器
            </summary>
            <param name="filter">Sql查询过滤器</param>
        </member>
        <member name="T:Bing.Datas.Sql.Builders.IClauseAccessor">
            <summary>
            Sql子句访问器
            </summary>
        </member>
        <member name="P:Bing.Datas.Sql.Builders.IClauseAccessor.SelectClause">
            <summary>
            Select子句
            </summary>
        </member>
        <member name="P:Bing.Datas.Sql.Builders.IClauseAccessor.FromClause">
            <summary>
            From子句
            </summary>
        </member>
        <member name="P:Bing.Datas.Sql.Builders.IClauseAccessor.JoinClause">
            <summary>
            Join子句
            </summary>
        </member>
        <member name="P:Bing.Datas.Sql.Builders.IClauseAccessor.WhereClause">
            <summary>
            Where子句
            </summary>
        </member>
        <member name="P:Bing.Datas.Sql.Builders.IClauseAccessor.GroupByClause">
            <summary>
            GroupBy子句
            </summary>
        </member>
        <member name="P:Bing.Datas.Sql.Builders.IClauseAccessor.OrderByClause">
            <summary>
            OrderBy子句
            </summary>
        </member>
        <member name="T:Bing.Datas.Sql.Builders.ICondition">
            <summary>
            Sql查询条件
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.ICondition.GetCondition">
            <summary>
            获取查询条件
            </summary>
        </member>
        <member name="T:Bing.Datas.Sql.Builders.ICte">
            <summary>
            公用表达式CTE操作
            </summary>
        </member>
        <member name="T:Bing.Datas.Sql.Builders.ICteAccessor">
            <summary>
            公用表表达式CTE操作访问器
            </summary>
        </member>
        <member name="P:Bing.Datas.Sql.Builders.ICteAccessor.CteItems">
            <summary>
            公用表表达式CTE集合
            </summary>
        </member>
        <member name="T:Bing.Datas.Sql.Builders.IDialect">
            <summary>
            Sql方言
            </summary>
        </member>
        <member name="P:Bing.Datas.Sql.Builders.IDialect.OpeningIdentifier">
            <summary>
            起始转义标识符
            </summary>
        </member>
        <member name="P:Bing.Datas.Sql.Builders.IDialect.ClosingIdentifier">
            <summary>
            结束转义标识符
            </summary>
        </member>
        <member name="P:Bing.Datas.Sql.Builders.IDialect.BatchSeperator">
            <summary>
            批量操作分隔符
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.IDialect.SafeName(System.String)">
            <summary>
            安全名称
            </summary>
            <param name="name">名称</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.IDialect.GetPrefix">
            <summary>
            获取参数前缀
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.IDialect.SupportSelectAs">
            <summary>
            Select子句是否支持As关键字
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.IDialect.GenerateName(System.Int32)">
            <summary>
            生成参数名
            </summary>
            <param name="paramIndex">参数索引</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.IDialect.GetParamName(System.String)">
            <summary>
            获取参数名
            </summary>
            <param name="paramName">参数名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.IDialect.GetParamValue(System.Object)">
            <summary>
            获取参数值
            </summary>
            <param name="paramValue">参数值</param>
        </member>
        <member name="T:Bing.Datas.Sql.Builders.IEntityAliasRegister">
            <summary>
            实体别名注册器
            </summary>
        </member>
        <member name="P:Bing.Datas.Sql.Builders.IEntityAliasRegister.FromType">
            <summary>
            From子句设置的实体类型
            </summary>
        </member>
        <member name="P:Bing.Datas.Sql.Builders.IEntityAliasRegister.Data">
            <summary>
            实体别名
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.IEntityAliasRegister.Register(System.Type,System.String)">
            <summary>
            注册实体别名
            </summary>
            <param name="entity">实体类型</param>
            <param name="alias">别名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.IEntityAliasRegister.Contains(System.Type)">
            <summary>
            是否包含实体
            </summary>
            <param name="entity">实体类型</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.IEntityAliasRegister.GetAlias(System.Type)">
            <summary>
            获取实体别名
            </summary>
            <param name="entity">实体类型</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.IEntityAliasRegister.Clone">
            <summary>
            克隆
            </summary>
        </member>
        <member name="T:Bing.Datas.Sql.Builders.IEntityResolver">
            <summary>
            实体解析器
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.IEntityResolver.GetTable(System.Type)">
            <summary>
            获取表
            </summary>
            <param name="entity">实体类型</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.IEntityResolver.GetSchema(System.Type)">
            <summary>
            获取架构
            </summary>
            <param name="entity">实体类型</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.IEntityResolver.GetColumns``1(System.Boolean)">
            <summary>
            获取列名
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="propertyAsAlias">是否将属性名映射为列别名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.IEntityResolver.GetColumns``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object[]}},System.Boolean)">
            <summary>
            获取列名
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="columns">列名表达式</param>
            <param name="propertyAsAlias">是否将属性名映射为列别名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.IEntityResolver.GetColumn``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            获取列名
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="column">列名表达式</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.IEntityResolver.GetColumn(System.Linq.Expressions.Expression,System.Type,System.Boolean)">
            <summary>
            获取列名
            </summary>
            <param name="expression">表达式</param>
            <param name="entity">实体类型</param>
            <param name="right">是否取右侧操作数</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.IEntityResolver.GetType(System.Linq.Expressions.Expression,System.Boolean)">
            <summary>
            获取类型
            </summary>
            <param name="expression">表达式</param>
            <param name="right">是否取右侧操作数</param>
        </member>
        <member name="T:Bing.Datas.Sql.Builders.IFrom">
            <summary>
            From子句操作
            </summary>
        </member>
        <member name="T:Bing.Datas.Sql.Builders.IFromClause">
            <summary>
            From子句
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.IFromClause.Clone(Bing.Datas.Sql.ISqlBuilder,Bing.Datas.Sql.Builders.IEntityAliasRegister)">
            <summary>
            克隆
            </summary>
            <param name="builder">Sql生成器</param>
            <param name="register">实体别名注册器</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.IFromClause.From(System.String,System.String)">
            <summary>
            设置表名
            </summary>
            <param name="table">表名</param>
            <param name="alias">别名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.IFromClause.From``1(System.String,System.String)">
            <summary>
            设置表名
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="alias">别名</param>
            <param name="schema">架构名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.IFromClause.From(Bing.Datas.Sql.ISqlBuilder,System.String)">
            <summary>
            设置子查询表
            </summary>
            <param name="builder">Sql生成器</param>
            <param name="alias">表别名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.IFromClause.From(System.Action{Bing.Datas.Sql.ISqlBuilder},System.String)">
            <summary>
            设置子查询表
            </summary>
            <param name="action">子查询操作</param>
            <param name="alias">表别名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.IFromClause.AppendSql(System.String)">
            <summary>
            添加到From子句
            </summary>
            <param name="sql">Sql语句</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.IFromClause.Validate">
            <summary>
            验证
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.IFromClause.ToSql">
            <summary>
            输出Sql
            </summary>
        </member>
        <member name="T:Bing.Datas.Sql.Builders.IGroupBy">
            <summary>
            GroupBy子句操作
            </summary>
        </member>
        <member name="T:Bing.Datas.Sql.Builders.IGroupByClause">
            <summary>
            分组子句
            </summary>
        </member>
        <member name="P:Bing.Datas.Sql.Builders.IGroupByClause.IsGroup">
            <summary>
            是否存在分组
            </summary>
        </member>
        <member name="P:Bing.Datas.Sql.Builders.IGroupByClause.GroupColumns">
            <summary>
            分组列表
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.IGroupByClause.Clone(Bing.Datas.Sql.Builders.IEntityAliasRegister)">
            <summary>
            克隆
            </summary>
            <param name="register">实体别名注册器</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.IGroupByClause.GroupBy(System.String,System.String)">
            <summary>
            分组
            </summary>
            <param name="groupBy">分组列表</param>
            <param name="having">分组条件</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.IGroupByClause.GroupBy``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            分组
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="columns">分组字段</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.IGroupByClause.GroupBy``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String)">
            <summary>
            分组
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="column">分组字段</param>
            <param name="having">分组条件</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.IGroupByClause.AppendSql(System.String)">
            <summary>
            添加到GroupBy子句
            </summary>
            <param name="sql">Sql语句</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.IGroupByClause.ToSql">
            <summary>
            获取Sql
            </summary>
        </member>
        <member name="T:Bing.Datas.Sql.Builders.IJoin">
            <summary>
            Join子句操作
            </summary>
        </member>
        <member name="T:Bing.Datas.Sql.Builders.IJoinClause">
            <summary>
            表连接子句
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.IJoinClause.Clone(Bing.Datas.Sql.ISqlBuilder,Bing.Datas.Sql.Builders.IEntityAliasRegister,Bing.Datas.Sql.Builders.IParameterManager)">
            <summary>
            克隆
            </summary>
            <param name="sqlBuilder">Sql生成器</param>
            <param name="register">实体别名注册器</param>
            <param name="parameterManager">参数管理器</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.IJoinClause.Find(System.Type)">
            <summary>
            查找连接项
            </summary>
            <param name="type">表实体类型</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.IJoinClause.Join(System.String,System.String)">
            <summary>
            内连接
            </summary>
            <param name="table">表名</param>
            <param name="alias">别名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.IJoinClause.Join``1(System.String,System.String)">
            <summary>
            内连接
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="alias">别名</param>
            <param name="schema">架构名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.IJoinClause.Join(Bing.Datas.Sql.ISqlBuilder,System.String)">
            <summary>
            内连接子查询
            </summary>
            <param name="builder">Sql生成器</param>
            <param name="alias">表别名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.IJoinClause.Join(System.Action{Bing.Datas.Sql.ISqlBuilder},System.String)">
            <summary>
            内连接子查询
            </summary>
            <param name="action">子查询操作</param>
            <param name="alias">表别名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.IJoinClause.AppendJoin(System.String)">
            <summary>
            添加到内连接子句
            </summary>
            <param name="sql">Sql语句</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.IJoinClause.LeftJoin(System.String,System.String)">
            <summary>
            左外连接
            </summary>
            <param name="table">表名</param>
            <param name="alias">别名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.IJoinClause.LeftJoin``1(System.String,System.String)">
            <summary>
            左外连接
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="alias">别名</param>
            <param name="schema">架构名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.IJoinClause.LeftJoin(Bing.Datas.Sql.ISqlBuilder,System.String)">
            <summary>
            左外连接子查询
            </summary>
            <param name="builder">Sql生成器</param>
            <param name="alias">表别名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.IJoinClause.LeftJoin(System.Action{Bing.Datas.Sql.ISqlBuilder},System.String)">
            <summary>
            左外连接子查询
            </summary>
            <param name="action">子查询操作</param>
            <param name="alias">表别名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.IJoinClause.AppendLeftJoin(System.String)">
            <summary>
            添加到左外连接子句
            </summary>
            <param name="sql">Sql语句</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.IJoinClause.RightJoin(System.String,System.String)">
            <summary>
            右外连接
            </summary>
            <param name="table">表名</param>
            <param name="alias">别名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.IJoinClause.RightJoin``1(System.String,System.String)">
            <summary>
            右外连接
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="alias">别名</param>
            <param name="schema">架构名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.IJoinClause.RightJoin(Bing.Datas.Sql.ISqlBuilder,System.String)">
            <summary>
            右外连接子查询
            </summary>
            <param name="builder">Sql生成器</param>
            <param name="alias">表别名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.IJoinClause.RightJoin(System.Action{Bing.Datas.Sql.ISqlBuilder},System.String)">
            <summary>
            右外连接子查询
            </summary>
            <param name="action">子查询操作</param>
            <param name="alias">表别名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.IJoinClause.AppendRightJoin(System.String)">
            <summary>
            添加到右外连接子句
            </summary>
            <param name="sql">Sql语句</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.IJoinClause.On(Bing.Datas.Sql.Builders.ICondition)">
            <summary>
            设置连接条件
            </summary>
            <param name="condition">连接条件</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.IJoinClause.On(System.String,System.Object,Bing.Utils.Operator)">
            <summary>
            设置连接条件
            </summary>
            <param name="column">列名</param>
            <param name="value">值</param>
            <param name="operator">运算符</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.IJoinClause.On``2(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``1,System.Object}},Bing.Utils.Operator)">
            <summary>
            设置连接条件
            </summary>
            <typeparam name="TLeft">左表实体类型</typeparam>
            <typeparam name="TRight">右表实体类型</typeparam>
            <param name="left">左表列名</param>
            <param name="right">右表列名</param>
            <param name="operator">条件运算符</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.IJoinClause.On``2(System.Linq.Expressions.Expression{System.Func{``0,``1,System.Boolean}})">
            <summary>
            设置连接条件
            </summary>
            <typeparam name="TLeft">左表实体类型</typeparam>
            <typeparam name="TRight">右表实体类型</typeparam>
            <param name="expression">条件表达式</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.IJoinClause.AppendOn(System.String)">
            <summary>
            添加到On子句
            </summary>
            <param name="sql">Sql语句</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.IJoinClause.ToSql">
            <summary>
            输出Sql
            </summary>
        </member>
        <member name="T:Bing.Datas.Sql.Builders.IJoinOn">
            <summary>
            连接条件
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.IJoinOn.On(Bing.Datas.Sql.Builders.ICondition)">
            <summary>
            设置连接条件
            </summary>
            <param name="condition">连接条件</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.IJoinOn.On(System.String,System.Object,Bing.Utils.Operator)">
            <summary>
            设置连接条件
            </summary>
            <param name="column">列名</param>
            <param name="value">值</param>
            <param name="operator">运算符</param>
        </member>
        <member name="T:Bing.Datas.Sql.Builders.Internal.Helper">
            <summary>
            Sql生成器辅助操作
            </summary>
        </member>
        <member name="F:Bing.Datas.Sql.Builders.Internal.Helper._dialect">
            <summary>
            Sql方言
            </summary>
        </member>
        <member name="F:Bing.Datas.Sql.Builders.Internal.Helper._resolver">
            <summary>
            实体解析器
            </summary>
        </member>
        <member name="F:Bing.Datas.Sql.Builders.Internal.Helper._register">
            <summary>
            实体别名注册器
            </summary>
        </member>
        <member name="F:Bing.Datas.Sql.Builders.Internal.Helper._parameterManager">
            <summary>
            参数管理器
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Internal.Helper.#ctor(Bing.Datas.Sql.Builders.IDialect,Bing.Datas.Sql.Builders.IEntityResolver,Bing.Datas.Sql.Builders.IEntityAliasRegister,Bing.Datas.Sql.Builders.IParameterManager)">
            <summary>
            初始化一个<see cref="T:Bing.Datas.Sql.Builders.Internal.Helper"/>类型的实例
            </summary>
            <param name="dialect">Sql方言</param>
            <param name="resolver">实体解析器</param>
            <param name="register">实体别名注册器</param>
            <param name="parameterManager">参数管理器</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Internal.Helper.GetColumn(System.Linq.Expressions.Expression,System.Type)">
            <summary>
            获取处理后的列名
            </summary>
            <param name="expression">表达式</param>
            <param name="type">实体类型</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Internal.Helper.GetColumn``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            获取处理后的列名
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="expression">列名表达式</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Internal.Helper.GetColumn(System.String,System.Type)">
            <summary>
            获取处理后的列名
            </summary>
            <param name="column">列名</param>
            <param name="type">实体类型</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Internal.Helper.GetColumn(System.String)">
            <summary>
            获取处理后的列名
            </summary>
            <param name="column">列名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Internal.Helper.GetValue(System.Linq.Expressions.Expression)">
            <summary>
            获取值
            </summary>
            <param name="expression">表达式</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Internal.Helper.CreateCondition(System.Linq.Expressions.Expression,System.Type)">
            <summary>
            创建查询条件并添加参数
            </summary>
            <param name="expression">列名</param>
            <param name="type">实体类型</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Internal.Helper.CreateCondition(System.String,System.Object,Bing.Utils.Operator)">
            <summary>
            创建查询条件并添加参数
            </summary>
            <param name="column">列名</param>
            <param name="value">值</param>
            <param name="operator">运算符</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Internal.Helper.IsInCondition(Bing.Utils.Operator,System.Object)">
            <summary>
            是否In条件
            </summary>
            <param name="operator">运算符</param>
            <param name="value">值</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Internal.Helper.IsNotInCondition(Bing.Utils.Operator,System.Object)">
            <summary>
            是否Not In条件
            </summary>
            <param name="operator">运算符</param>
            <param name="value">值</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Internal.Helper.CreateInCondition(System.String,System.Collections.IEnumerable,System.Boolean)">
            <summary>
            创建In条件
            </summary>
            <param name="column">列名</param>
            <param name="values">值列表</param>
            <param name="notIn">是否Not In条件</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Internal.Helper.GenerateParamName(System.Object,Bing.Utils.Operator)">
            <summary>
            获取参数名
            </summary>
            <param name="value">值</param>
            <param name="operator">运算符</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Internal.Helper.Between(System.String,System.Object,System.Object,Bing.Datas.Queries.Boundary)">
            <summary>
            添加范围查询条件
            </summary>
            <param name="column">列名</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <param name="boundary">包含边界</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.Internal.Helper.ResolveSql(System.String,Bing.Datas.Sql.Builders.IDialect)">
            <summary>
            解析Sql
            </summary>
            <param name="sql">Sql语句</param>
            <param name="dialect">Sql方言</param>
        </member>
        <member name="T:Bing.Datas.Sql.Builders.IOrderBy">
            <summary>
            OrderBt子句操作
            </summary>
        </member>
        <member name="T:Bing.Datas.Sql.Builders.IOrderByClause">
            <summary>
            Order By子句
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.IOrderByClause.Clone(Bing.Datas.Sql.Builders.IEntityAliasRegister)">
            <summary>
            克隆
            </summary>
            <param name="register">实体别名注册器</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.IOrderByClause.OrderBy(System.String,System.String)">
            <summary>
            排序
            </summary>
            <param name="order">排序列表</param>
            <param name="tableAlias">表别名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.IOrderByClause.OrderBy``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Boolean)">
            <summary>
            排序
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="column">排序列</param>
            <param name="desc">是否倒序</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.IOrderByClause.AppendSql(System.String)">
            <summary>
            添加到OrderBy子句
            </summary>
            <param name="order">排序列表</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.IOrderByClause.Validate(System.Boolean)">
            <summary>
            验证
            </summary>
            <param name="isPage">是否分页</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.IOrderByClause.ToSql">
            <summary>
            获取Sql
            </summary>
        </member>
        <member name="T:Bing.Datas.Sql.Builders.IParameterManager">
            <summary>
            参数管理器
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.IParameterManager.GenerateName">
            <summary>
            创建参数名
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.IParameterManager.GetParams">
            <summary>
            获取参数列表
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.IParameterManager.Add(System.String,System.Object,System.Nullable{Bing.Utils.Operator})">
            <summary>
            添加参数，如果参数已存在则替换
            </summary>
            <param name="name">参数名</param>
            <param name="value">参数值</param>
            <param name="operator">运算符</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.IParameterManager.Clone">
            <summary>
            克隆
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.IParameterManager.Clear">
            <summary>
            清空参数
            </summary>
        </member>
        <member name="T:Bing.Datas.Sql.Builders.IParamLiteralsResolver">
            <summary>
            参数字面值解析器
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.IParamLiteralsResolver.GetParamLiterals(System.Object)">
            <summary>
            获取参数字面值
            </summary>
            <param name="value">参数值</param>
        </member>
        <member name="T:Bing.Datas.Sql.Builders.ISelect">
            <summary>
            Select子句操作
            </summary>
        </member>
        <member name="T:Bing.Datas.Sql.Builders.ISelectClause">
            <summary>
            Select子句
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.ISelectClause.Clone(Bing.Datas.Sql.ISqlBuilder,Bing.Datas.Sql.Builders.IEntityAliasRegister)">
            <summary>
            克隆
            </summary>
            <param name="sqlBuilder">Sql生成器</param>
            <param name="register">实体别名注册器</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.ISelectClause.Distinct">
            <summary>
            过滤重复记录
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.ISelectClause.Count(System.String)">
            <summary>
            求总行数
            </summary>
            <param name="columnAlias">列别名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.ISelectClause.Count(System.String,System.String)">
            <summary>
            求总行数
            </summary>
            <param name="column">列</param>
            <param name="columnAlias">列别名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.ISelectClause.Count``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String)">
            <summary>
            求总行数
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="expression">列名表达式</param>
            <param name="columnAlias">列别名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.ISelectClause.Sum(System.String,System.String)">
            <summary>
            求和
            </summary>
            <param name="column">列</param>
            <param name="columnAlias">列别名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.ISelectClause.Sum``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String)">
            <summary>
            求和
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="expression">列名表达式</param>
            <param name="columnAlias">列别名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.ISelectClause.Avg(System.String,System.String)">
            <summary>
            求平均值
            </summary>
            <param name="column">列</param>
            <param name="columnAlias">列别名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.ISelectClause.Avg``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String)">
            <summary>
            求平均值
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="expression">列名表达式</param>
            <param name="columnAlias">列别名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.ISelectClause.Max(System.String,System.String)">
            <summary>
            求最大值
            </summary>
            <param name="column">列</param>
            <param name="columnAlias">列别名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.ISelectClause.Max``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String)">
            <summary>
            求最大值
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="expression">列名表达式</param>
            <param name="columnAlias">列别名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.ISelectClause.Min(System.String,System.String)">
            <summary>
            求最小值
            </summary>
            <param name="column">列</param>
            <param name="columnAlias">列别名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.ISelectClause.Min``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String)">
            <summary>
            求最小值
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="expression">列名表达式</param>
            <param name="columnAlias">列别名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.ISelectClause.Select(System.String,System.String)">
            <summary>
            设置列名
            </summary>
            <param name="columns">列名</param>
            <param name="tableAlias">表别名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.ISelectClause.Select``1(System.Boolean)">
            <summary>
            设置列名
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="propertyAsAlias">是否将属性名映射为列别名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.ISelectClause.Select``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object[]}},System.Boolean)">
            <summary>
            设置列名
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="expression">列名表达式</param>
            <param name="propertyAsAlias">是否将属性名映射为列别名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.ISelectClause.Select``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String)">
            <summary>
            设置列名
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="expression">列名表达式</param>
            <param name="columnAlias">列别名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.ISelectClause.Select(Bing.Datas.Sql.ISqlBuilder,System.String)">
            <summary>
            设置子查询列
            </summary>
            <param name="builder">Sql生成器</param>
            <param name="columnAlias">列别名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.ISelectClause.Select(System.Action{Bing.Datas.Sql.ISqlBuilder},System.String)">
            <summary>
            设置子查询列
            </summary>
            <param name="action">子查询操作</param>
            <param name="columnAlias">列别名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.ISelectClause.AppendSql(System.String,System.String)">
            <summary>
            添加到Select子句
            </summary>
            <param name="sql">Sql语句</param>
            <param name="columnAlias">列别名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.ISelectClause.RemoveSelect(System.String,System.String)">
            <summary>
            移除列名
            </summary>
            <param name="columns">列名</param>
            <param name="tableAlias">表别名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.ISelectClause.RemoveSelect``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object[]}})">
            <summary>
            移除列名
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="expression">列名表达式</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.ISelectClause.RemoveSelect``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            移除列名
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="expression">列名表达式</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.ISelectClause.ToSql">
            <summary>
            输出Sql
            </summary>
        </member>
        <member name="T:Bing.Datas.Sql.Builders.ISqlFilter">
            <summary>
            Sql过滤器
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.ISqlFilter.Filter(Bing.Datas.Sql.Builders.Core.SqlContext)">
            <summary>
            过滤
            </summary>
            <param name="context">Sql查询执行上下文</param>
        </member>
        <member name="T:Bing.Datas.Sql.Builders.IUnion">
            <summary>
            联合操作
            </summary>
        </member>
        <member name="T:Bing.Datas.Sql.Builders.IUnionAccessor">
            <summary>
            联合操作访问器
            </summary>
        </member>
        <member name="P:Bing.Datas.Sql.Builders.IUnionAccessor.IsUnion">
            <summary>
            是否包含联合操作
            </summary>
        </member>
        <member name="P:Bing.Datas.Sql.Builders.IUnionAccessor.UnionItems">
            <summary>
            联合操作项集合
            </summary>
        </member>
        <member name="T:Bing.Datas.Sql.Builders.IWhere">
            <summary>
            Where子句操作
            </summary>
        </member>
        <member name="T:Bing.Datas.Sql.Builders.IWhereClause">
            <summary>
            Where子句
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.IWhereClause.Clone(Bing.Datas.Sql.ISqlBuilder,Bing.Datas.Sql.Builders.IEntityAliasRegister,Bing.Datas.Sql.Builders.IParameterManager)">
            <summary>
            克隆
            </summary>
            <param name="builder">Sql生成器</param>
            <param name="register">实体别名注册器</param>
            <param name="parameterManager">参数管理器</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.IWhereClause.And(Bing.Datas.Sql.Builders.ICondition)">
            <summary>
            And连接条件
            </summary>
            <param name="condition">查询条件</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.IWhereClause.Or(Bing.Datas.Sql.Builders.ICondition)">
            <summary>
            Or连接条件
            </summary>
            <param name="condition">查询条件</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.IWhereClause.Or``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}[])">
            <summary>
            Or连接条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="conditions">查询条件</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.IWhereClause.OrIfNotEmpty``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}[])">
            <summary>
            Or连接条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="conditions">查询条件</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.IWhereClause.Where(Bing.Datas.Sql.Builders.ICondition)">
            <summary>
            设置查询条件
            </summary>
            <param name="condition">查询条件</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.IWhereClause.Where(System.String,System.Object,Bing.Utils.Operator)">
            <summary>
            设置查询条件
            </summary>
            <param name="column">列名</param>
            <param name="value">值</param>
            <param name="operator">运算符</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.IWhereClause.Where``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object,Bing.Utils.Operator)">
            <summary>
            设置查询条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="expression">列名表达式</param>
            <param name="value">值</param>
            <param name="operator">运算符</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.IWhereClause.Where``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            设置查询条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="expression">查询条件表达式</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.IWhereClause.Where(System.String,Bing.Datas.Sql.ISqlBuilder,Bing.Utils.Operator)">
            <summary>
            设置子查询条件
            </summary>
            <param name="column">列名</param>
            <param name="builder">子查询Sql生成器</param>
            <param name="operator">运算符</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.IWhereClause.Where``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},Bing.Datas.Sql.ISqlBuilder,Bing.Utils.Operator)">
            <summary>
            设置子查询条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="expression">列名表达式</param>
            <param name="builder">子查询Sql生成器</param>
            <param name="operator">运算符</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.IWhereClause.Where(System.String,System.Action{Bing.Datas.Sql.ISqlBuilder},Bing.Utils.Operator)">
            <summary>
            设置子查询条件
            </summary>
            <param name="column">列名</param>
            <param name="action">子查询操作</param>
            <param name="operator">运算符</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.IWhereClause.Where``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Action{Bing.Datas.Sql.ISqlBuilder},Bing.Utils.Operator)">
            <summary>
            设置子查询条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="expression">列名表达式</param>
            <param name="action">子查询操作</param>
            <param name="operator">运算符</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.IWhereClause.WhereIfNotEmpty(System.String,System.Object,Bing.Utils.Operator)">
            <summary>
            设置查询条件
            </summary>
            <param name="column">列名</param>
            <param name="value">值，如果该值为空，则忽略该查询条件</param>
            <param name="operator">运算符</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.IWhereClause.WhereIfNotEmpty``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object,Bing.Utils.Operator)">
            <summary>
            设置查询条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="expression">列名表达式</param>
            <param name="value">值，如果该值为空，则忽略该查询条件</param>
            <param name="operator">运算符</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.IWhereClause.WhereIfNotEmpty``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            设置查询条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="expression">查询条件表达式，如果参数值为空，则忽略该查询条件</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.IWhereClause.Between``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Nullable{System.Int32},System.Nullable{System.Int32},Bing.Datas.Queries.Boundary)">
            <summary>
            添加范围查询条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="expression">列名表达式</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <param name="boundary">包含边界</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.IWhereClause.Between``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Nullable{System.Int64},System.Nullable{System.Int64},Bing.Datas.Queries.Boundary)">
            <summary>
            添加范围查询条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="expression">列名表达式</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <param name="boundary">包含边界</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.IWhereClause.Between``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Nullable{System.Single},System.Nullable{System.Single},Bing.Datas.Queries.Boundary)">
            <summary>
            添加范围查询条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="expression">列名表达式</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <param name="boundary">包含边界</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.IWhereClause.Between``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Nullable{System.Double},System.Nullable{System.Double},Bing.Datas.Queries.Boundary)">
            <summary>
            添加范围查询条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="expression">列名表达式</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <param name="boundary">包含边界</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.IWhereClause.Between``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Nullable{System.Decimal},System.Nullable{System.Decimal},Bing.Datas.Queries.Boundary)">
            <summary>
            添加范围查询条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="expression">列名表达式</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <param name="boundary">包含边界</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.IWhereClause.Between``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Boolean,System.Nullable{Bing.Datas.Queries.Boundary})">
            <summary>
            添加范围查询条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="expression">列名表达式</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <param name="includeTime">是否包含时间</param>
            <param name="boundary">包含边界</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.IWhereClause.Between(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},Bing.Datas.Queries.Boundary)">
            <summary>
            添加范围查询条件
            </summary>
            <param name="column">列名</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <param name="boundary">包含边界</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.IWhereClause.Between(System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},Bing.Datas.Queries.Boundary)">
            <summary>
            添加范围查询条件
            </summary>
            <param name="column">列名</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <param name="boundary">包含边界</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.IWhereClause.Between(System.String,System.Nullable{System.Single},System.Nullable{System.Single},Bing.Datas.Queries.Boundary)">
            <summary>
            添加范围查询条件
            </summary>
            <param name="column">列名</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <param name="boundary">包含边界</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.IWhereClause.Between(System.String,System.Nullable{System.Double},System.Nullable{System.Double},Bing.Datas.Queries.Boundary)">
            <summary>
            添加范围查询条件
            </summary>
            <param name="column">列名</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <param name="boundary">包含边界</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.IWhereClause.Between(System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},Bing.Datas.Queries.Boundary)">
            <summary>
            添加范围查询条件
            </summary>
            <param name="column">列名</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <param name="boundary">包含边界</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.IWhereClause.Between(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Boolean,System.Nullable{Bing.Datas.Queries.Boundary})">
            <summary>
            添加范围查询条件
            </summary>
            <param name="column">列名</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <param name="includeTime">是否包含时间</param>
            <param name="boundary">包含边界</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.IWhereClause.IsNull(System.String)">
            <summary>
            设置Is Null条件
            </summary>
            <param name="column">列名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.IWhereClause.IsNull``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            设置Is Null条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="expression">列名表达式</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.IWhereClause.IsNotNull(System.String)">
            <summary>
            设置Is Not Null条件
            </summary>
            <param name="column">列名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.IWhereClause.IsNotNull``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            设置Is Not Null条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="expression">列名表达式</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.IWhereClause.IsEmpty(System.String)">
            <summary>
            设置空条件
            </summary>
            <param name="column">列名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.IWhereClause.IsEmpty``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            设置空条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="expression">列名表达式</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.IWhereClause.IsNotEmpty(System.String)">
            <summary>
            设置非空条件
            </summary>
            <param name="column">列名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.IWhereClause.IsNotEmpty``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            设置非空条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="expression">列名表达式</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.IWhereClause.In(System.String,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            设置In条件
            </summary>
            <param name="column">列名</param>
            <param name="values">值集合</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.IWhereClause.In``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            设置In条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="expression">列名表达式</param>
            <param name="values">值集合</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.IWhereClause.In(System.String,Bing.Datas.Sql.ISqlBuilder)">
            <summary>
            设置In条件
            </summary>
            <param name="column">列名</param>
            <param name="builder">Sql生成器</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.IWhereClause.In``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},Bing.Datas.Sql.ISqlBuilder)">
            <summary>
            设置In条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="expression">列名表达式</param>
            <param name="builder">Sql生成器</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.IWhereClause.In(System.String,System.Action{Bing.Datas.Sql.ISqlBuilder})">
            <summary>
            设置In条件
            </summary>
            <param name="column">列名</param>
            <param name="action">子查询操作</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.IWhereClause.In``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Action{Bing.Datas.Sql.ISqlBuilder})">
            <summary>
            设置In条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="expression">列名表达式</param>
            <param name="action">子查询操作</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.IWhereClause.NotIn(System.String,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            设置Not In条件
            </summary>
            <param name="column">列名</param>
            <param name="values">值集合</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.IWhereClause.NotIn``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            设置Not In条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="expression">列名表达式</param>
            <param name="values">值集合</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.IWhereClause.NotIn(System.String,Bing.Datas.Sql.ISqlBuilder)">
            <summary>
            设置Not In条件
            </summary>
            <param name="column">列名</param>
            <param name="builder">Sql生成器</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.IWhereClause.NotIn``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},Bing.Datas.Sql.ISqlBuilder)">
            <summary>
            设置Not In条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="expression">列名表达式</param>
            <param name="builder">Sql生成器</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.IWhereClause.NotIn(System.String,System.Action{Bing.Datas.Sql.ISqlBuilder})">
            <summary>
            设置Not In条件
            </summary>
            <param name="column">列名</param>
            <param name="action">子查询操作</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.IWhereClause.NotIn``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Action{Bing.Datas.Sql.ISqlBuilder})">
            <summary>
            设置Not In条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="expression">列名表达式</param>
            <param name="action">子查询操作</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.IWhereClause.Exists(Bing.Datas.Sql.ISqlBuilder)">
            <summary>
            设置Exists条件
            </summary>
            <param name="builder">Sql生成器</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.IWhereClause.Exists(System.Action{Bing.Datas.Sql.ISqlBuilder})">
            <summary>
            设置Exists条件
            </summary>
            <param name="action">子查询操作</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.IWhereClause.NotExists(Bing.Datas.Sql.ISqlBuilder)">
            <summary>
            设置Not Exists条件
            </summary>
            <param name="builder">Sql生成器</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.IWhereClause.NotExists(System.Action{Bing.Datas.Sql.ISqlBuilder})">
            <summary>
            设置Not Exists条件
            </summary>
            <param name="action">子查询操作</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.IWhereClause.AppendSql(System.String)">
            <summary>
            添加到Where子句
            </summary>
            <param name="sql">Sql语句</param>
        </member>
        <member name="M:Bing.Datas.Sql.Builders.IWhereClause.ToSql">
            <summary>
            输出Sql
            </summary>
        </member>
        <member name="T:Bing.Datas.Sql.Configs.SqlOptions">
            <summary>
            Sql配置
            </summary>
        </member>
        <member name="P:Bing.Datas.Sql.Configs.SqlOptions.DatabaseType">
            <summary>
            数据库类型，默认为Sql Server
            </summary>
        </member>
        <member name="P:Bing.Datas.Sql.Configs.SqlOptions.IsClearAfterExecution">
            <summary>
            是否在执行之后清空Sql和参数，默认为 true
            </summary>
        </member>
        <member name="T:Bing.Datas.Sql.Executor.SqlExecutorBase">
            <summary>
            Sql执行对象基类
            </summary>
        </member>
        <member name="P:Bing.Datas.Sql.Executor.SqlExecutorBase.Database">
            <summary>
            数据库
            </summary>
        </member>
        <member name="P:Bing.Datas.Sql.Executor.SqlExecutorBase.Connection">
            <summary>
            数据库连接
            </summary>
        </member>
        <member name="P:Bing.Datas.Sql.Executor.SqlExecutorBase.TransactionActionManager">
            <summary>
            事务操作管理器
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Executor.SqlExecutorBase.#ctor(Bing.Datas.Transactions.ITransactionActionManager,Bing.Datas.Sql.IDatabase)">
            <summary>
            初始化一个<see cref="T:Bing.Datas.Sql.Executor.SqlExecutorBase"/>类型的实例
            </summary>
            <param name="transactionActionManager">事务操作管理器</param>
            <param name="database">数据库</param>
        </member>
        <member name="M:Bing.Datas.Sql.Executor.SqlExecutorBase.SetConnection(System.Data.IDbConnection)">
            <summary>
            设置数据库连接
            </summary>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:Bing.Datas.Sql.Executor.SqlExecutorBase.GetConnection(System.Data.IDbConnection)">
            <summary>
            获取数据库连接
            </summary>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:Bing.Datas.Sql.Executor.SqlExecutorBase.ExecuteSql(System.String,System.Object)">
            <summary>
            执行Sql语句
            </summary>
            <param name="sql">Sql语句</param>
            <param name="param">参数</param>
        </member>
        <member name="M:Bing.Datas.Sql.Executor.SqlExecutorBase.ExecuteSqlAsync(System.String,System.Object)">
            <summary>
            执行Sql语句
            </summary>
            <param name="sql">Sql语句</param>
            <param name="param">参数</param>
        </member>
        <member name="T:Bing.Datas.Sql.Extensions">
            <summary>
            公用表表达式CTE操作扩展
            </summary>
            <summary>
            From子句扩展
            </summary>
            <summary>
            GroupBy子句扩展
            </summary>
            <summary>
            Join子句扩展
            </summary>
            <summary>
            OrderBy子句
            </summary>
            <summary>
            Select子句扩展
            </summary>
            <summary>
            Sql生成器扩展
            </summary>
            <summary>
            Sql查询对象扩展 - 杂项
            </summary>
            <summary>
            Sql查询对象扩展 - 查询相关
            </summary>
            <summary>
            Sql查询对象扩展 - 拼接Sql相关
            </summary>
            <summary>
            联合操作扩展
            </summary>
            <summary>
            Where子句扩展
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.With``1(``0,System.String,Bing.Datas.Sql.ISqlBuilder)">
            <summary>
            设置公用表表达式CTE
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="source">源</param>
            <param name="name">公用表达式CTE的名称</param>
            <param name="builder">Sql生成器</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.From``1(``0,System.String,System.String)">
            <summary>
            设置表名
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="source">源</param>
            <param name="table">表名</param>
            <param name="alias">别名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.From``1(``0,Bing.Datas.Sql.ISqlBuilder,System.String)">
            <summary>
            设置子查询表
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="source">源</param>
            <param name="builder">Sql生成器</param>
            <param name="alias">表别名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.From``1(``0,System.Action{Bing.Datas.Sql.ISqlBuilder},System.String)">
            <summary>
            设置子查询表
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="source">源</param>
            <param name="action">子查询操作</param>
            <param name="alias">表别名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.AppendFrom``1(``0,System.String)">
            <summary>
            添加到From子句
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="source">源</param>
            <param name="sql">Sql语句。说明：将会原样添加到Sql中，不会进行任何处理</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.AppendFrom``1(``0,System.String,System.Boolean)">
            <summary>
            添加到From子句
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="source">源</param>
            <param name="sql">Sql语句。说明：将会原样添加到Sql中，不会进行任何处理</param>
            <param name="condition">该值为true时添加Sql，否则忽略</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.GroupBy``1(``0,System.String,System.String)">
            <summary>
            分组
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="source">源</param>
            <param name="columns">分组字段，范例：a.Id,b.Name</param>
            <param name="having">分组条件，范例：Count(*) > 1</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.AppendGroupBy``1(``0,System.String)">
            <summary>
            添加到GroupBy子句
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="source">源</param>
            <param name="sql">Sql语句。说明：将会原样添加到Sql中，不会进行任何处理</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.AppendGroupBy``1(``0,System.String,System.Boolean)">
            <summary>
            添加到GroupBy子句
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="source">源</param>
            <param name="sql">Sql语句。说明：将会原样添加到Sql中，不会进行任何处理</param>
            <param name="condition">该值为true时添加Sql，否则忽略</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.Join``1(``0,System.String,System.String)">
            <summary>
            内连接
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="source">源</param>
            <param name="table">表名</param>
            <param name="alias">别名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.Join``1(``0,Bing.Datas.Sql.ISqlBuilder,System.String)">
            <summary>
            内连接
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="source">源</param>
            <param name="builder">Sql生成器</param>
            <param name="alias">别名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.Join``1(``0,System.Action{Bing.Datas.Sql.ISqlBuilder},System.String)">
            <summary>
            内连接
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="source">源</param>
            <param name="action">子查询操作</param>
            <param name="alias">别名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.AppendJoin``1(``0,System.String)">
            <summary>
            添加到内连接子句
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="source">源</param>
            <param name="sql">Sql语句。说明：将会原样添加到Sql中，不会进行任何处理</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.AppendJoin``1(``0,System.String,System.Boolean)">
            <summary>
            添加到内连接子句
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="source">源</param>
            <param name="sql">Sql语句。说明：将会原样添加到Sql中，不会进行任何处理</param>
            <param name="condition">该值为true时添加Sql，否则忽略</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.LeftJoin``1(``0,System.String,System.String)">
            <summary>
            左外连接
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="source">源</param>
            <param name="table">表名</param>
            <param name="alias">别名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.LeftJoin``1(``0,Bing.Datas.Sql.ISqlBuilder,System.String)">
            <summary>
            左外连接
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="source">源</param>
            <param name="builder">Sql生成器</param>
            <param name="alias">别名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.LeftJoin``1(``0,System.Action{Bing.Datas.Sql.ISqlBuilder},System.String)">
            <summary>
            左外连接
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="source">源</param>
            <param name="action">子查询操作</param>
            <param name="alias">别名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.AppendLeftJoin``1(``0,System.String)">
            <summary>
            添加到左外连接子句
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="source">源</param>
            <param name="sql">Sql语句。说明：将会原样添加到Sql中，不会进行任何处理</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.AppendLeftJoin``1(``0,System.String,System.Boolean)">
            <summary>
            添加到左外连接子句
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="source">源</param>
            <param name="sql">Sql语句。说明：将会原样添加到Sql中，不会进行任何处理</param>
            <param name="condition">该值为true时添加Sql，否则忽略</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.RightJoin``1(``0,System.String,System.String)">
            <summary>
            右外连接
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="source">源</param>
            <param name="table">表名</param>
            <param name="alias">别名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.RightJoin``1(``0,Bing.Datas.Sql.ISqlBuilder,System.String)">
            <summary>
            右外连接
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="source">源</param>
            <param name="builder">Sql生成器</param>
            <param name="alias">别名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.RightJoin``1(``0,System.Action{Bing.Datas.Sql.ISqlBuilder},System.String)">
            <summary>
            右外连接
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="source">源</param>
            <param name="action">子查询操作</param>
            <param name="alias">别名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.AppendRightJoin``1(``0,System.String)">
            <summary>
            添加到右外连接子句
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="source">源</param>
            <param name="sql">Sql语句。说明：将会原样添加到Sql中，不会进行任何处理</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.AppendRightJoin``1(``0,System.String,System.Boolean)">
            <summary>
            添加到右外连接子句
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="source">源</param>
            <param name="sql">Sql语句。说明：将会原样添加到Sql中，不会进行任何处理</param>
            <param name="condition">该值为true时添加Sql，否则忽略</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.On``1(``0,Bing.Datas.Sql.Builders.ICondition)">
            <summary>
            设置连接条件
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="source">源</param>
            <param name="condition">连接条件</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.On``1(``0,System.String,System.Object,Bing.Utils.Operator)">
            <summary>
            设置连接条件
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="source">源</param>
            <param name="left">左表列名</param>
            <param name="value">值</param>
            <param name="operator">条件运算符</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.AppendOn``1(``0,System.String)">
            <summary>
            添加到On子句
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="source">源</param>
            <param name="sql">Sql语句</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.OrderBy``1(``0,System.String,System.String)">
            <summary>
            排序
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="source">源</param>
            <param name="order">排序列表。范例：a.Id, b.Name desc</param>
            <param name="tableAlias">表别名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.AppendOrderBy``1(``0,System.String)">
            <summary>
            添加到OrderBy子句
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="source">源</param>
            <param name="sql">Sql语句。说明：将会原样添加到Sql中，不会进行任何处理</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.AppendOrderBy``1(``0,System.String,System.Boolean)">
            <summary>
            添加到OrderBy子句
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="source">源</param>
            <param name="sql">Sql语句。说明：将会原样添加到Sql中，不会进行任何处理</param>
            <param name="condition">该值为true时添加Sql，否则忽略</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.Distinct``1(``0)">
            <summary>
            过滤重复记录
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="source">源</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.Count``1(``0,System.String)">
            <summary>
            求总行数
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="source">源</param>
            <param name="columnAlias">列别名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.Count``1(``0,System.String,System.String)">
            <summary>
            求总行数
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="source">源</param>
            <param name="column">列名</param>
            <param name="columnAlias">列别名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.Sum``1(``0,System.String,System.String)">
            <summary>
            求和
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="source">源</param>
            <param name="column">列名</param>
            <param name="columnAlias">列别名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.Avg``1(``0,System.String,System.String)">
            <summary>
            求平均值
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="source">源</param>
            <param name="column">列名</param>
            <param name="columnAlias">列别名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.Max``1(``0,System.String,System.String)">
            <summary>
            求最大值
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="source">源</param>
            <param name="column">列名</param>
            <param name="columnAlias">列别名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.Min``1(``0,System.String,System.String)">
            <summary>
            求最小值
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="source">源</param>
            <param name="column">列名</param>
            <param name="columnAlias">列别名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.Select``1(``0,System.String,System.String)">
            <summary>
            设置列名
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="source">源</param>
            <param name="columns">列名。范例：a.AppId As Id,a.Name</param>
            <param name="tableAlias">表别名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.Select``1(``0,Bing.Datas.Sql.ISqlBuilder,System.String)">
            <summary>
            设置子查询列
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="source">源</param>
            <param name="builder">Sql生成器</param>
            <param name="columnAlias">列别名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.Select``1(``0,System.Action{Bing.Datas.Sql.ISqlBuilder},System.String)">
            <summary>
            设置子查询列
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="source">源</param>
            <param name="action">子查询操作</param>
            <param name="columnAlias">列别名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.AppendSelect``1(``0,System.String)">
            <summary>
            添加到Select子句
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="source">源</param>
            <param name="sql">Sql语句。说明：将会原样添加到Sql中，不会进行任何处理</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.AppendSelect``1(``0,System.String,System.Boolean)">
            <summary>
            添加到Select子句
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="source">源</param>
            <param name="sql">Sql语句。说明：将会原样添加到Sql中，不会进行任何处理</param>
            <param name="condition">该值为true时添加Sql，否则忽略</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.RemoveSelect``1(``0,System.String,System.String)">
            <summary>
            移除列名
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="source">源</param>
            <param name="columns">列名。范例：a.AppId,a.Name</param>
            <param name="tableAlias">表别名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.Count``1(Bing.Datas.Sql.ISqlBuilder,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String)">
            <summary>
            求总行数
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="source">Sql生成器</param>
            <param name="expression">列名表达式</param>
            <param name="columnAlias">列别名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.Sum``1(Bing.Datas.Sql.ISqlBuilder,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String)">
            <summary>
            求和
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="source">Sql生成器</param>
            <param name="expression">列名表达式</param>
            <param name="columnAlias">列别名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.Avg``1(Bing.Datas.Sql.ISqlBuilder,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String)">
            <summary>
            求平均值
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="source">Sql生成器</param>
            <param name="expression">列名表达式</param>
            <param name="columnAlias">列别名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.Max``1(Bing.Datas.Sql.ISqlBuilder,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String)">
            <summary>
            求最大值
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="source">Sql生成器</param>
            <param name="expression">列名表达式</param>
            <param name="columnAlias">列别名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.Min``1(Bing.Datas.Sql.ISqlBuilder,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String)">
            <summary>
            求最小值
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="source">Sql生成器</param>
            <param name="expression">列名表达式</param>
            <param name="columnAlias">列别名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.Select``1(Bing.Datas.Sql.ISqlBuilder,System.Boolean)">
            <summary>
            设置列名
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="source">Sql生成器</param>
            <param name="propertyAsAlias">是否将属性名映射为列别名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.Select``1(Bing.Datas.Sql.ISqlBuilder,System.Linq.Expressions.Expression{System.Func{``0,System.Object[]}},System.Boolean)">
            <summary>
            设置列名
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="source">Sql生成器</param>
            <param name="columns">列名。范例：t => new object[] { t.Id, t.Name }</param>
            <param name="propertyAsAlias">是否将属性名映射为列别名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.Select``1(Bing.Datas.Sql.ISqlBuilder,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String)">
            <summary>
            设置列名
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="source">Sql生成器</param>
            <param name="column">列名。范例：t => t.Name，支持字典批量设置列和列别名，
            范例：Select&lt;Sample&gt;( t => new Dictionary&lt;object, string&gt; { { t.Email, "e" }, { t.Url, "u" } } );</param>
            <param name="columnAlias">列别名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.RemoveSelect``1(Bing.Datas.Sql.ISqlBuilder,System.Linq.Expressions.Expression{System.Func{``0,System.Object[]}})">
            <summary>
            移除列名
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="source">Sql生成器</param>
            <param name="columns">列名。范例：t => new object[] { t.Id, t.Name }</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.RemoveSelect``1(Bing.Datas.Sql.ISqlBuilder,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            移除列名
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="source">Sql生成器</param>
            <param name="column">列名。范例：t => t.Name，支持字典批量设置列和列别名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.From``1(Bing.Datas.Sql.ISqlBuilder,System.String,System.String)">
            <summary>
            设置表名
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="source">Sql生成器</param>
            <param name="alias">别名</param>
            <param name="schema">架构名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.Join``1(Bing.Datas.Sql.ISqlBuilder,System.String,System.String)">
            <summary>
            内连接
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="source">Sql生成器</param>
            <param name="alias">别名</param>
            <param name="schema">架构名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.LeftJoin``1(Bing.Datas.Sql.ISqlBuilder,System.String,System.String)">
            <summary>
            左外连接
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="source">Sql生成器</param>
            <param name="alias">别名</param>
            <param name="schema">架构名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.RightJoin``1(Bing.Datas.Sql.ISqlBuilder,System.String,System.String)">
            <summary>
            右外连接
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="source">Sql生成器</param>
            <param name="alias">别名</param>
            <param name="schema">架构名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.On``2(Bing.Datas.Sql.ISqlBuilder,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``1,System.Object}},Bing.Utils.Operator)">
            <summary>
            设置连接条件
            </summary>
            <param name="source">Sql生成器</param>
            <param name="left">左表列名,范例：t => t.Name</param>
            <param name="right">右表列名,范例：t => t.Name</param>
            <param name="operator">条件运算符</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.On``2(Bing.Datas.Sql.ISqlBuilder,System.Linq.Expressions.Expression{System.Func{``0,``1,System.Boolean}})">
            <summary>
            设置连接条件
            </summary>
            <param name="source">Sql生成器</param>
            <param name="expression">条件表达式,范例：(l,r) => l.Id == r.OrderId</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.Or``1(Bing.Datas.Sql.ISqlBuilder,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}[])">
            <summary>
            Or连接条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="source">Sql生成器</param>
            <param name="conditions">查询条件</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.OrIf``1(Bing.Datas.Sql.ISqlBuilder,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Boolean)">
            <summary>
            Or连接条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="source">Sql生成器</param>
            <param name="predicate">查询条件</param>
            <param name="condition">该值为true时添加查询条件，否则忽略</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.OrIf``1(Bing.Datas.Sql.ISqlBuilder,System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}[])">
            <summary>
            Or连接条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="source">Sql生成器</param>
            <param name="predicates">查询条件</param>
            <param name="condition">该值为true时添加查询条件，否则忽略</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.OrIfNotEmpty``1(Bing.Datas.Sql.ISqlBuilder,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}[])">
            <summary>
            Or连接条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="source">Sql生成器</param>
            <param name="conditions">查询条件,如果表达式中的值为空，则忽略该查询条件</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.Where``1(Bing.Datas.Sql.ISqlBuilder,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object,Bing.Utils.Operator)">
            <summary>
            设置查询条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="source">Sql生成器</param>
            <param name="expression">列名表达式。范例：t => t.Name</param>
            <param name="value">值</param>
            <param name="operator">运算符</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.Where``1(Bing.Datas.Sql.ISqlBuilder,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            设置查询条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="source">Sql生成器</param>
            <param name="expression">查询条件表达式。范例：t => t.Name.Contains("a") &amp;&amp; ( t.Code == "b" || t.Age > 1 )</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.Where``1(Bing.Datas.Sql.ISqlBuilder,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},Bing.Datas.Sql.ISqlBuilder,Bing.Utils.Operator)">
            <summary>
            设置子查询条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="source">Sql生成器</param>
            <param name="expression">列名表达式</param>
            <param name="builder">子查询Sql生成器</param>
            <param name="operator">运算符</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.Where``1(Bing.Datas.Sql.ISqlBuilder,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Action{Bing.Datas.Sql.ISqlBuilder},Bing.Utils.Operator)">
            <summary>
            设置子查询条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="source">Sql生成器</param>
            <param name="expression">列名表达式</param>
            <param name="action">子查询操作</param>
            <param name="operator">运算符</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.WhereIf``1(Bing.Datas.Sql.ISqlBuilder,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object,System.Boolean,Bing.Utils.Operator)">
            <summary>
            设置查询条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="source">Sql生成器</param>
            <param name="expression">列名表达式。范例：t => t.Name</param>
            <param name="value">值</param>
            <param name="condition">该值为true时添加查询条件，否则忽略</param>
            <param name="operator">运算符</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.WhereIf``1(Bing.Datas.Sql.ISqlBuilder,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Boolean)">
            <summary>
            设置查询条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="source">Sql生成器</param>
            <param name="expression">查询条件表达式,范例：t => t.Name.Contains("a") &amp;&amp; ( t.Code == "b" || t.Age > 1 )</param>
            <param name="condition">该值为true时添加查询条件，否则忽略</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.WhereIf``1(Bing.Datas.Sql.ISqlBuilder,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},Bing.Datas.Sql.ISqlBuilder,System.Boolean,Bing.Utils.Operator)">
            <summary>
            设置子查询条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="source">Sql生成器</param>
            <param name="expression">列名表达式。范例：t => t.Name</param>
            <param name="subBuilder">子查询Sql生成器</param>
            <param name="condition">该值为true时添加查询条件，否则忽略</param>
            <param name="operator">运算符</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.WhereIf``1(Bing.Datas.Sql.ISqlBuilder,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Action{Bing.Datas.Sql.ISqlBuilder},System.Boolean,Bing.Utils.Operator)">
            <summary>
            设置子查询条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="source">Sql生成器</param>
            <param name="expression">列名表达式。范例：t => t.Name</param>
            <param name="action">子查询操作</param>
            <param name="condition">该值为true时添加查询条件，否则忽略</param>
            <param name="operator">运算符</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.WhereIfNotEmpty``1(Bing.Datas.Sql.ISqlBuilder,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object,Bing.Utils.Operator)">
            <summary>
            设置查询条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="source">Sql生成器</param>
            <param name="expression">列名表达式。范例：t => t.Name</param>
            <param name="value">值,如果值为空，则忽略该查询条件</param>
            <param name="operator">运算符</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.WhereIfNotEmpty``1(Bing.Datas.Sql.ISqlBuilder,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            设置查询条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="source">Sql生成器</param>
            <param name="expression">查询条件表达式。如果参数值为空，则忽略该查询条件</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.Equal``1(Bing.Datas.Sql.ISqlBuilder,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object)">
            <summary>
            设置相等查询条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="source">Sql生成器</param>
            <param name="expression">列名表达式。范例：t => t.Name</param>
            <param name="value">值</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.NotEqual``1(Bing.Datas.Sql.ISqlBuilder,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object)">
            <summary>
            设置不相等查询条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="source">Sql生成器</param>
            <param name="expression">列名表达式。范例：t => t.Name</param>
            <param name="value">值</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.Greater``1(Bing.Datas.Sql.ISqlBuilder,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object)">
            <summary>
            设置大于查询条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="source">Sql生成器</param>
            <param name="expression">列名表达式。范例：t => t.Name</param>
            <param name="value">值</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.Less``1(Bing.Datas.Sql.ISqlBuilder,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object)">
            <summary>
            设置小于查询条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="source">Sql生成器</param>
            <param name="expression">列名表达式。范例：t => t.Name</param>
            <param name="value">值</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.GreaterEqual``1(Bing.Datas.Sql.ISqlBuilder,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object)">
            <summary>
            设置大于等于查询条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="source">Sql生成器</param>
            <param name="expression">列名表达式。范例：t => t.Name</param>
            <param name="value">值</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.LessEqual``1(Bing.Datas.Sql.ISqlBuilder,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object)">
            <summary>
            设置小于等于查询条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="source">Sql生成器</param>
            <param name="expression">列名表达式。范例：t => t.Name</param>
            <param name="value">值</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.Contains``1(Bing.Datas.Sql.ISqlBuilder,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object)">
            <summary>
            设置模糊匹配查询条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="source">Sql生成器</param>
            <param name="expression">列名表达式。范例：t => t.Name</param>
            <param name="value">值</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.Starts``1(Bing.Datas.Sql.ISqlBuilder,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object)">
            <summary>
            设置头匹配查询条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="source">Sql生成器</param>
            <param name="expression">列名表达式。范例：t => t.Name</param>
            <param name="value">值</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.Ends``1(Bing.Datas.Sql.ISqlBuilder,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object)">
            <summary>
            设置尾匹配查询条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="source">Sql生成器</param>
            <param name="expression">列名表达式。范例：t => t.Name</param>
            <param name="value">值</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.IsNull``1(Bing.Datas.Sql.ISqlBuilder,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            设置Is Null查询条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="source">Sql生成器</param>
            <param name="expression">列名表达式。范例：t => t.Name</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.IsNotNull``1(Bing.Datas.Sql.ISqlBuilder,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            设置Is Not Null查询条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="source">Sql生成器</param>
            <param name="expression">列名表达式。范例：t => t.Name</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.IsEmpty``1(Bing.Datas.Sql.ISqlBuilder,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            设置空条件，范例：[Name] Is Null Or [Name]=''
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="source">Sql生成器</param>
            <param name="expression">列名表达式。范例：t => t.Name</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.IsNotEmpty``1(Bing.Datas.Sql.ISqlBuilder,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            设置非空条件，范例：[Name] Is Not Null And [Name]&lt;&gt;''
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="source">Sql生成器</param>
            <param name="expression">列名表达式。范例：t => t.Name</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.In``1(Bing.Datas.Sql.ISqlBuilder,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            设置In条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="source">Sql生成器</param>
            <param name="expression">列名表达式。范例：t => t.Name</param>
            <param name="values">值集合</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.In``1(Bing.Datas.Sql.ISqlBuilder,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},Bing.Datas.Sql.ISqlBuilder)">
            <summary>
            设置In条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="source">Sql生成器</param>
            <param name="expression">列名表达式。范例：t => t.Name</param>
            <param name="builder">Sql生成器</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.In``1(Bing.Datas.Sql.ISqlBuilder,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Action{Bing.Datas.Sql.ISqlBuilder})">
            <summary>
            设置In条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="source">Sql生成器</param>
            <param name="expression">列名表达式。范例：t => t.Name</param>
            <param name="action">子查询操作</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.NotIn``1(Bing.Datas.Sql.ISqlBuilder,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            设置Not In条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="source">Sql生成器</param>
            <param name="expression">列名表达式。范例：t => t.Name</param>
            <param name="values">值集合</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.NotIn``1(Bing.Datas.Sql.ISqlBuilder,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},Bing.Datas.Sql.ISqlBuilder)">
            <summary>
            设置Not In条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="source">Sql生成器</param>
            <param name="expression">列名表达式。范例：t => t.Name</param>
            <param name="builder">Sql生成器</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.NotIn``1(Bing.Datas.Sql.ISqlBuilder,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Action{Bing.Datas.Sql.ISqlBuilder})">
            <summary>
            设置Not In条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="source">Sql生成器</param>
            <param name="expression">列名表达式。范例：t => t.Name</param>
            <param name="action">子查询操作</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.Between``1(Bing.Datas.Sql.ISqlBuilder,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Nullable{System.Int32},System.Nullable{System.Int32},Bing.Datas.Queries.Boundary)">
            <summary>
            添加范围查询条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="source">Sql生成器</param>
            <param name="expression">列名表达式。范例：t => t.Name</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <param name="boundary">包含边界</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.Between``1(Bing.Datas.Sql.ISqlBuilder,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Nullable{System.Int64},System.Nullable{System.Int64},Bing.Datas.Queries.Boundary)">
            <summary>
            添加范围查询条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="source">Sql生成器</param>
            <param name="expression">列名表达式。范例：t => t.Name</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <param name="boundary">包含边界</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.Between``1(Bing.Datas.Sql.ISqlBuilder,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Nullable{System.Single},System.Nullable{System.Single},Bing.Datas.Queries.Boundary)">
            <summary>
            添加范围查询条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="source">Sql生成器</param>
            <param name="expression">列名表达式。范例：t => t.Name</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <param name="boundary">包含边界</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.Between``1(Bing.Datas.Sql.ISqlBuilder,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Nullable{System.Double},System.Nullable{System.Double},Bing.Datas.Queries.Boundary)">
            <summary>
            添加范围查询条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="source">Sql生成器</param>
            <param name="expression">列名表达式。范例：t => t.Name</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <param name="boundary">包含边界</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.Between``1(Bing.Datas.Sql.ISqlBuilder,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Nullable{System.Decimal},System.Nullable{System.Decimal},Bing.Datas.Queries.Boundary)">
            <summary>
            添加范围查询条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="source">Sql生成器</param>
            <param name="expression">列名表达式。范例：t => t.Name</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <param name="boundary">包含边界</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.Between``1(Bing.Datas.Sql.ISqlBuilder,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Boolean,System.Nullable{Bing.Datas.Queries.Boundary})">
            <summary>
            添加范围查询条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="source">Sql生成器</param>
            <param name="expression">列名表达式。范例：t => t.Name</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <param name="includeTime">是否包含时间</param>
            <param name="boundary">包含边界</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.GroupBy``1(Bing.Datas.Sql.ISqlBuilder,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String)">
            <summary>
            分组
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="source">Sql生成器</param>
            <param name="column">分组字段。范例：a.Id,b.Name</param>
            <param name="having">分组条件。范例：Count(*) > 1</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.GroupBy``1(Bing.Datas.Sql.ISqlBuilder,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            分组
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="source">Sql生成器</param>
            <param name="columns">分组字段</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.OrderBy``1(Bing.Datas.Sql.ISqlBuilder,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Boolean)">
            <summary>
            排序
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="source">Sql生成器</param>
            <param name="column">排序列。范例：t => t.Name</param>
            <param name="desc">是否倒排</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.ClearAfterExecution(Bing.Datas.Sql.ISqlQuery,System.Boolean)">
            <summary>
            在执行之后清空Sql和参数，默认为 true
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="value">是否在执行之后清空Sql和参数，默认为 true</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.CloneBuilder(Bing.Datas.Sql.ISqlQuery)">
            <summary>
            复制Sql生成器
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.NewBuilder(Bing.Datas.Sql.ISqlQuery)">
            <summary>
            创建一个新的Sql生成器
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.GetDebugSql(Bing.Datas.Sql.ISqlQuery)">
            <summary>
            获取调试Sql语句
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.Clear(Bing.Datas.Sql.ISqlQuery)">
            <summary>
            清空
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.ClearSelect(Bing.Datas.Sql.ISqlQuery)">
            <summary>
            清空Select子句
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.ClearFrom(Bing.Datas.Sql.ISqlQuery)">
            <summary>
            清空From子句
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.ClearJoin(Bing.Datas.Sql.ISqlQuery)">
            <summary>
            清空Join子句
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.ClearWhere(Bing.Datas.Sql.ISqlQuery)">
            <summary>
            清空Where子句
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.ClearGroupBy(Bing.Datas.Sql.ISqlQuery)">
            <summary>
            清空GroupBy子句
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.ClearOrderBy(Bing.Datas.Sql.ISqlQuery)">
            <summary>
            清空OrderBy子句
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.ClearSqlParams(Bing.Datas.Sql.ISqlQuery)">
            <summary>
            清空Sql参数
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.ClearPageParams(Bing.Datas.Sql.ISqlQuery)">
            <summary>
            清空分页参数
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.AddParam(Bing.Datas.Sql.ISqlQuery,System.String,System.Object)">
            <summary>
            添加Sql参数
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="name">参数名</param>
            <param name="value">参数值</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.IgnoreFilter``1(Bing.Datas.Sql.ISqlQuery)">
            <summary>
            忽略过滤器
            </summary>
            <typeparam name="TSqlFilter">Sql过滤器类型</typeparam>
            <param name="sqlQuery">Sql查询对象</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.IgnoreDeletedFilter(Bing.Datas.Sql.ISqlQuery)">
            <summary>
            忽略逻辑删除过滤器
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.ToString(Bing.Datas.Sql.ISqlQuery,System.Data.IDbConnection)">
            <summary>
            获取字符串值
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.ToStringAsync(Bing.Datas.Sql.ISqlQuery,System.Data.IDbConnection)">
            <summary>
            获取字符串值
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.ToInt(Bing.Datas.Sql.ISqlQuery,System.Data.IDbConnection)">
            <summary>
            获取整型值
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.ToIntAsync(Bing.Datas.Sql.ISqlQuery,System.Data.IDbConnection)">
            <summary>
            获取整型值
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.ToIntOrNull(Bing.Datas.Sql.ISqlQuery,System.Data.IDbConnection)">
            <summary>
            获取可空整型值
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.ToIntOrNullAsync(Bing.Datas.Sql.ISqlQuery,System.Data.IDbConnection)">
            <summary>
            获取可空整型值
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.ToFloat(Bing.Datas.Sql.ISqlQuery,System.Data.IDbConnection)">
            <summary>
            获取float值
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.ToFloatAsync(Bing.Datas.Sql.ISqlQuery,System.Data.IDbConnection)">
            <summary>
            获取float值
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.ToFloatOrNull(Bing.Datas.Sql.ISqlQuery,System.Data.IDbConnection)">
            <summary>
            获取可空float值
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.ToFloatOrNullAsync(Bing.Datas.Sql.ISqlQuery,System.Data.IDbConnection)">
            <summary>
            获取可空float值
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.ToDouble(Bing.Datas.Sql.ISqlQuery,System.Data.IDbConnection)">
            <summary>
            获取double值
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.ToDoubleAsync(Bing.Datas.Sql.ISqlQuery,System.Data.IDbConnection)">
            <summary>
            获取double值
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.ToDoubleOrNull(Bing.Datas.Sql.ISqlQuery,System.Data.IDbConnection)">
            <summary>
            获取可空float值
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.ToDoubleOrNullAsync(Bing.Datas.Sql.ISqlQuery,System.Data.IDbConnection)">
            <summary>
            获取可空float值
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.ToDecimal(Bing.Datas.Sql.ISqlQuery,System.Data.IDbConnection)">
            <summary>
            获取decimal值
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.ToDecimalAsync(Bing.Datas.Sql.ISqlQuery,System.Data.IDbConnection)">
            <summary>
            获取decimal值
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.ToDecimalOrNull(Bing.Datas.Sql.ISqlQuery,System.Data.IDbConnection)">
            <summary>
            获取可空float值
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.ToDecimalOrNullAsync(Bing.Datas.Sql.ISqlQuery,System.Data.IDbConnection)">
            <summary>
            获取可空float值
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.ToBool(Bing.Datas.Sql.ISqlQuery,System.Data.IDbConnection)">
            <summary>
            获取布尔值
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.ToBoolAsync(Bing.Datas.Sql.ISqlQuery,System.Data.IDbConnection)">
            <summary>
            获取布尔值
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.ToBoolOrNull(Bing.Datas.Sql.ISqlQuery,System.Data.IDbConnection)">
            <summary>
            获取可空布尔值
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.ToBoolOrNullAsync(Bing.Datas.Sql.ISqlQuery,System.Data.IDbConnection)">
            <summary>
            获取可空布尔值
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.ToDate(Bing.Datas.Sql.ISqlQuery,System.Data.IDbConnection)">
            <summary>
            获取日期值
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.ToDateAsync(Bing.Datas.Sql.ISqlQuery,System.Data.IDbConnection)">
            <summary>
            获取日期值
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.ToDateOrNull(Bing.Datas.Sql.ISqlQuery,System.Data.IDbConnection)">
            <summary>
            获取可空日期值
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.ToDateOrNullAsync(Bing.Datas.Sql.ISqlQuery,System.Data.IDbConnection)">
            <summary>
            获取可空日期值
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.ToGuid(Bing.Datas.Sql.ISqlQuery,System.Data.IDbConnection)">
            <summary>
            获取Guid值
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.ToGuidAsync(Bing.Datas.Sql.ISqlQuery,System.Data.IDbConnection)">
            <summary>
            获取Guid值
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.ToGuidOrNull(Bing.Datas.Sql.ISqlQuery,System.Data.IDbConnection)">
            <summary>
            获取可空Guid值
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.ToGuidOrNullAsync(Bing.Datas.Sql.ISqlQuery,System.Data.IDbConnection)">
            <summary>
            获取可空Guid值
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.Count``1(Bing.Datas.Sql.ISqlQuery,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String)">
            <summary>
            求总行数
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="expression">列名表达式</param>
            <param name="columnAlias">列别名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.Sum``1(Bing.Datas.Sql.ISqlQuery,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String)">
            <summary>
            求和
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="expression">列名表达式</param>
            <param name="columnAlias">列别名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.Avg``1(Bing.Datas.Sql.ISqlQuery,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String)">
            <summary>
            求平均值
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="expression">列名表达式</param>
            <param name="columnAlias">列别名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.Max``1(Bing.Datas.Sql.ISqlQuery,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String)">
            <summary>
            求最大值
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="expression">列名表达式</param>
            <param name="columnAlias">列别名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.Min``1(Bing.Datas.Sql.ISqlQuery,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String)">
            <summary>
            求最小值
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="expression">列名表达式</param>
            <param name="columnAlias">列别名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.Select``1(Bing.Datas.Sql.ISqlQuery,System.Boolean)">
            <summary>
            设置列名
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="propertyAsAlias">是否将属性名映射为列别名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.Select``1(Bing.Datas.Sql.ISqlQuery,System.Linq.Expressions.Expression{System.Func{``0,System.Object[]}},System.Boolean)">
            <summary>
            设置列名
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="columns">列名，范例：t => new object[] { t.Id, t.Name }</param>
            <param name="propertyAsAlias">是否将属性名映射为列别名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.Select``1(Bing.Datas.Sql.ISqlQuery,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String)">
            <summary>
            设置列名
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="column">列名，范例：t => t.A，支持字典批量设置列和列别名，
            范例：Select&lt;Sample&gt;( t => new Dictionary&lt;object, string&gt; { { t.Email, "e" }, { t.Url, "u" } } );</param>
            <param name="columnAlias">列别名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.RemoveSelect``1(Bing.Datas.Sql.ISqlQuery,System.Linq.Expressions.Expression{System.Func{``0,System.Object[]}})">
            <summary>
            移除列名
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="columns">列名，范例：t => new object[] { t.Id, t.Name }</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.RemoveSelect``1(Bing.Datas.Sql.ISqlQuery,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            移除列名
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="column">列名，范例：t => t.A，支持字典批量设置列和列别名，
            范例：Select&lt;Sample&gt;( t => new Dictionary&lt;object, string&gt; { { t.Email, "e" }, { t.Url, "u" } } );</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.From``1(Bing.Datas.Sql.ISqlQuery,System.String,System.String)">
            <summary>
            设置表名
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="alias">别名</param>
            <param name="schema">架构名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.Join``1(Bing.Datas.Sql.ISqlQuery,System.String,System.String)">
            <summary>
            内连接
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="alias">别名</param>
            <param name="schema">架构名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.LeftJoin``1(Bing.Datas.Sql.ISqlQuery,System.String,System.String)">
            <summary>
            左外连接
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="alias">别名</param>
            <param name="schema">架构名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.RightJoin``1(Bing.Datas.Sql.ISqlQuery,System.String,System.String)">
            <summary>
            右外连接
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="alias">别名</param>
            <param name="schema">架构名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.On``2(Bing.Datas.Sql.ISqlQuery,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``1,System.Object}},Bing.Utils.Operator)">
            <summary>
            设置连接条件
            </summary>
            <typeparam name="TLeft">左表实体类型</typeparam>
            <typeparam name="TRight">右表实体类型</typeparam>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="left">左表列名</param>
            <param name="right">右表列名</param>
            <param name="operator">条件运算符</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.On``2(Bing.Datas.Sql.ISqlQuery,System.Linq.Expressions.Expression{System.Func{``0,``1,System.Boolean}})">
            <summary>
            设置连接条件
            </summary>
            <typeparam name="TLeft">左表实体类型</typeparam>
            <typeparam name="TRight">右表实体类型</typeparam>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="expression">条件表达式</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.Or``1(Bing.Datas.Sql.ISqlQuery,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}[])">
            <summary>
            Or连接条件
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="conditions">查询条件</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.OrIf``1(Bing.Datas.Sql.ISqlQuery,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Boolean)">
            <summary>
            Or连接条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="predicate">查询条件</param>
            <param name="condition">该值为true时添加查询条件，否则忽略</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.OrIf``1(Bing.Datas.Sql.ISqlQuery,System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}[])">
            <summary>
            Or连接条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="condition">该值为true时添加查询条件，否则忽略</param>
            <param name="predicates">查询条件</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.OrIfNotEmpty``1(Bing.Datas.Sql.ISqlQuery,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}[])">
            <summary>
            Or连接条件
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="conditions">查询条件。如果表达式中的值为空，则忽略该查询条件</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.Where``1(Bing.Datas.Sql.ISqlQuery,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object,Bing.Utils.Operator)">
            <summary>
            设置查询条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="expression">列名表达式，范例：t => t.Name</param>
            <param name="value">值</param>
            <param name="operator">运算符</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.Where``1(Bing.Datas.Sql.ISqlQuery,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            设置查询条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="expression">查询条件表达式，范例：t => t.Name.Contains("a") &amp;&amp; ( t.Code == "b" || t.Age > 1 )</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.Where``1(Bing.Datas.Sql.ISqlQuery,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},Bing.Datas.Sql.ISqlBuilder,Bing.Utils.Operator)">
            <summary>
            设置子查询条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="expression">列名表达式</param>
            <param name="builder">子查询Sql生成器</param>
            <param name="operator">运算符</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.Where``1(Bing.Datas.Sql.ISqlQuery,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Action{Bing.Datas.Sql.ISqlBuilder},Bing.Utils.Operator)">
            <summary>
            设置子查询条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="expression">列名表达式</param>
            <param name="action">子查询操作</param>
            <param name="operator">运算符</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.WhereIf``1(Bing.Datas.Sql.ISqlQuery,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object,System.Boolean,Bing.Utils.Operator)">
            <summary>
            设置查询条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="expression">列名表达式，范例：t => t.Name</param>
            <param name="value">值</param>
            <param name="condition">拼接条件，该值为true时添加查询条件，否则忽略</param>
            <param name="operator">运算符</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.WhereIf``1(Bing.Datas.Sql.ISqlQuery,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Boolean)">
            <summary>
            设置查询条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="expression">查询条件表达式，范例：t => t.Name.Contains("a") &amp;&amp; ( t.Code == "b" || t.Age > 1 )</param>
            <param name="condition">拼接条件，该值为true时添加查询条件，否则忽略</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.WhereIf``1(Bing.Datas.Sql.ISqlQuery,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},Bing.Datas.Sql.ISqlBuilder,System.Boolean,Bing.Utils.Operator)">
            <summary>
            设置子查询条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="expression">列名表达式,范例：t => t.Name</param>
            <param name="builder">子查询Sql生成器</param>
            <param name="condition">该值为true时添加查询条件，否则忽略</param>
            <param name="operator">运算符</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.WhereIf``1(Bing.Datas.Sql.ISqlQuery,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Action{Bing.Datas.Sql.ISqlBuilder},System.Boolean,Bing.Utils.Operator)">
            <summary>
            设置子查询条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="expression">列名表达式,范例：t => t.Name</param>
            <param name="action">子查询操作</param>
            <param name="condition">该值为true时添加查询条件，否则忽略</param>
            <param name="operator">运算符</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.WhereIfNotEmpty``1(Bing.Datas.Sql.ISqlQuery,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object,Bing.Utils.Operator)">
            <summary>
            设置查询条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="expression">列名表达式，范例：t => t.Name</param>
            <param name="value">值，如果该值为空，则忽略该查询条件</param>
            <param name="operator">运算符</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.WhereIfNotEmpty``1(Bing.Datas.Sql.ISqlQuery,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            设置查询条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="expression">查询条件表达式，如果参数值为空，则忽略该查询条件</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.Equal``1(Bing.Datas.Sql.ISqlQuery,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object)">
            <summary>
            设置相等查询条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="expression">列名表达式，范例：t => t.Name</param>
            <param name="value">值</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.NotEqual``1(Bing.Datas.Sql.ISqlQuery,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object)">
            <summary>
            设置不相等查询条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="expression">列名表达式，范例：t => t.Name</param>
            <param name="value">值</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.Greater``1(Bing.Datas.Sql.ISqlQuery,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object)">
            <summary>
            设置大于查询条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="expression">列名表达式，范例：t => t.Name</param>
            <param name="value">值</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.GreaterEqual``1(Bing.Datas.Sql.ISqlQuery,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object)">
            <summary>
            设置大于等于查询条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="expression">列名表达式，范例：t => t.Name</param>
            <param name="value">值</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.Less``1(Bing.Datas.Sql.ISqlQuery,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object)">
            <summary>
            设置小于查询条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="expression">列名表达式，范例：t => t.Name</param>
            <param name="value">值</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.LessEqual``1(Bing.Datas.Sql.ISqlQuery,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object)">
            <summary>
            设置小于等于查询条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="expression">列名表达式，范例：t => t.Name</param>
            <param name="value">值</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.Contains``1(Bing.Datas.Sql.ISqlQuery,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object)">
            <summary>
            设置模糊匹配查询条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="expression">列名表达式，范例：t => t.Name</param>
            <param name="value">值</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.Starts``1(Bing.Datas.Sql.ISqlQuery,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object)">
            <summary>
            设置头匹配查询条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="expression">列名表达式，范例：t => t.Name</param>
            <param name="value">值</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.Ends``1(Bing.Datas.Sql.ISqlQuery,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object)">
            <summary>
            设置尾匹配查询条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="expression">列名表达式，范例：t => t.Name</param>
            <param name="value">值</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.IsNull``1(Bing.Datas.Sql.ISqlQuery,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            设置Is Null查询条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="expression">列名表达式，范例：t => t.Name</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.IsNotNull``1(Bing.Datas.Sql.ISqlQuery,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            设置Is Not Null查询条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="expression">列名表达式，范例：t => t.Name</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.IsEmpty``1(Bing.Datas.Sql.ISqlQuery,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            设置空条件，范例：[Name] Is Null Or [Name]=''
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="expression">列名表达式，范例：t => t.Name</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.IsNotEmpty``1(Bing.Datas.Sql.ISqlQuery,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            设置非空条件，范例：[Name] Is Null Or [Name]&lt;&gt;''
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="expression">列名表达式，范例：t => t.Name</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.In``1(Bing.Datas.Sql.ISqlQuery,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            设置In条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="expression">列名表达式，范例：t => t.Name</param>
            <param name="values">值集合</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.In``1(Bing.Datas.Sql.ISqlQuery,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},Bing.Datas.Sql.ISqlBuilder)">
            <summary>
            设置In条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="expression">列名表达式，范例：t => t.Name</param>
            <param name="builder">Sql生成器</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.In``1(Bing.Datas.Sql.ISqlQuery,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Action{Bing.Datas.Sql.ISqlBuilder})">
            <summary>
            设置In条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="expression">列名表达式，范例：t => t.Name</param>
            <param name="action">子查询操作</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.NotIn``1(Bing.Datas.Sql.ISqlQuery,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            设置Not In条件
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="expression">列名表达式</param>
            <param name="values">值集合</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.NotIn``1(Bing.Datas.Sql.ISqlQuery,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},Bing.Datas.Sql.ISqlBuilder)">
            <summary>
            设置Not In条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="expression">列名表达式，范例：t => t.Name</param>
            <param name="builder">Sql生成器</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.NotIn``1(Bing.Datas.Sql.ISqlQuery,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Action{Bing.Datas.Sql.ISqlBuilder})">
            <summary>
            设置Not In条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="expression">列名表达式，范例：t => t.Name</param>
            <param name="action">子查询操作</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.Between``1(Bing.Datas.Sql.ISqlQuery,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Nullable{System.Int32},System.Nullable{System.Int32},Bing.Datas.Queries.Boundary)">
            <summary>
            设置范围查询条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="expression">列名表达式，范例：t => t.Name</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <param name="boundary">包含边界</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.Between``1(Bing.Datas.Sql.ISqlQuery,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Nullable{System.Int64},System.Nullable{System.Int64},Bing.Datas.Queries.Boundary)">
            <summary>
            设置范围查询条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="expression">列名表达式，范例：t => t.Name</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <param name="boundary">包含边界</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.Between``1(Bing.Datas.Sql.ISqlQuery,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Nullable{System.Single},System.Nullable{System.Single},Bing.Datas.Queries.Boundary)">
            <summary>
            设置范围查询条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="expression">列名表达式，范例：t => t.Name</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <param name="boundary">包含边界</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.Between``1(Bing.Datas.Sql.ISqlQuery,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Nullable{System.Double},System.Nullable{System.Double},Bing.Datas.Queries.Boundary)">
            <summary>
            设置范围查询条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="expression">列名表达式，范例：t => t.Name</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <param name="boundary">包含边界</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.Between``1(Bing.Datas.Sql.ISqlQuery,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Nullable{System.Decimal},System.Nullable{System.Decimal},Bing.Datas.Queries.Boundary)">
            <summary>
            设置范围查询条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="expression">列名表达式，范例：t => t.Name</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <param name="boundary">包含边界</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.Between``1(Bing.Datas.Sql.ISqlQuery,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Boolean,System.Nullable{Bing.Datas.Queries.Boundary})">
            <summary>
            设置范围查询条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="expression">列名表达式，范例：t => t.Name</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <param name="includeTime">是否包含时间</param>
            <param name="boundary">包含边界</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.GroupBy``1(Bing.Datas.Sql.ISqlQuery,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            分组
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="columns">分组字段</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.GroupBy``1(Bing.Datas.Sql.ISqlQuery,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String)">
            <summary>
            分组
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="column">分组字段，范例：t => t.Name</param>
            <param name="having">分组条件，范例：Count(*) > 1</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.OrderBy``1(Bing.Datas.Sql.ISqlQuery,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Boolean)">
            <summary>
            排序
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="column">排序列</param>
            <param name="desc">是否倒序</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.Skip(Bing.Datas.Sql.ISqlQuery,System.Int32)">
            <summary>
            设置跳过行数
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="count">跳过的行数</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.Take(Bing.Datas.Sql.ISqlQuery,System.Int32)">
            <summary>
            设置获取行数
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="count">获取的行数</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.Union``1(``0,Bing.Datas.Sql.ISqlBuilder[])">
            <summary>
            联合多个查询。Union会排除重复结果行
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="source">源</param>
            <param name="builders">Sql生成器列表</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.Union``1(``0,System.String,System.Collections.Generic.IEnumerable{Bing.Datas.Sql.ISqlBuilder})">
            <summary>
            联合操作
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="source">源</param>
            <param name="operation">操作方式</param>
            <param name="builders">Sql生成器集合</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.Union``1(``0,System.Collections.Generic.IEnumerable{Bing.Datas.Sql.ISqlBuilder})">
            <summary>
            联合多个查询。Union会排除重复结果行
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="source">源</param>
            <param name="builders">Sql生成器集合</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.UnionAll``1(``0,Bing.Datas.Sql.ISqlBuilder[])">
            <summary>
            联合多个查询。Union All不会排除重复结果行
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="source">源</param>
            <param name="builders">Sql生成器列表</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.UnionAll``1(``0,System.Collections.Generic.IEnumerable{Bing.Datas.Sql.ISqlBuilder})">
            <summary>
            联合多个查询。Union All不会排除重复结果行
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="source">源</param>
            <param name="builders">Sql生成器集合</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.Intersect``1(``0,Bing.Datas.Sql.ISqlBuilder[])">
            <summary>
            交集
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="source">源</param>
            <param name="builders">Sql生成器列表</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.Intersect``1(``0,System.Collections.Generic.IEnumerable{Bing.Datas.Sql.ISqlBuilder})">
            <summary>
            交集
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="source">源</param>
            <param name="builders">Sql生成器集合</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.Except``1(``0,Bing.Datas.Sql.ISqlBuilder[])">
            <summary>
            差集
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="source">源</param>
            <param name="builders">Sql生成器列表</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.Except``1(``0,System.Collections.Generic.IEnumerable{Bing.Datas.Sql.ISqlBuilder})">
            <summary>
            差集
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="source">源</param>
            <param name="builders">Sql生成器集合</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.And``1(``0,Bing.Datas.Sql.Builders.ICondition)">
            <summary>
            And连接条件
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="source">源</param>
            <param name="condition">条件</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.Or``1(``0,Bing.Datas.Sql.Builders.ICondition)">
            <summary>
            Or连接条件
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="source">源</param>
            <param name="condition">条件</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.OrIf``1(``0,Bing.Datas.Sql.Builders.ICondition,System.Boolean)">
            <summary>
            Or连接条件
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="source">源</param>
            <param name="predicate">条件</param>
            <param name="condition">该值为true时添加查询条件，否则忽略</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.Where``1(``0,Bing.Datas.Sql.Builders.ICondition)">
            <summary>
            设置查询条件
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="source">源</param>
            <param name="condition">条件</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.Where``1(``0,System.String,System.Object,Bing.Utils.Operator)">
            <summary>
            设置查询条件
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="source">源</param>
            <param name="column">列名</param>
            <param name="value">值</param>
            <param name="operator">运算符</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.Where``1(``0,System.String,Bing.Datas.Sql.ISqlBuilder,Bing.Utils.Operator)">
            <summary>
            设置子查询条件
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="source">源</param>
            <param name="column">列名</param>
            <param name="builder">子查询Sql生成器</param>
            <param name="operator">运算符</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.Where``1(``0,System.String,System.Action{Bing.Datas.Sql.ISqlBuilder},Bing.Utils.Operator)">
            <summary>
            设置子查询条件
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="source">源</param>
            <param name="column">列名</param>
            <param name="action">子查询操作</param>
            <param name="operator">运算符</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.WhereIf``1(``0,System.String,System.Object,System.Boolean,Bing.Utils.Operator)">
            <summary>
            设置查询条件
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="source">源</param>
            <param name="column">列名</param>
            <param name="value">值</param>
            <param name="condition">该值为true时添加查询条件，否则忽略</param>
            <param name="operator">运算符</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.WhereIf``1(``0,System.String,Bing.Datas.Sql.ISqlBuilder,System.Boolean,Bing.Utils.Operator)">
            <summary>
            设置子查询条件
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="source">源</param>
            <param name="column">列名</param>
            <param name="builder">子查询Sql生成器</param>
            <param name="condition">该值为true时添加查询条件，否则忽略</param>
            <param name="operator">运算符</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.WhereIf``1(``0,System.String,System.Action{Bing.Datas.Sql.ISqlBuilder},System.Boolean,Bing.Utils.Operator)">
            <summary>
            设置子查询条件
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="source">源</param>
            <param name="column">列名</param>
            <param name="action">子查询操作</param>
            <param name="condition">该值为true时添加查询条件，否则忽略</param>
            <param name="operator">运算符</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.WhereIfNotEmpty``1(``0,System.String,System.Object,Bing.Utils.Operator)">
            <summary>
            设置查询条件
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="source">源</param>
            <param name="column">列名</param>
            <param name="value">值。如果值为空，则忽略该查询条件</param>
            <param name="operator">运算符</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.Equal``1(``0,System.String,System.Object)">
            <summary>
            设置相等查询条件
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="source">源</param>
            <param name="column">列名</param>
            <param name="value">值</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.NotEqual``1(``0,System.String,System.Object)">
            <summary>
            设置不相等查询条件
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="source">源</param>
            <param name="column">列名</param>
            <param name="value">值</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.Greater``1(``0,System.String,System.Object)">
            <summary>
            设置大于查询条件
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="source">源</param>
            <param name="column">列名</param>
            <param name="value">值</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.Less``1(``0,System.String,System.Object)">
            <summary>
            设置小于查询条件
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="source">源</param>
            <param name="column">列名</param>
            <param name="value">值</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.GreaterEqual``1(``0,System.String,System.Object)">
            <summary>
            设置大于等于查询条件
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="source">源</param>
            <param name="column">列名</param>
            <param name="value">值</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.LessEqual``1(``0,System.String,System.Object)">
            <summary>
            设置小于等于查询条件
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="source">源</param>
            <param name="column">列名</param>
            <param name="value">值</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.Contains``1(``0,System.String,System.Object)">
            <summary>
            设置模糊匹配查询条件
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="source">源</param>
            <param name="column">列名</param>
            <param name="value">值</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.Starts``1(``0,System.String,System.Object)">
            <summary>
            设置头匹配查询条件
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="source">源</param>
            <param name="column">列名</param>
            <param name="value">值</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.Ends``1(``0,System.String,System.Object)">
            <summary>
            设置尾匹配查询条件
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="source">源</param>
            <param name="column">列名</param>
            <param name="value">值</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.IsNull``1(``0,System.String)">
            <summary>
            设置Is Null查询条件
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="source">源</param>
            <param name="column">列名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.IsNotNull``1(``0,System.String)">
            <summary>
            设置Is Not Null查询条件
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="source">源</param>
            <param name="column">列名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.IsEmpty``1(``0,System.String)">
            <summary>
            设置空条件，范例：[Name] Is Null Or [Name]=''
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="source">源</param>
            <param name="column">列名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.IsNotEmpty``1(``0,System.String)">
            <summary>
            设置非空条件，范例：[Name] Is Not Null And [Name]&lt;&gt;''
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="source">源</param>
            <param name="column">列名</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.In``1(``0,System.String,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            设置In条件
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="source">源</param>
            <param name="column">列名</param>
            <param name="values">值集合</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.In``1(``0,System.String,Bing.Datas.Sql.ISqlBuilder)">
            <summary>
            设置In条件
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="source">源</param>
            <param name="column">列名</param>
            <param name="builder">Sql生成器</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.In``1(``0,System.String,System.Action{Bing.Datas.Sql.ISqlBuilder})">
            <summary>
            设置In条件
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="source">源</param>
            <param name="column">列名</param>
            <param name="action">子查询操作</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.NotIn``1(``0,System.String,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            设置In条件
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="source">源</param>
            <param name="column">列名</param>
            <param name="values">值集合</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.NotIn``1(``0,System.String,Bing.Datas.Sql.ISqlBuilder)">
            <summary>
            设置In条件
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="source">源</param>
            <param name="column">列名</param>
            <param name="builder">Sql生成器</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.NotIn``1(``0,System.String,System.Action{Bing.Datas.Sql.ISqlBuilder})">
            <summary>
            设置In条件
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="source">源</param>
            <param name="column">列名</param>
            <param name="action">子查询操作</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.Exists``1(``0,Bing.Datas.Sql.ISqlBuilder)">
            <summary>
            设置Exists条件
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="source">源</param>
            <param name="builder">Sql生成器</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.Exists``1(``0,System.Action{Bing.Datas.Sql.ISqlBuilder})">
            <summary>
            设置Exists条件
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="source">源</param>
            <param name="action">子查询操作</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.NotExists``1(``0,Bing.Datas.Sql.ISqlBuilder)">
            <summary>
            设置Not Exists条件
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="source">源</param>
            <param name="builder">Sql生成器</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.NotExists``1(``0,System.Action{Bing.Datas.Sql.ISqlBuilder})">
            <summary>
            设置Not Exists条件
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="source">源</param>
            <param name="action">子查询操作</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.Between``1(``0,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},Bing.Datas.Queries.Boundary)">
            <summary>
            添加范围查询条件
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="source">源</param>
            <param name="column">列名</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <param name="boundary">包含边界</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.Between``1(``0,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},Bing.Datas.Queries.Boundary)">
            <summary>
            添加范围查询条件
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="source">源</param>
            <param name="column">列名</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <param name="boundary">包含边界</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.Between``1(``0,System.String,System.Nullable{System.Single},System.Nullable{System.Single},Bing.Datas.Queries.Boundary)">
            <summary>
            添加范围查询条件
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="source">源</param>
            <param name="column">列名</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <param name="boundary">包含边界</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.Between``1(``0,System.String,System.Nullable{System.Double},System.Nullable{System.Double},Bing.Datas.Queries.Boundary)">
            <summary>
            添加范围查询条件
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="source">源</param>
            <param name="column">列名</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <param name="boundary">包含边界</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.Between``1(``0,System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},Bing.Datas.Queries.Boundary)">
            <summary>
            添加范围查询条件
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="source">源</param>
            <param name="column">列名</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <param name="boundary">包含边界</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.Between``1(``0,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Boolean,System.Nullable{Bing.Datas.Queries.Boundary})">
            <summary>
            添加范围查询条件
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="source">源</param>
            <param name="column">列名</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <param name="includeTime">是否包含时间</param>
            <param name="boundary">包含边界</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.AppendWhere``1(``0,System.String)">
            <summary>
            添加到Where子句
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="source">源</param>
            <param name="sql">Sql语句。说明：原样添加到Sql中，不会进行任何处理</param>
        </member>
        <member name="M:Bing.Datas.Sql.Extensions.AppendWhere``1(``0,System.String,System.Boolean)">
            <summary>
            添加到Where子句
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="source">源</param>
            <param name="sql">Sql语句。说明：原样添加到Sql中，不会进行任何处理</param>
            <param name="condition">该值为true时添加Sql，否则忽略</param>
        </member>
        <member name="T:Bing.Datas.Sql.IDatabase">
            <summary>
            数据库
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.IDatabase.GetConnection">
            <summary>
            获取数据库连接
            </summary>
        </member>
        <member name="T:Bing.Datas.Sql.ISqlBuilder">
            <summary>
            Sql生成器
            </summary>
        </member>
        <member name="P:Bing.Datas.Sql.ISqlBuilder.Pager">
            <summary>
            分页参数
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.ISqlBuilder.Clone">
            <summary>
            克隆
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.Sql.ISqlBuilder.ToDebugSql">
            <summary>
            生成调试Sql语句，Sql语句中的参数被替换为参数值
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.ISqlBuilder.ToSql">
            <summary>
            生成Sql语句
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.ISqlBuilder.New">
            <summary>
            创建Sql生成器
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.ISqlBuilder.Clear">
            <summary>
            清空并初始化
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.ISqlBuilder.ClearSelect">
            <summary>
            清空Select子句
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.ISqlBuilder.ClearFrom">
            <summary>
            清空From子句
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.ISqlBuilder.ClearJoin">
            <summary>
            清空Join子句
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.ISqlBuilder.ClearWhere">
            <summary>
            清空Where子句
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.ISqlBuilder.ClearGroupBy">
            <summary>
            清空GroupBy子句
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.ISqlBuilder.ClearOrderBy">
            <summary>
            清空OrderBy子句
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.ISqlBuilder.ClearSqlParams">
            <summary>
            清空Sql参数
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.ISqlBuilder.ClearPageParams">
            <summary>
            清空分页参数
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.ISqlBuilder.ClearUnionBuilders">
            <summary>
            清空联合操作项
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.ISqlBuilder.ClearCte">
            <summary>
            清空公用表表达式
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.ISqlBuilder.AddParam(System.String,System.Object)">
            <summary>
            添加Sql参数
            </summary>
            <param name="name">参数名</param>
            <param name="value">参数值</param>
        </member>
        <member name="M:Bing.Datas.Sql.ISqlBuilder.GetParams">
            <summary>
            获取参数列表
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.ISqlBuilder.Page(Bing.Domains.Repositories.IPager)">
            <summary>
            设置分页
            </summary>
            <param name="pager">分页参数</param>
        </member>
        <member name="M:Bing.Datas.Sql.ISqlBuilder.Skip(System.Int32)">
            <summary>
            设置跳过行数
            </summary>
            <param name="count">跳过的行数</param>
        </member>
        <member name="M:Bing.Datas.Sql.ISqlBuilder.Take(System.Int32)">
            <summary>
            设置获取行数
            </summary>
            <param name="count">获取的行数</param>
        </member>
        <member name="M:Bing.Datas.Sql.ISqlBuilder.IgnoreFilter``1">
            <summary>
            忽略过滤器
            </summary>
            <typeparam name="TSqlFilter">Sql过滤器类型</typeparam>
        </member>
        <member name="T:Bing.Datas.Sql.ISqlExecutor">
            <summary>
            Sql执行对象
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.ISqlExecutor.SetConnection(System.Data.IDbConnection)">
            <summary>
            设置数据库连接
            </summary>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:Bing.Datas.Sql.ISqlExecutor.ExecuteSql(System.String,System.Object)">
            <summary>
            执行Sql语句
            </summary>
            <param name="sql">Sql语句</param>
            <param name="param">参数</param>
        </member>
        <member name="M:Bing.Datas.Sql.ISqlExecutor.ExecuteSqlAsync(System.String,System.Object)">
            <summary>
            执行Sql语句
            </summary>
            <param name="sql">Sql语句</param>
            <param name="param">参数</param>
        </member>
        <member name="T:Bing.Datas.Sql.ISqlQuery">
            <summary>
            Sql查询对象
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.ISqlQuery.SetConnection(System.Data.IDbConnection)">
            <summary>
            设置数据库连接
            </summary>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:Bing.Datas.Sql.ISqlQuery.Clone">
            <summary>
            克隆
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.ISqlQuery.Config(System.Action{Bing.Datas.Sql.Configs.SqlOptions})">
            <summary>
            配置
            </summary>
            <param name="configAction">配置操作</param>
        </member>
        <member name="M:Bing.Datas.Sql.ISqlQuery.GetBuilder">
            <summary>
            获取Sql生成器
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.ISqlQuery.Query``1(System.Func{System.Data.IDbConnection,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},``0},System.Data.IDbConnection)">
            <summary>
            查询
            </summary>
            <typeparam name="TResult">实体类型</typeparam>
            <param name="func">查询操作</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:Bing.Datas.Sql.ISqlQuery.QueryAsync``1(System.Func{System.Data.IDbConnection,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.Threading.Tasks.Task{``0}},System.Data.IDbConnection)">
            <summary>
            查询
            </summary>
            <typeparam name="TResult">实体类型</typeparam>
            <param name="func">查询操作</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:Bing.Datas.Sql.ISqlQuery.PagerQuery``1(System.Func{System.Collections.Generic.List{``0}},Bing.Domains.Repositories.IPager,System.Data.IDbConnection)">
            <summary>
            分页查询
            </summary>
            <typeparam name="TResult">返回结果类型</typeparam>
            <param name="func">获取列表操作</param>
            <param name="parameter">分页参数</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:Bing.Datas.Sql.ISqlQuery.PagerQueryAsync``1(System.Func{System.Threading.Tasks.Task{System.Collections.Generic.List{``0}}},Bing.Domains.Repositories.IPager,System.Data.IDbConnection)">
            <summary>
            分页查询
            </summary>
            <typeparam name="TResult">返回结果类型</typeparam>
            <param name="func">获取列表操作</param>
            <param name="parameter">分页参数</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:Bing.Datas.Sql.ISqlQuery.ToScalar(System.Data.IDbConnection)">
            <summary>
            获取单值
            </summary>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:Bing.Datas.Sql.ISqlQuery.ToScalarAsync(System.Data.IDbConnection)">
            <summary>
            获取单值
            </summary>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:Bing.Datas.Sql.ISqlQuery.To``1(System.Data.IDbConnection)">
            <summary>
            获取单个实体
            </summary>
            <typeparam name="TResult">返回结果类型</typeparam>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:Bing.Datas.Sql.ISqlQuery.ToAsync``1(System.Data.IDbConnection)">
            <summary>
            获取单个实体
            </summary>
            <typeparam name="TResult">返回结果类型</typeparam>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:Bing.Datas.Sql.ISqlQuery.ToList``1(System.Data.IDbConnection)">
            <summary>
            获取列表
            </summary>
            <typeparam name="TResult">返回结果类型</typeparam>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:Bing.Datas.Sql.ISqlQuery.ToListAsync``1(System.Data.IDbConnection)">
            <summary>
            获取列表
            </summary>
            <typeparam name="TResult">返回结果类型</typeparam>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:Bing.Datas.Sql.ISqlQuery.ToListAsync``1(System.String,System.Data.IDbConnection)">
            <summary>
            获取列表
            </summary>
            <typeparam name="TResult">返回结果类型</typeparam>
            <param name="sql">Sql语句</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:Bing.Datas.Sql.ISqlQuery.ToPagerList``1(Bing.Domains.Repositories.IPager,System.Data.IDbConnection)">
            <summary>
            获取分页列表
            </summary>
            <typeparam name="TResult">返回结果类型</typeparam>
            <param name="parameter">分页参数</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:Bing.Datas.Sql.ISqlQuery.ToPagerListAsync``1(Bing.Domains.Repositories.IPager,System.Data.IDbConnection)">
            <summary>
            获取分页列表
            </summary>
            <typeparam name="TResult">返回结果类型</typeparam>
            <param name="parameter">分页参数</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:Bing.Datas.Sql.ISqlQuery.ToPagerList``1(System.Int32,System.Int32,System.Data.IDbConnection)">
            <summary>
            获取分页列表
            </summary>
            <typeparam name="TResult">返回结果类型</typeparam>
            <param name="page">页数</param>
            <param name="pageSize">每页显示行数</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:Bing.Datas.Sql.ISqlQuery.ToPagerListAsync``1(System.Int32,System.Int32,System.Data.IDbConnection)">
            <summary>
            获取分页列表
            </summary>
            <typeparam name="TResult">返回结果类型</typeparam>
            <param name="page">页数</param>
            <param name="pageSize">每页显示行数</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:Bing.Datas.Sql.ISqlQuery.ToPagerListAsync``1(System.String,System.Int32,System.Int32,System.Data.IDbConnection)">
            <summary>
            获取分页列表
            </summary>
            <typeparam name="TResult">返回结果类型</typeparam>
            <param name="sql">Sql语句</param>
            <param name="page">页数</param>
            <param name="pageSize">每页显示行数</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="T:Bing.Datas.Sql.Matedatas.DefaultEntityMatedata">
            <summary>
            实体元数据
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Matedatas.DefaultEntityMatedata.GetTable(System.Type)">
            <summary>
            获取表名
            </summary>
            <param name="type">实体类型</param>
        </member>
        <member name="M:Bing.Datas.Sql.Matedatas.DefaultEntityMatedata.GetSchema(System.Type)">
            <summary>
            获取架构
            </summary>
            <param name="type">实体类型</param>
        </member>
        <member name="M:Bing.Datas.Sql.Matedatas.DefaultEntityMatedata.GetColumn(System.Type,System.String)">
            <summary>
            获取列名
            </summary>
            <param name="type">实体类型</param>
            <param name="property">属性名</param>
        </member>
        <member name="T:Bing.Datas.Sql.Matedatas.DefaultTableDatabase">
            <summary>
            表数据库
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Matedatas.DefaultTableDatabase.GetDatabase(System.String)">
            <summary>
            获取数据库
            </summary>
            <param name="table">表</param>
        </member>
        <member name="T:Bing.Datas.Sql.Matedatas.IEntityMatedata">
            <summary>
            实体元数据
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Matedatas.IEntityMatedata.GetTable(System.Type)">
            <summary>
            获取表名
            </summary>
            <param name="type">实体类型</param>
        </member>
        <member name="M:Bing.Datas.Sql.Matedatas.IEntityMatedata.GetSchema(System.Type)">
            <summary>
            获取架构
            </summary>
            <param name="type">实体类型</param>
        </member>
        <member name="M:Bing.Datas.Sql.Matedatas.IEntityMatedata.GetColumn(System.Type,System.String)">
            <summary>
            获取列名
            </summary>
            <param name="type">实体类型</param>
            <param name="property">属性名</param>
        </member>
        <member name="T:Bing.Datas.Sql.Matedatas.ITableDatabase">
            <summary>
            表数据库
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Matedatas.ITableDatabase.GetDatabase(System.String)">
            <summary>
            获取数据库
            </summary>
            <param name="table">表</param>
        </member>
        <member name="T:Bing.Datas.Sql.Queries.SqlQueryBase">
            <summary>
            Sql查询对象基类
            </summary>
        </member>
        <member name="P:Bing.Datas.Sql.Queries.SqlQueryBase.Database">
            <summary>
            数据库
            </summary>
        </member>
        <member name="P:Bing.Datas.Sql.Queries.SqlQueryBase.Connection">
            <summary>
            数据库连接
            </summary>
        </member>
        <member name="P:Bing.Datas.Sql.Queries.SqlQueryBase.SqlOptions">
            <summary>
            Sql配置
            </summary>
        </member>
        <member name="P:Bing.Datas.Sql.Queries.SqlQueryBase.Builder">
            <summary>
            Sql生成器
            </summary>
        </member>
        <member name="P:Bing.Datas.Sql.Queries.SqlQueryBase.SelectClause">
            <summary>
            Select子句
            </summary>
        </member>
        <member name="P:Bing.Datas.Sql.Queries.SqlQueryBase.FromClause">
            <summary>
            From子句
            </summary>
        </member>
        <member name="P:Bing.Datas.Sql.Queries.SqlQueryBase.JoinClause">
            <summary>
            Join子句
            </summary>
        </member>
        <member name="P:Bing.Datas.Sql.Queries.SqlQueryBase.WhereClause">
            <summary>
            Where子句
            </summary>
        </member>
        <member name="P:Bing.Datas.Sql.Queries.SqlQueryBase.GroupByClause">
            <summary>
            GroupBy子句
            </summary>
        </member>
        <member name="P:Bing.Datas.Sql.Queries.SqlQueryBase.OrderByClause">
            <summary>
            OrderBy子句
            </summary>
        </member>
        <member name="P:Bing.Datas.Sql.Queries.SqlQueryBase.Params">
            <summary>
            参数列表
            </summary>
        </member>
        <member name="P:Bing.Datas.Sql.Queries.SqlQueryBase.IsUnion">
            <summary>
            是否包含联合操作
            </summary>
        </member>
        <member name="P:Bing.Datas.Sql.Queries.SqlQueryBase.UnionItems">
            <summary>
            联合操作项集合
            </summary>
        </member>
        <member name="P:Bing.Datas.Sql.Queries.SqlQueryBase.CteItems">
            <summary>
            公用表表达式CTE集合
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Queries.SqlQueryBase.#ctor(Bing.Datas.Sql.ISqlBuilder,Bing.Datas.Sql.IDatabase,Bing.Datas.Sql.Configs.SqlOptions)">
            <summary>
            初始化一个<see cref="T:Bing.Datas.Sql.Queries.SqlQueryBase"/>类型的实例
            </summary>
            <param name="sqlBuilder">Sql生成器</param>
            <param name="database">数据库</param>
            <param name="sqlOptions">Sql配置</param>
        </member>
        <member name="M:Bing.Datas.Sql.Queries.SqlQueryBase.GetOptions">
            <summary>
            获取配置
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Queries.SqlQueryBase.SetConnection(System.Data.IDbConnection)">
            <summary>
            设置数据库连接
            </summary>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:Bing.Datas.Sql.Queries.SqlQueryBase.GetConnection(System.Data.IDbConnection)">
            <summary>
            获取数据库连接
            </summary>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:Bing.Datas.Sql.Queries.SqlQueryBase.Clone">
            <summary>
            克隆
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Queries.SqlQueryBase.Config(System.Action{Bing.Datas.Sql.Configs.SqlOptions})">
            <summary>
            配置
            </summary>
            <param name="configAction">配置操作</param>
        </member>
        <member name="M:Bing.Datas.Sql.Queries.SqlQueryBase.ClearAfterExecution">
            <summary>
            在执行之后清空Sql和参数
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Queries.SqlQueryBase.GetDebugSql">
            <summary>
            获取调试Sql语句
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Queries.SqlQueryBase.GetSql">
            <summary>
            获取Sql语句
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Queries.SqlQueryBase.GetBuilder">
            <summary>
            获取Sql生成器
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Queries.SqlQueryBase.ToScalar(System.Data.IDbConnection)">
            <summary>
            获取单值
            </summary>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:Bing.Datas.Sql.Queries.SqlQueryBase.ToScalarAsync(System.Data.IDbConnection)">
            <summary>
            获取单值
            </summary>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:Bing.Datas.Sql.Queries.SqlQueryBase.To``1(System.Data.IDbConnection)">
            <summary>
            获取单个实体
            </summary>
            <typeparam name="TResult">返回结果类型</typeparam>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:Bing.Datas.Sql.Queries.SqlQueryBase.ToAsync``1(System.Data.IDbConnection)">
            <summary>
            获取单个实体
            </summary>
            <typeparam name="TResult">返回结果类型</typeparam>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:Bing.Datas.Sql.Queries.SqlQueryBase.ToList``1(System.Data.IDbConnection)">
            <summary>
            获取列表
            </summary>
            <typeparam name="TResult">返回结果类型</typeparam>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:Bing.Datas.Sql.Queries.SqlQueryBase.ToListAsync``1(System.Data.IDbConnection)">
            <summary>
            获取列表
            </summary>
            <typeparam name="TResult">返回结果类型</typeparam>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:Bing.Datas.Sql.Queries.SqlQueryBase.ToListAsync``1(System.String,System.Data.IDbConnection)">
            <summary>
            获取列表
            </summary>
            <typeparam name="TResult">返回结果类型</typeparam>
            <param name="sql">Sql语句</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:Bing.Datas.Sql.Queries.SqlQueryBase.ToPagerList``1(Bing.Domains.Repositories.IPager,System.Data.IDbConnection)">
            <summary>
            获取分页列表
            </summary>
            <typeparam name="TResult">返回结果类型</typeparam>
            <param name="parameter">分页参数</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:Bing.Datas.Sql.Queries.SqlQueryBase.ToPagerListAsync``1(Bing.Domains.Repositories.IPager,System.Data.IDbConnection)">
            <summary>
            获取分页列表
            </summary>
            <typeparam name="TResult">返回结果类型</typeparam>
            <param name="parameter">分页参数</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:Bing.Datas.Sql.Queries.SqlQueryBase.ToPagerList``1(System.Int32,System.Int32,System.Data.IDbConnection)">
            <summary>
            获取分页列表
            </summary>
            <typeparam name="TResult">返回结果类型</typeparam>
            <param name="page">页数</param>
            <param name="pageSize">每页显示行数</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:Bing.Datas.Sql.Queries.SqlQueryBase.PagerQuery``1(System.Func{System.Collections.Generic.List{``0}},Bing.Domains.Repositories.IPager,System.Data.IDbConnection)">
            <summary>
            分页查询
            </summary>
            <typeparam name="TResult">返回结果类型</typeparam>
            <param name="func">获取列表操作</param>
            <param name="parameter">分页参数</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:Bing.Datas.Sql.Queries.SqlQueryBase.PagerQueryAsync``1(System.Func{System.Threading.Tasks.Task{System.Collections.Generic.List{``0}}},Bing.Domains.Repositories.IPager,System.Data.IDbConnection)">
            <summary>
            分页查询
            </summary>
            <typeparam name="TResult">返回结果类型</typeparam>
            <param name="func">获取列表操作</param>
            <param name="parameter">分页参数</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:Bing.Datas.Sql.Queries.SqlQueryBase.ToPagerListAsync``1(System.Int32,System.Int32,System.Data.IDbConnection)">
            <summary>
            获取分页列表
            </summary>
            <typeparam name="TResult">返回结果类型</typeparam>
            <param name="page">页数</param>
            <param name="pageSize">每页显示行数</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:Bing.Datas.Sql.Queries.SqlQueryBase.ToPagerListAsync``1(System.String,System.Int32,System.Int32,System.Data.IDbConnection)">
            <summary>
            获取分页列表
            </summary>
            <typeparam name="TResult">返回结果类型</typeparam>
            <param name="sql">Sql语句</param>
            <param name="page">页数</param>
            <param name="pageSize">每页显示行数</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:Bing.Datas.Sql.Queries.SqlQueryBase.Query``1(System.Func{System.Data.IDbConnection,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},``0},System.Data.IDbConnection)">
            <summary>
            查询
            </summary>
            <typeparam name="TResult">实体类型</typeparam>
            <param name="func">查询操作</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:Bing.Datas.Sql.Queries.SqlQueryBase.QueryAsync``1(System.Func{System.Data.IDbConnection,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.Threading.Tasks.Task{``0}},System.Data.IDbConnection)">
            <summary>
            查询
            </summary>
            <typeparam name="TResult">实体类型</typeparam>
            <param name="func">查询操作</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:Bing.Datas.Sql.Queries.SqlQueryBase.WriteTraceLog(System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.String)">
            <summary>
            写日志
            </summary>
            <param name="sql">Sql语句</param>
            <param name="parameters">参数</param>
            <param name="debugSql">调试Sql语句</param>
        </member>
        <member name="M:Bing.Datas.Sql.Queries.SqlQueryBase.GetPage(Bing.Domains.Repositories.IPager)">
            <summary>
            获取分页参数
            </summary>
            <param name="parameter">分页参数</param>
        </member>
        <member name="M:Bing.Datas.Sql.Queries.SqlQueryBase.GetCountBuilder">
            <summary>
            获取行数Sql生成器
            </summary>
        </member>
        <member name="M:Bing.Datas.Sql.Queries.SqlQueryBase.ClearCountBuilder(Bing.Datas.Sql.ISqlBuilder)">
            <summary>
            清空行数Sql生成器
            </summary>
            <param name="builder">Sql生成器</param>
        </member>
        <member name="M:Bing.Datas.Sql.Queries.SqlQueryBase.GetCountBuilderByUnion(Bing.Datas.Sql.ISqlBuilder)">
            <summary>
            获取行数Sql生成器 - 联合
            </summary>
            <param name="countBuilder">行数Sql生成器</param>
        </member>
        <member name="M:Bing.Datas.Sql.Queries.SqlQueryBase.IsGroup(Bing.Datas.Sql.ISqlBuilder)">
            <summary>
            是否分组
            </summary>
            <param name="builder">Sql生成器</param>
        </member>
        <member name="M:Bing.Datas.Sql.Queries.SqlQueryBase.GetCountBuilderByGroup(Bing.Datas.Sql.ISqlBuilder)">
            <summary>
            获取行数Sql生成器 - 分组
            </summary>
            <param name="countBuilder">行数Sql生成器</param>
        </member>
        <member name="M:Bing.Datas.Sql.Queries.SqlQueryBase.GetCountBuilder(Bing.Datas.Sql.ISqlBuilder)">
            <summary>
            获取行数Sql生成器
            </summary>
            <param name="countBuilder">行数Sql生成器</param>
        </member>
        <member name="T:Bing.Datas.Stores.IQueryStore`1">
            <summary>
            查询存储器
            </summary>
            <typeparam name="TEntity">对象类型</typeparam>
        </member>
        <member name="T:Bing.Datas.Stores.IQueryStore`2">
            <summary>
            查询存储器
            </summary>
            <typeparam name="TEntity">对象类型</typeparam>
            <typeparam name="TKey">对象标识类型</typeparam>
        </member>
        <member name="T:Bing.Datas.Stores.IStore`1">
            <summary>
            存储器
            </summary>
            <typeparam name="TEntity">对象类型</typeparam>
        </member>
        <member name="T:Bing.Datas.Stores.IStore`2">
            <summary>
            存储器
            </summary>
            <typeparam name="TEntity">对象类型</typeparam>
            <typeparam name="TKey">对象标识类型</typeparam>
        </member>
        <member name="T:Bing.Datas.Stores.Operations.IAdd`2">
            <summary>
            添加实体
            </summary>
            <typeparam name="TEntity">对象了洗ing</typeparam>
            <typeparam name="TKey">对象标识类型</typeparam>
        </member>
        <member name="M:Bing.Datas.Stores.Operations.IAdd`2.Add(`0)">
            <summary>
            添加实体
            </summary>
            <param name="entity">实体</param>
        </member>
        <member name="M:Bing.Datas.Stores.Operations.IAdd`2.Add(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            添加实体集合
            </summary>
            <param name="entities">实体集合</param>
        </member>
        <member name="T:Bing.Datas.Stores.Operations.IAddAsync`2">
            <summary>
            添加实体
            </summary>
            <typeparam name="TEntity">对象类型</typeparam>
            <typeparam name="TKey">对象标识类型</typeparam>
        </member>
        <member name="M:Bing.Datas.Stores.Operations.IAddAsync`2.AddAsync(`0,System.Threading.CancellationToken)">
            <summary>
            添加实体
            </summary>
            <param name="entity">实体</param>
            <param name="cancellationToken">取消令牌</param>
        </member>
        <member name="M:Bing.Datas.Stores.Operations.IAddAsync`2.AddAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <summary>
            添加实体集合
            </summary>
            <param name="entities">实体集合</param>
            <param name="cancellationToken">取消令牌</param>
        </member>
        <member name="T:Bing.Datas.Stores.Operations.ICount`2">
            <summary>
            查找数量
            </summary>
            <typeparam name="TEntity">对象类型</typeparam>
            <typeparam name="TKey">对象标识类型</typeparam>
        </member>
        <member name="M:Bing.Datas.Stores.Operations.ICount`2.Count(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            查找数量
            </summary>
            <param name="predicate">查询条件</param>
        </member>
        <member name="T:Bing.Datas.Stores.Operations.ICountAsync`2">
            <summary>
            查找数量
            </summary>
            <typeparam name="TEntity">对象类型</typeparam>
            <typeparam name="TKey">对象标识类型</typeparam>
        </member>
        <member name="M:Bing.Datas.Stores.Operations.ICountAsync`2.CountAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            查找数量
            </summary>
            <param name="predicate">查询条件</param>
        </member>
        <member name="T:Bing.Datas.Stores.Operations.IExists`2">
            <summary>
            通过标识判断是否存在
            </summary>
            <typeparam name="TEntity">对象类型</typeparam>
            <typeparam name="TKey">对象标识类型</typeparam>
        </member>
        <member name="M:Bing.Datas.Stores.Operations.IExists`2.Exists(`1[])">
            <summary>
            判断是否存在
            </summary>
            <param name="ids">标识列表</param>
        </member>
        <member name="T:Bing.Datas.Stores.Operations.IExistsAsync`2">
            <summary>
            通过标识判断是否存在
            </summary>
            <typeparam name="TEntity">对象类型</typeparam>
            <typeparam name="TKey">对象标识类型</typeparam>
        </member>
        <member name="M:Bing.Datas.Stores.Operations.IExistsAsync`2.ExistsAsync(`1[])">
            <summary>
            判断是否存在
            </summary>
            <param name="ids">标识列表</param>
        </member>
        <member name="T:Bing.Datas.Stores.Operations.IExistsByExpression`2">
            <summary>
            通过表达式判断是否存在
            </summary>
            <typeparam name="TEntity">对象类型</typeparam>
            <typeparam name="TKey">对象标识类型</typeparam>
        </member>
        <member name="M:Bing.Datas.Stores.Operations.IExistsByExpression`2.Exists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            判断是否存在
            </summary>
            <param name="predicate">查询条件</param>
        </member>
        <member name="T:Bing.Datas.Stores.Operations.IExistsByExpressionAsync`2">
            <summary>
            通过表达式判断是否存在
            </summary>
            <typeparam name="TEntity">对象类型</typeparam>
            <typeparam name="TKey">对象标识类型</typeparam>
        </member>
        <member name="M:Bing.Datas.Stores.Operations.IExistsByExpressionAsync`2.ExistsAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            判断是否存在
            </summary>
            <param name="predicate">查询条件</param>
        </member>
        <member name="T:Bing.Datas.Stores.Operations.IFindAll`2">
            <summary>
            查找实体列表
            </summary>
            <typeparam name="TEntity">对象类型</typeparam>
            <typeparam name="TKey">对象标识类型</typeparam>
        </member>
        <member name="M:Bing.Datas.Stores.Operations.IFindAll`2.FindAll(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            查找实体列表
            </summary>
            <param name="predicate">查询条件</param>
        </member>
        <member name="T:Bing.Datas.Stores.Operations.IFindAllAsync`2">
            <summary>
            查找实体列表
            </summary>
            <typeparam name="TEntity">对象类型</typeparam>
            <typeparam name="TKey">对象标识类型</typeparam>
        </member>
        <member name="M:Bing.Datas.Stores.Operations.IFindAllAsync`2.FindAllAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            查找实体列表
            </summary>
            <param name="predicate">查询条件</param>
        </member>
        <member name="T:Bing.Datas.Stores.Operations.IFindAllNoTracking`2">
            <summary>
            查找实体列表
            </summary>
            <typeparam name="TEntity">对象类型</typeparam>
            <typeparam name="TKey">对象标识类型</typeparam>
        </member>
        <member name="M:Bing.Datas.Stores.Operations.IFindAllNoTracking`2.FindAllNoTracking(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            查找实体列表，不跟踪
            </summary>
            <param name="predicate">查询条件</param>
        </member>
        <member name="T:Bing.Datas.Stores.Operations.IFindAllNoTrackingAsync`2">
            <summary>
            查找实体列表
            </summary>
            <typeparam name="TEntity">对象类型</typeparam>
            <typeparam name="TKey">对象标识类型</typeparam>
        </member>
        <member name="M:Bing.Datas.Stores.Operations.IFindAllNoTrackingAsync`2.FindAllNoTrackingAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            查找实体列表，不跟踪
            </summary>
            <param name="predicate">查询条件</param>
        </member>
        <member name="T:Bing.Datas.Stores.Operations.IFindById`2">
            <summary>
            通过标识查找
            </summary>
            <typeparam name="TEntity">对象类型</typeparam>
            <typeparam name="TKey">对象标识类型</typeparam>
        </member>
        <member name="M:Bing.Datas.Stores.Operations.IFindById`2.Find(System.Object)">
            <summary>
            查找实体
            </summary>
            <param name="id">标识</param>
        </member>
        <member name="T:Bing.Datas.Stores.Operations.IFindByIdAsync`2">
            <summary>
            通过标识查找
            </summary>
            <typeparam name="TEntity">对象类型</typeparam>
            <typeparam name="TKey">对象标识类型</typeparam>
        </member>
        <member name="M:Bing.Datas.Stores.Operations.IFindByIdAsync`2.FindAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            查找实体
            </summary>
            <param name="id">标识</param>
            <param name="cancellationToken">取消令牌</param>
        </member>
        <member name="T:Bing.Datas.Stores.Operations.IFindByIdNoTracking`2">
            <summary>
            通过标识查找
            </summary>
            <typeparam name="TEntity">对象类型</typeparam>
            <typeparam name="TKey">对象标识类型</typeparam>
        </member>
        <member name="M:Bing.Datas.Stores.Operations.IFindByIdNoTracking`2.FindByIdNoTracking(`1)">
            <summary>
            查找未跟踪单个实体
            </summary>
            <param name="id">标识</param>
        </member>
        <member name="T:Bing.Datas.Stores.Operations.IFindByIdNoTrackingAsync`2">
            <summary>
            通过标识查找
            </summary>
            <typeparam name="TEntity">对象类型</typeparam>
            <typeparam name="TKey">对象标识类型</typeparam>
        </member>
        <member name="M:Bing.Datas.Stores.Operations.IFindByIdNoTrackingAsync`2.FindByIdNoTrackingAsync(`1,System.Threading.CancellationToken)">
            <summary>
            查找未跟踪单个实体
            </summary>
            <param name="id">标识</param>
            <param name="cancellationToken">取消令牌</param>
        </member>
        <member name="T:Bing.Datas.Stores.Operations.IFindByIds`2">
            <summary>
            通过标识列表查找
            </summary>
            <typeparam name="TEntity">对象类型</typeparam>
            <typeparam name="TKey">对象标识类型</typeparam>
        </member>
        <member name="M:Bing.Datas.Stores.Operations.IFindByIds`2.FindByIds(`1[])">
            <summary>
            查找实体列表
            </summary>
            <param name="ids">标识列表</param>
        </member>
        <member name="M:Bing.Datas.Stores.Operations.IFindByIds`2.FindByIds(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            查找实体列表
            </summary>
            <param name="ids">标识列表</param>
        </member>
        <member name="M:Bing.Datas.Stores.Operations.IFindByIds`2.FindByIds(System.String)">
            <summary>
            查找实体列表
            </summary>
            <param name="ids">逗号分隔的标识列表，范例："1,2"</param>
        </member>
        <member name="T:Bing.Datas.Stores.Operations.IFindByIdsAsync`2">
            <summary>
            通过标识列表查找
            </summary>
            <typeparam name="TEntity">对象类型</typeparam>
            <typeparam name="TKey">对象标识类型</typeparam>
        </member>
        <member name="M:Bing.Datas.Stores.Operations.IFindByIdsAsync`2.FindByIdsAsync(`1[])">
            <summary>
            查找实体列表
            </summary>
            <param name="ids">标识列表</param>
        </member>
        <member name="M:Bing.Datas.Stores.Operations.IFindByIdsAsync`2.FindByIdsAsync(System.Collections.Generic.IEnumerable{`1},System.Threading.CancellationToken)">
            <summary>
            查找实体列表
            </summary>
            <param name="ids">标识列表</param>
            <param name="cancellationToken">取消令牌</param>
        </member>
        <member name="M:Bing.Datas.Stores.Operations.IFindByIdsAsync`2.FindByIdsAsync(System.String)">
            <summary>
            查找实体列表
            </summary>
            <param name="ids">逗号分隔的标识列表，范例："1,2"</param>
        </member>
        <member name="T:Bing.Datas.Stores.Operations.IFindByIdsNoTracking`2">
            <summary>
            通过标识列表查找
            </summary>
            <typeparam name="TEntity">对象类型</typeparam>
            <typeparam name="TKey">对象标识类型</typeparam>
        </member>
        <member name="M:Bing.Datas.Stores.Operations.IFindByIdsNoTracking`2.FindByIdsNoTracking(`1[])">
            <summary>
            查找实体列表，不跟踪
            </summary>
            <param name="ids">标识列表</param>
        </member>
        <member name="M:Bing.Datas.Stores.Operations.IFindByIdsNoTracking`2.FindByIdsNoTracking(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            查找实体列表，不跟踪
            </summary>
            <param name="ids">标识列表</param>
        </member>
        <member name="M:Bing.Datas.Stores.Operations.IFindByIdsNoTracking`2.FindByIdsNoTracking(System.String)">
            <summary>
            查找实体列表，不跟踪
            </summary>
            <param name="ids">逗号分隔的标识列表，范例："1,2"</param>
        </member>
        <member name="T:Bing.Datas.Stores.Operations.IFindByIdsNoTrackingAsync`2">
            <summary>
            通过标识列表查找
            </summary>
            <typeparam name="TEntity">对象类型</typeparam>
            <typeparam name="TKey">对象标识类型</typeparam>
        </member>
        <member name="M:Bing.Datas.Stores.Operations.IFindByIdsNoTrackingAsync`2.FindByIdsNoTrackingAsync(`1[])">
            <summary>
            查找实体列表，不跟踪
            </summary>
            <param name="ids">标识列表</param>
        </member>
        <member name="M:Bing.Datas.Stores.Operations.IFindByIdsNoTrackingAsync`2.FindByIdsNoTrackingAsync(System.Collections.Generic.IEnumerable{`1},System.Threading.CancellationToken)">
            <summary>
            查找实体列表，不跟踪
            </summary>
            <param name="ids">标识列表</param>
            <param name="cancellationToken">取消令牌</param>
        </member>
        <member name="M:Bing.Datas.Stores.Operations.IFindByIdsNoTrackingAsync`2.FindByIdsNoTrackingAsync(System.String)">
            <summary>
            查找实体列表，不跟踪
            </summary>
            <param name="ids">逗号分隔的标识列表，范例："1,2"</param>
        </member>
        <member name="T:Bing.Datas.Stores.Operations.IFindQueryable`2">
            <summary>
            获取查询对象
            </summary>
            <typeparam name="TEntity">对象类型</typeparam>
            <typeparam name="TKey">对象标识类型</typeparam>
        </member>
        <member name="M:Bing.Datas.Stores.Operations.IFindQueryable`2.FindAsNoTracking">
            <summary>
            获取未跟踪查询对象
            </summary>
        </member>
        <member name="M:Bing.Datas.Stores.Operations.IFindQueryable`2.Find">
            <summary>
            获取查询对象
            </summary>
        </member>
        <member name="M:Bing.Datas.Stores.Operations.IFindQueryable`2.Find(Bing.Domains.Repositories.ICriteria{`0})">
            <summary>
            查找
            </summary>
            <param name="criteria">查询条件</param>
        </member>
        <member name="M:Bing.Datas.Stores.Operations.IFindQueryable`2.Find(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            查找
            </summary>
            <param name="predicate">查询条件</param>
        </member>
        <member name="T:Bing.Datas.Stores.Operations.IPageQuery`2">
            <summary>
            分页查询
            </summary>
            <typeparam name="TEntity">对象类型</typeparam>
            <typeparam name="TKey">对象标识类型</typeparam>
        </member>
        <member name="M:Bing.Datas.Stores.Operations.IPageQuery`2.Query(Bing.Domains.Repositories.IQueryBase{`0})">
            <summary>
            查询
            </summary>
            <param name="query">查询对象</param>
        </member>
        <member name="M:Bing.Datas.Stores.Operations.IPageQuery`2.QueryAsNoTracking(Bing.Domains.Repositories.IQueryBase{`0})">
            <summary>
            查询 - 返回未跟踪的实体
            </summary>
            <param name="query">查询对象</param>
        </member>
        <member name="M:Bing.Datas.Stores.Operations.IPageQuery`2.PagerQuery(Bing.Domains.Repositories.IQueryBase{`0})">
            <summary>
            分页查询
            </summary>
            <param name="query">查询对象</param>
        </member>
        <member name="M:Bing.Datas.Stores.Operations.IPageQuery`2.PagerQueryAsNoTracking(Bing.Domains.Repositories.IQueryBase{`0})">
            <summary>
            分页查询 - 返回未跟踪的实体
            </summary>
            <param name="query">查询对象</param>
        </member>
        <member name="T:Bing.Datas.Stores.Operations.IPageQueryAsync`2">
            <summary>
            分页查询
            </summary>
            <typeparam name="TEntity">对象类型</typeparam>
            <typeparam name="TKey">对象标识类型</typeparam>
        </member>
        <member name="M:Bing.Datas.Stores.Operations.IPageQueryAsync`2.QueryAsync(Bing.Domains.Repositories.IQueryBase{`0})">
            <summary>
            查询
            </summary>
            <param name="query">查询对象</param>
        </member>
        <member name="M:Bing.Datas.Stores.Operations.IPageQueryAsync`2.QueryAsNoTrackingAsync(Bing.Domains.Repositories.IQueryBase{`0})">
            <summary>
            查询 - 返回未跟踪的实体
            </summary>
            <param name="query">查询对象</param>
        </member>
        <member name="M:Bing.Datas.Stores.Operations.IPageQueryAsync`2.PagerQueryAsync(Bing.Domains.Repositories.IQueryBase{`0})">
            <summary>
            分页查询
            </summary>
            <param name="query">查询对象</param>
        </member>
        <member name="M:Bing.Datas.Stores.Operations.IPageQueryAsync`2.PagerQueryAsNoTrackingAsync(Bing.Domains.Repositories.IQueryBase{`0})">
            <summary>
            分页查询 - 返回未跟踪的实体
            </summary>
            <param name="query">查询对象</param>
        </member>
        <member name="T:Bing.Datas.Stores.Operations.IRemove`2">
            <summary>
            移除实体
            </summary>
            <typeparam name="TEntity">对象类型</typeparam>
            <typeparam name="TKey">对象标识类型</typeparam>
        </member>
        <member name="M:Bing.Datas.Stores.Operations.IRemove`2.Remove(System.Object)">
            <summary>
            移除实体
            </summary>
            <param name="id">标识</param>
        </member>
        <member name="M:Bing.Datas.Stores.Operations.IRemove`2.Remove(`0)">
            <summary>
            移除实体
            </summary>
            <param name="entity">实体</param>
        </member>
        <member name="M:Bing.Datas.Stores.Operations.IRemove`2.Remove(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            移除实体集合
            </summary>
            <param name="ids">标识集合</param>
        </member>
        <member name="M:Bing.Datas.Stores.Operations.IRemove`2.Remove(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            移除实体集合
            </summary>
            <param name="entities">实体集合</param>
        </member>
        <member name="T:Bing.Datas.Stores.Operations.IRemoveAsync`2">
            <summary>
            移除实体
            </summary>
            <typeparam name="TEntity">对象类型</typeparam>
            <typeparam name="TKey">对象标识类型</typeparam>
        </member>
        <member name="M:Bing.Datas.Stores.Operations.IRemoveAsync`2.RemoveAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            移除实体
            </summary>
            <param name="id">标识</param>
            <param name="cancellationToken">取消令牌</param>
        </member>
        <member name="M:Bing.Datas.Stores.Operations.IRemoveAsync`2.RemoveAsync(`0,System.Threading.CancellationToken)">
            <summary>
            移除实体
            </summary>
            <param name="entity">实体</param>
            <param name="cancellationToken">取消令牌</param>
        </member>
        <member name="M:Bing.Datas.Stores.Operations.IRemoveAsync`2.RemoveAsync(System.Collections.Generic.IEnumerable{`1},System.Threading.CancellationToken)">
            <summary>
            移除实体集合
            </summary>
            <param name="ids">标识集合</param>
            <param name="cancellationToken">取消令牌</param>
        </member>
        <member name="M:Bing.Datas.Stores.Operations.IRemoveAsync`2.RemoveAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <summary>
            移除实体集合
            </summary>
            <param name="entities">实体集合</param>
            <param name="cancellationToken">取消令牌</param>
        </member>
        <member name="T:Bing.Datas.Stores.Operations.ISingle`2">
            <summary>
            查找单个实体
            </summary>
            <typeparam name="TEntity">对象类型</typeparam>
            <typeparam name="TKey">对象标识类型</typeparam>
        </member>
        <member name="M:Bing.Datas.Stores.Operations.ISingle`2.Single(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            查找单个实体
            </summary>
            <param name="predicate">查询条件</param>
        </member>
        <member name="T:Bing.Datas.Stores.Operations.ISingleAsync`2">
            <summary>
            查找单个实体
            </summary>
            <typeparam name="TEntity">对象类型</typeparam>
            <typeparam name="TKey">对象标识类型</typeparam>
        </member>
        <member name="M:Bing.Datas.Stores.Operations.ISingleAsync`2.SingleAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            查找单个实体
            </summary>
            <param name="predicate">查询条件</param>
            <param name="cancellationToken">取消令牌</param>
        </member>
        <member name="T:Bing.Datas.Stores.Operations.IUpdate`2">
            <summary>
            修改实体
            </summary>
            <typeparam name="TEntity">对象类型</typeparam>
            <typeparam name="TKey">对象标识类型</typeparam>
        </member>
        <member name="M:Bing.Datas.Stores.Operations.IUpdate`2.Update(`0)">
            <summary>
            修改实体
            </summary>
            <param name="entity">实体</param>
        </member>
        <member name="M:Bing.Datas.Stores.Operations.IUpdate`2.Update(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            修改实体集合
            </summary>
            <param name="entities">实体集合</param>
        </member>
        <member name="T:Bing.Datas.Stores.Operations.IUpdateAsync`2">
            <summary>
            修改实体
            </summary>
            <typeparam name="TEntity">对象类型</typeparam>
            <typeparam name="TKey">对象标识类型</typeparam>
        </member>
        <member name="M:Bing.Datas.Stores.Operations.IUpdateAsync`2.UpdateAsync(`0)">
            <summary>
            修改实体
            </summary>
            <param name="entity">实体</param>
        </member>
        <member name="M:Bing.Datas.Stores.Operations.IUpdateAsync`2.UpdateAsync(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            修改实体集合
            </summary>
            <param name="entities">实体集合</param>
        </member>
        <member name="T:Bing.Datas.Transactions.ITransactionActionManager">
            <summary>
            事务操作管理器
            </summary>
        </member>
        <member name="P:Bing.Datas.Transactions.ITransactionActionManager.Count">
            <summary>
            事务操作数量
            </summary>
        </member>
        <member name="M:Bing.Datas.Transactions.ITransactionActionManager.Register(System.Func{System.Data.IDbTransaction,System.Threading.Tasks.Task})">
            <summary>
            注册事务操作
            </summary>
            <param name="action">事务操作</param>
        </member>
        <member name="M:Bing.Datas.Transactions.ITransactionActionManager.CommitAsync(System.Data.IDbTransaction)">
            <summary>
            提交
            </summary>
            <param name="transaction">事务</param>
        </member>
        <member name="T:Bing.Datas.Transactions.TransactionActionManager">
            <summary>
            事务操作管理器
            </summary>
        </member>
        <member name="F:Bing.Datas.Transactions.TransactionActionManager._actions">
            <summary>
            操作列表
            </summary>
        </member>
        <member name="P:Bing.Datas.Transactions.TransactionActionManager.Count">
            <summary>
            事务操作数量
            </summary>
        </member>
        <member name="M:Bing.Datas.Transactions.TransactionActionManager.#ctor">
            <summary>
            初始化一个<see cref="T:Bing.Datas.Transactions.TransactionActionManager"/>类型的实例
            </summary>
        </member>
        <member name="M:Bing.Datas.Transactions.TransactionActionManager.Register(System.Func{System.Data.IDbTransaction,System.Threading.Tasks.Task})">
            <summary>
            注册事务操作
            </summary>
            <param name="action">事务操作</param>
        </member>
        <member name="M:Bing.Datas.Transactions.TransactionActionManager.CommitAsync(System.Data.IDbTransaction)">
            <summary>
            提交
            </summary>
            <param name="transaction">事务</param>
        </member>
        <member name="T:Bing.Datas.UnitOfWorks.IUnitOfWork">
            <summary>
            工作单元
            </summary>
        </member>
        <member name="M:Bing.Datas.UnitOfWorks.IUnitOfWork.Commit">
            <summary>
            提交，返回影响的行数
            </summary>
        </member>
        <member name="M:Bing.Datas.UnitOfWorks.IUnitOfWork.CommitAsync">
            <summary>
            提交，返回影响的行数
            </summary>
        </member>
        <member name="T:Bing.Datas.UnitOfWorks.IUnitOfWorkManager">
            <summary>
            工作单元管理器
            </summary>
        </member>
        <member name="M:Bing.Datas.UnitOfWorks.IUnitOfWorkManager.Commit">
            <summary>
            提交
            </summary>
        </member>
        <member name="M:Bing.Datas.UnitOfWorks.IUnitOfWorkManager.CommitAsync">
            <summary>
            提交
            </summary>
        </member>
        <member name="M:Bing.Datas.UnitOfWorks.IUnitOfWorkManager.Register(Bing.Datas.UnitOfWorks.IUnitOfWork)">
            <summary>
            注册工作单元
            </summary>
            <param name="unitOfWork">工作单元</param>
        </member>
        <member name="T:Bing.Datas.UnitOfWorks.UnitOfWorkManager">
            <summary>
            工作单元管理器
            </summary>
        </member>
        <member name="F:Bing.Datas.UnitOfWorks.UnitOfWorkManager._unitOfWorks">
            <summary>
            工作单元集合
            </summary>
        </member>
        <member name="M:Bing.Datas.UnitOfWorks.UnitOfWorkManager.#ctor">
            <summary>
            初始化一个<see cref="T:Bing.Datas.UnitOfWorks.UnitOfWorkManager"/>类型的实例
            </summary>
        </member>
        <member name="M:Bing.Datas.UnitOfWorks.UnitOfWorkManager.Commit">
            <summary>
            提交
            </summary>
        </member>
        <member name="M:Bing.Datas.UnitOfWorks.UnitOfWorkManager.CommitAsync">
            <summary>
            提交
            </summary>
        </member>
        <member name="M:Bing.Datas.UnitOfWorks.UnitOfWorkManager.Register(Bing.Datas.UnitOfWorks.IUnitOfWork)">
            <summary>
            注册工作单元
            </summary>
            <param name="unitOfWork">工作单元</param>
        </member>
        <member name="T:Bing.Datas.Attributes.DecimalPrecisionAttribute">
            <summary>
            自定义 Decimal 类型的精度
            </summary>
        </member>
        <member name="P:Bing.Datas.Attributes.DecimalPrecisionAttribute.Precision">
            <summary>
            精确度，默认：18
            </summary>
        </member>
        <member name="P:Bing.Datas.Attributes.DecimalPrecisionAttribute.Scale">
            <summary>
            保留小数位数，默认：4
            </summary>
        </member>
        <member name="M:Bing.Datas.Attributes.DecimalPrecisionAttribute.#ctor">
            <summary>
            初始化一个<see cref="T:Bing.Datas.Attributes.DecimalPrecisionAttribute"/>类型的实例
            </summary>
        </member>
        <member name="M:Bing.Datas.Attributes.DecimalPrecisionAttribute.#ctor(System.Byte,System.Byte)">
            <summary>
            初始化一个<see cref="T:Bing.Datas.Attributes.DecimalPrecisionAttribute"/>类型的实例
            </summary>
            <param name="precision">精确度</param>
            <param name="scale">保留小数位数</param>
        </member>
        <member name="T:Bing.Datas.Attributes.HasMaxLengthAttribute">
            <summary>
            最大长度
            </summary>
        </member>
        <member name="P:Bing.Datas.Attributes.HasMaxLengthAttribute.HasMaxLength">
            <summary>
            是否最大长度
            </summary>
        </member>
        <member name="T:Bing.Datas.Configs.DataConfig">
            <summary>
            数据配置
            </summary>
        </member>
        <member name="P:Bing.Datas.Configs.DataConfig.LogLevel">
            <summary>
            数据日志级别
            </summary>
        </member>
        <member name="P:Bing.Datas.Configs.DataConfig.SqlOptions">
            <summary>
            Sql查询配置
            </summary>
        </member>
        <member name="P:Bing.Datas.Configs.DataConfig.AutoCommit">
            <summary>
            自动提交，默认禁用
            </summary>
        </member>
        <member name="P:Bing.Datas.Configs.DataConfig.EnabledValidateVersion">
            <summary>
            是否启用验证版本号，默认启用
            </summary>
        </member>
        <member name="P:Bing.Datas.Configs.DataConfig.AdoLogInterceptor">
            <summary>
            ADO日志拦截器，
            </summary>
        </member>
        <member name="P:Bing.Datas.Configs.DataConfig.EnabledDeleteFilter">
            <summary>
            是否启用逻辑删除过滤
            </summary>
        </member>
        <member name="M:Bing.Datas.Configs.DataConfig.#ctor">
            <summary>
            初始化一个<see cref="T:Bing.Datas.Configs.DataConfig"/>类型的实例
            </summary>
        </member>
        <member name="T:Bing.Datas.Configs.DataLogLevel">
            <summary>
            数据日志级别
            </summary>
        </member>
        <member name="F:Bing.Datas.Configs.DataLogLevel.All">
            <summary>
            输出全部日志，包括连接数据库，提交事务等大量信息
            </summary>
        </member>
        <member name="F:Bing.Datas.Configs.DataLogLevel.Sql">
            <summary>
            仅输出Sql
            </summary>
        </member>
        <member name="F:Bing.Datas.Configs.DataLogLevel.Off">
            <summary>
            关闭日志
            </summary>
        </member>
        <member name="T:Bing.Datas.Queries.Boundary">
            <summary>
            查询边界
            </summary>
        </member>
        <member name="F:Bing.Datas.Queries.Boundary.Left">
            <summary>
            包含左边
            </summary>
        </member>
        <member name="F:Bing.Datas.Queries.Boundary.Right">
            <summary>
            包含右边
            </summary>
        </member>
        <member name="F:Bing.Datas.Queries.Boundary.Both">
            <summary>
            包含两边
            </summary>
        </member>
        <member name="F:Bing.Datas.Queries.Boundary.Neither">
            <summary>
            不包含
            </summary>
        </member>
        <member name="T:Bing.Datas.Queries.Criterias.AndCriteria`1">
            <summary>
            与查询条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
        </member>
        <member name="M:Bing.Datas.Queries.Criterias.AndCriteria`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            初始化一个<see cref="T:Bing.Datas.Queries.Criterias.AndCriteria`1"/>类型的实例
            </summary>
            <param name="left">查询条件1</param>
            <param name="right">查询条件2</param>
        </member>
        <member name="P:Bing.Datas.Queries.Criterias.AndCriteria`1.Predicate">
            <summary>
            查询条件
            </summary>
        </member>
        <member name="M:Bing.Datas.Queries.Criterias.AndCriteria`1.GetPredicate">
            <summary>
            获取查询条件
            </summary>
            <returns></returns>
        </member>
        <member name="T:Bing.Datas.Queries.Criterias.DateSegmentCriteria`2">
            <summary>
            日期范围过滤条件 - 不包含时间
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TProperty">属性类型</typeparam>
        </member>
        <member name="M:Bing.Datas.Queries.Criterias.DateSegmentCriteria`2.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`1}},System.Nullable{System.DateTime},System.Nullable{System.DateTime},Bing.Datas.Queries.Boundary)">
            <summary>
            初始化一个<see cref="T:Bing.Datas.Queries.Criterias.DateSegmentCriteria`2"/>类型的实例
            </summary>
            <param name="propertyExpression">属性表达式</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <param name="boundary">包含边界</param>
        </member>
        <member name="M:Bing.Datas.Queries.Criterias.DateSegmentCriteria`2.IsMinGreaterMax(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            最小值是否大于最大值
            </summary>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.Queries.Criterias.DateSegmentCriteria`2.GetMinValueExpression">
            <summary>
            获取最小值表达式
            </summary>
        </member>
        <member name="M:Bing.Datas.Queries.Criterias.DateSegmentCriteria`2.GetMaxValueExpression">
            <summary>
            获取最大值表达式
            </summary>
        </member>
        <member name="T:Bing.Datas.Queries.Criterias.DateTimeSegmentCriteria`2">
            <summary>
            日期范围过滤条件 - 包含时间
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TProperty">属性类型</typeparam>
        </member>
        <member name="M:Bing.Datas.Queries.Criterias.DateTimeSegmentCriteria`2.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`1}},System.Nullable{System.DateTime},System.Nullable{System.DateTime},Bing.Datas.Queries.Boundary)">
            <summary>
            初始化一个<see cref="T:Bing.Datas.Queries.Criterias.DateTimeSegmentCriteria`2"/>类型的实例
            </summary>
            <param name="propertyExpression">属性表达式</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <param name="boundary">包含边界</param>
        </member>
        <member name="M:Bing.Datas.Queries.Criterias.DateTimeSegmentCriteria`2.IsMinGreaterMax(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            最小值是否大于最大值
            </summary>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.Queries.Criterias.DateTimeSegmentCriteria`2.GetMinValueExpression">
            <summary>
            获取最小值表达式
            </summary>
        </member>
        <member name="M:Bing.Datas.Queries.Criterias.DateTimeSegmentCriteria`2.GetMaxValueExpression">
            <summary>
            获取最大值表达式
            </summary>
        </member>
        <member name="T:Bing.Datas.Queries.Criterias.DecimalSegmentCriteria`2">
            <summary>
            decimal范围过滤条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TProperty">属性类型</typeparam>
        </member>
        <member name="M:Bing.Datas.Queries.Criterias.DecimalSegmentCriteria`2.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`1}},System.Nullable{System.Decimal},System.Nullable{System.Decimal},Bing.Datas.Queries.Boundary)">
            <summary>
            初始化一个<see cref="T:Bing.Datas.Queries.Criterias.DecimalSegmentCriteria`2"/>类型的实例
            </summary>
            <param name="propertyExpression">属性表达式</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <param name="boundary">包含边界</param>
        </member>
        <member name="M:Bing.Datas.Queries.Criterias.DecimalSegmentCriteria`2.IsMinGreaterMax(System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
            <summary>
            最小值是否大于最大值
            </summary>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <returns></returns>
        </member>
        <member name="T:Bing.Datas.Queries.Criterias.DefaultCriteria`1">
            <summary>
            默认查询条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
        </member>
        <member name="M:Bing.Datas.Queries.Criterias.DefaultCriteria`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            初始化一个<see cref="T:Bing.Datas.Queries.Criterias.DefaultCriteria`1"/>类型的实例
            </summary>
            <param name="predicate">查询条件</param>
        </member>
        <member name="P:Bing.Datas.Queries.Criterias.DefaultCriteria`1.Predicate">
            <summary>
            查询条件
            </summary>
        </member>
        <member name="M:Bing.Datas.Queries.Criterias.DefaultCriteria`1.GetPredicate">
            <summary>
            获取查询条件
            </summary>
            <returns></returns>
        </member>
        <member name="T:Bing.Datas.Queries.Criterias.DoubleSegmentCriteria`2">
            <summary>
            double范围过滤条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TProperty">属性类型</typeparam>
        </member>
        <member name="M:Bing.Datas.Queries.Criterias.DoubleSegmentCriteria`2.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`1}},System.Nullable{System.Double},System.Nullable{System.Double},Bing.Datas.Queries.Boundary)">
            <summary>
            初始化一个<see cref="T:Bing.Datas.Queries.Criterias.DoubleSegmentCriteria`2"/>类型的实例
            </summary>
            <param name="propertyExpression">属性表达式</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <param name="boundary">包含边界</param>
        </member>
        <member name="M:Bing.Datas.Queries.Criterias.DoubleSegmentCriteria`2.IsMinGreaterMax(System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            最小值是否大于最大值
            </summary>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <returns></returns>
        </member>
        <member name="T:Bing.Datas.Queries.Criterias.IntSegmentCriteria`2">
            <summary>
            整数范围过滤条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TProperty">属性类型</typeparam>
        </member>
        <member name="M:Bing.Datas.Queries.Criterias.IntSegmentCriteria`2.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`1}},System.Nullable{System.Int32},System.Nullable{System.Int32},Bing.Datas.Queries.Boundary)">
            <summary>
            初始化一个<see cref="T:Bing.Datas.Queries.Criterias.IntSegmentCriteria`2"/>类型的实例
            </summary>
            <param name="propertyExpression">属性表达式</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <param name="boundary">包含边界</param>
        </member>
        <member name="M:Bing.Datas.Queries.Criterias.IntSegmentCriteria`2.IsMinGreaterMax(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            最小值是否大于最大值
            </summary>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <returns></returns>
        </member>
        <member name="T:Bing.Datas.Queries.Criterias.OrCriteria`1">
            <summary>
            或查询条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
        </member>
        <member name="M:Bing.Datas.Queries.Criterias.OrCriteria`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            初始化一个<see cref="T:Bing.Datas.Queries.Criterias.OrCriteria`1"/>类型的实例
            </summary>
            <param name="left">查询条件1</param>
            <param name="right">查询条件2</param>
        </member>
        <member name="P:Bing.Datas.Queries.Criterias.OrCriteria`1.Predicate">
            <summary>
            查询条件
            </summary>
        </member>
        <member name="M:Bing.Datas.Queries.Criterias.OrCriteria`1.GetPredicate">
            <summary>
            获取查询条件
            </summary>
            <returns></returns>
        </member>
        <member name="T:Bing.Datas.Queries.Criterias.SegmentCriteriaBase`3">
            <summary>
            范围过滤条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TProperty">属性类型</typeparam>
            <typeparam name="TValue">值类型</typeparam>
        </member>
        <member name="F:Bing.Datas.Queries.Criterias.SegmentCriteriaBase`3._propertyExpression">
            <summary>
            属性表达式
            </summary>
        </member>
        <member name="F:Bing.Datas.Queries.Criterias.SegmentCriteriaBase`3._builder">
            <summary>
            表达式生成器
            </summary>
        </member>
        <member name="F:Bing.Datas.Queries.Criterias.SegmentCriteriaBase`3._min">
            <summary>
            最小值
            </summary>
        </member>
        <member name="F:Bing.Datas.Queries.Criterias.SegmentCriteriaBase`3._max">
            <summary>
            最大值
            </summary>
        </member>
        <member name="F:Bing.Datas.Queries.Criterias.SegmentCriteriaBase`3._boundary">
            <summary>
            包含边界
            </summary>
        </member>
        <member name="M:Bing.Datas.Queries.Criterias.SegmentCriteriaBase`3.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`1}},System.Nullable{`2},System.Nullable{`2},Bing.Datas.Queries.Boundary)">
            <summary>
            初始化一个<see cref="T:Bing.Datas.Queries.Criterias.SegmentCriteriaBase`3"/>类型的实例
            </summary>
            <param name="propertyExpression">属性表达式</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <param name="boundary">包含边界</param>
        </member>
        <member name="M:Bing.Datas.Queries.Criterias.SegmentCriteriaBase`3.GetPropertyType">
            <summary>
            获取属性类型
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.Queries.Criterias.SegmentCriteriaBase`3.GetPredicate">
            <summary>
            获取查询条件
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.Queries.Criterias.SegmentCriteriaBase`3.Adjust(System.Nullable{`2},System.Nullable{`2})">
            <summary>
            当最小值大于最大值时进行校正
            </summary>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
        </member>
        <member name="M:Bing.Datas.Queries.Criterias.SegmentCriteriaBase`3.IsMinGreaterMax(System.Nullable{`2},System.Nullable{`2})">
            <summary>
            最小值是否大于最大值
            </summary>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.Queries.Criterias.SegmentCriteriaBase`3.CreateLeftExpression">
            <summary>
            创建左操作数，即 t=> t.Property >= Min
            </summary>
        </member>
        <member name="M:Bing.Datas.Queries.Criterias.SegmentCriteriaBase`3.CreateLeftOperator(System.Nullable{Bing.Datas.Queries.Boundary})">
            <summary>
            创建左操作符
            </summary>
            <param name="boundary">查询边界</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.Queries.Criterias.SegmentCriteriaBase`3.GetMinValue">
            <summary>
            获取最小值
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.Queries.Criterias.SegmentCriteriaBase`3.GetMinValueExpression">
            <summary>
            获取最小值表达式
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.Queries.Criterias.SegmentCriteriaBase`3.CreateRightExpression">
            <summary>
            创建右操作数，即 t => t.Property &lt;= Max
            </summary>
        </member>
        <member name="M:Bing.Datas.Queries.Criterias.SegmentCriteriaBase`3.CreateRightOperator(System.Nullable{Bing.Datas.Queries.Boundary})">
            <summary>
            创建右操作符
            </summary>
            <param name="boundary">查询边界</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.Queries.Criterias.SegmentCriteriaBase`3.GetMaxValue">
            <summary>
            获取最大值
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.Queries.Criterias.SegmentCriteriaBase`3.GetMaxValueExpression">
            <summary>
            获取最大值表达式
            </summary>
            <returns></returns>
        </member>
        <member name="T:Bing.Datas.Queries.Criterias.ValueExpressionHelper">
            <summary>
            值表达式操作
            </summary>
        </member>
        <member name="M:Bing.Datas.Queries.Criterias.ValueExpressionHelper.CreateDateTimeExpression(System.Object,System.Boolean)">
            <summary>
            创建日期常量表达式
            </summary>
            <param name="value">日期值</param>
            <param name="isNull">日期是否可空</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.Queries.Criterias.ValueExpressionHelper.CreateDateTimeExpression(System.Object,System.Type)">
            <summary>
            创建日期常量表达式
            </summary>
            <param name="value">日期值</param>
            <param name="targetType">目标类型</param>
            <returns></returns>
        </member>
        <member name="T:Bing.Datas.Queries.Internal.Helper">
            <summary>
            查询工具类
            </summary>
        </member>
        <member name="M:Bing.Datas.Queries.Internal.Helper.GetWhereIfNotEmptyExpression``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            获取查询条件表达式
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="predicate">查询条件,如果参数值为空，则忽略该查询条件，范例：t => t.Name == ""，该查询条件被忽略。
            注意：一次仅能添加一个条件，范例：t => t.Name == "a" &amp;&amp; t.Mobile == "123"，不支持，将抛出异常</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.Queries.Internal.Helper.InitOrder``1(System.Linq.IQueryable{``0},Bing.Domains.Repositories.IPager)">
            <summary>
            初始化排序
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="source">查询对象</param>
            <param name="pager">分页</param>
        </member>
        <member name="M:Bing.Datas.Queries.Internal.Helper.GetOrderedQueryable``1(System.Linq.IQueryable{``0},Bing.Domains.Repositories.IPager)">
            <summary>
            获取排序查询对象
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="source">查询对象</param>
            <param name="pager">分页</param>
            <returns></returns>
        </member>
        <member name="T:Bing.Datas.Queries.IQuery`1">
            <summary>
            查询对象
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
        </member>
        <member name="T:Bing.Datas.Queries.IQuery`2">
            <summary>
            查询对象
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TKey">实体标识类型</typeparam>
        </member>
        <member name="M:Bing.Datas.Queries.IQuery`2.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            添加查询条件
            </summary>
            <param name="predicate">查询条件</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.Queries.IQuery`2.Where(Bing.Domains.Repositories.ICriteria{`0})">
            <summary>
            添加查询条件
            </summary>
            <param name="criteria">查询条件</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.Queries.IQuery`2.WhereIf(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean)">
            <summary>
            添加查询条件
            </summary>
            <param name="predicate">查询条件</param>
            <param name="condition">该值为true时添加查询条件，否则忽略</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.Queries.IQuery`2.WhereIfNotEmpty(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            添加查询条件
            </summary>
            <param name="predicate">查询条件，如果参数值为空，则忽略该查询条件，范例：t => t.Name == "" ，该查询条件被忽略。
            注意：一次仅能添加一个条件，范例：t => t.Name =="a" &amp;&amp; t.Mobile == "123"，不支持，将抛出异常</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.Queries.IQuery`2.Between``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Nullable{System.Int32},System.Nullable{System.Int32},Bing.Datas.Queries.Boundary)">
            <summary>
            添加范围查询条件
            </summary>
            <typeparam name="TProperty">属性类型</typeparam>
            <param name="propertyExpression">属性表达式，范例：t => t.Age</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <param name="boundary">包含边界，默认：包含两边</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.Queries.IQuery`2.Between``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Nullable{System.Double},System.Nullable{System.Double},Bing.Datas.Queries.Boundary)">
            <summary>
            添加范围查询条件
            </summary>
            <typeparam name="TProperty">属性类型</typeparam>
            <param name="propertyExpression">属性表达式，范例：t => t.Age</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <param name="boundary">包含边界，默认：包含两边</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.Queries.IQuery`2.Between``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Nullable{System.Decimal},System.Nullable{System.Decimal},Bing.Datas.Queries.Boundary)">
            <summary>
            添加范围查询条件
            </summary>
            <typeparam name="TProperty">属性类型</typeparam>
            <param name="propertyExpression">属性表达式，范例：t => t.Age</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <param name="boundary">包含边界，默认：包含两边</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.Queries.IQuery`2.Between``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Boolean,System.Nullable{Bing.Datas.Queries.Boundary})">
            <summary>
            添加范围查询条件
            </summary>
            <typeparam name="TProperty">属性类型</typeparam>
            <param name="propertyExpression">属性表达式，范例：t => t.Time</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <param name="includeTime">是否包含时间，默认：包含</param>
            <param name="boundary">包含边界</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.Queries.IQuery`2.OrderBy``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean)">
            <summary>
            添加排序
            </summary>
            <typeparam name="TProperty">属性类型</typeparam>
            <param name="propertyExpression">属性表达式</param>
            <param name="desc">是否降序</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.Queries.IQuery`2.OrderBy(System.String,System.Boolean)">
            <summary>
            添加排序
            </summary>
            <param name="propertyName">排序属性</param>
            <param name="desc">是否降序</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.Queries.IQuery`2.And(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            与连接
            </summary>
            <param name="predicate">查询条件</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.Queries.IQuery`2.And(Bing.Datas.Queries.IQuery{`0,`1})">
            <summary>
            与连接
            </summary>
            <param name="query">查询对象</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.Queries.IQuery`2.Or(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}}[])">
            <summary>
            或连接
            </summary>
            <param name="predicates">查询条件</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.Queries.IQuery`2.Or(Bing.Datas.Queries.IQuery{`0,`1})">
            <summary>
            或连接
            </summary>
            <param name="query">查询对象</param>
            <returns></returns>
        </member>
        <member name="T:Bing.Datas.Queries.IQueryParameter">
            <summary>
            查询参数
            </summary>
        </member>
        <member name="P:Bing.Datas.Queries.IQueryParameter.Keyword">
            <summary>
            搜索关键字
            </summary>
        </member>
        <member name="T:Bing.Datas.Queries.OrderByBuilder">
            <summary>
            排序生成器
            </summary>
        </member>
        <member name="F:Bing.Datas.Queries.OrderByBuilder._items">
            <summary>
            排序项列表
            </summary>
        </member>
        <member name="M:Bing.Datas.Queries.OrderByBuilder.#ctor">
            <summary>
            初始化一个<see cref="T:Bing.Datas.Queries.OrderByBuilder"/>类型的实例
            </summary>
        </member>
        <member name="M:Bing.Datas.Queries.OrderByBuilder.Add(System.String,System.Boolean)">
            <summary>
            添加排序
            </summary>
            <param name="name">排序属相</param>
            <param name="desc">是否降序</param>
        </member>
        <member name="M:Bing.Datas.Queries.OrderByBuilder.Generate">
            <summary>
            生成排序字符串
            </summary>
            <returns></returns>
        </member>
        <member name="T:Bing.Datas.Queries.OrderByItem">
            <summary>
            排序项
            </summary>
        </member>
        <member name="P:Bing.Datas.Queries.OrderByItem.Name">
            <summary>
            排序属性
            </summary>
        </member>
        <member name="P:Bing.Datas.Queries.OrderByItem.Desc">
            <summary>
            是否降序
            </summary>
        </member>
        <member name="M:Bing.Datas.Queries.OrderByItem.#ctor(System.String,System.Boolean)">
            <summary>
            初始化一个<see cref="T:Bing.Datas.Queries.OrderByItem"/>类型的实例
            </summary>
            <param name="name">排序属性</param>
            <param name="desc">是否降序</param>
        </member>
        <member name="M:Bing.Datas.Queries.OrderByItem.Generate">
            <summary>
            创建排序字符串
            </summary>
            <returns></returns>
        </member>
        <member name="T:Bing.Datas.Queries.Query`1">
            <summary>
            查询对象
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
        </member>
        <member name="M:Bing.Datas.Queries.Query`1.#ctor">
            <summary>
            初始化一个<see cref="T:Bing.Datas.Queries.Query`1"/>类型的实例
            </summary>
        </member>
        <member name="M:Bing.Datas.Queries.Query`1.#ctor(Bing.Datas.Queries.IQueryParameter)">
            <summary>
            初始化一个<see cref="T:Bing.Datas.Queries.Query`1"/>类型的实例
            </summary>
            <param name="queryParameter">查询参数</param>
        </member>
        <member name="T:Bing.Datas.Queries.Query`2">
            <summary>
            查询对象
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TKey">实体标识类型</typeparam>
        </member>
        <member name="F:Bing.Datas.Queries.Query`2._parameter">
            <summary>
            查询参数
            </summary>
        </member>
        <member name="F:Bing.Datas.Queries.Query`2._predicate">
            <summary>
            查询条件
            </summary>
        </member>
        <member name="F:Bing.Datas.Queries.Query`2._orderByBuilder">
            <summary>
            排序生成器
            </summary>
        </member>
        <member name="M:Bing.Datas.Queries.Query`2.#ctor">
            <summary>
            初始化一个<see cref="T:Bing.Datas.Queries.Query`2"/>类型的实例
            </summary>
        </member>
        <member name="M:Bing.Datas.Queries.Query`2.#ctor(Bing.Datas.Queries.IQueryParameter)">
            <summary>
            初始化一个<see cref="T:Bing.Datas.Queries.Query`2"/>类型的实例
            </summary>
            <param name="parameter">查询参数</param>
        </member>
        <member name="M:Bing.Datas.Queries.Query`2.GetPredicate">
            <summary>
            获取查询条件
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.Queries.Query`2.GetOrder">
            <summary>
            获取排序条件
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.Queries.Query`2.GetPager">
            <summary>
            获取分页
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.Queries.Query`2.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            添加查询条件
            </summary>
            <param name="predicate">查询条件</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.Queries.Query`2.Where(Bing.Domains.Repositories.ICriteria{`0})">
            <summary>
            添加查询条件
            </summary>
            <param name="criteria">查询条件</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.Queries.Query`2.WhereIf(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean)">
            <summary>
            添加查询条件
            </summary>
            <param name="predicate">查询条件</param>
            <param name="condition">该值为true时添加查询条件，否则忽略</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.Queries.Query`2.WhereIfNotEmpty(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            添加查询条件
            </summary>
            <param name="predicate">查询条件，如果参数值为空，则忽略该查询条件，范例：t => t.Name == "" ，该查询条件被忽略。
            注意：一次仅能添加一个条件，范例：t => t.Name =="a" &amp;&amp; t.Mobile == "123"，不支持，将抛出异常</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.Queries.Query`2.Between``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Nullable{System.Int32},System.Nullable{System.Int32},Bing.Datas.Queries.Boundary)">
            <summary>
            添加范围查询条件
            </summary>
            <typeparam name="TProperty">属性类型</typeparam>
            <param name="propertyExpression">属性表达式，范例：t => t.Age</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <param name="boundary">包含边界，默认：包含两边</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.Queries.Query`2.Between``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Nullable{System.Double},System.Nullable{System.Double},Bing.Datas.Queries.Boundary)">
            <summary>
            添加范围查询条件
            </summary>
            <typeparam name="TProperty">属性类型</typeparam>
            <param name="propertyExpression">属性表达式，范例：t => t.Age</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <param name="boundary">包含边界，默认：包含两边</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.Queries.Query`2.Between``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Nullable{System.Decimal},System.Nullable{System.Decimal},Bing.Datas.Queries.Boundary)">
            <summary>
            添加范围查询条件
            </summary>
            <typeparam name="TProperty">属性类型</typeparam>
            <param name="propertyExpression">属性表达式，范例：t => t.Age</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <param name="boundary">包含边界，默认：包含两边</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.Queries.Query`2.Between``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Boolean,System.Nullable{Bing.Datas.Queries.Boundary})">
            <summary>
            添加范围查询条件
            </summary>
            <typeparam name="TProperty">属性类型</typeparam>
            <param name="propertyExpression">属性表达式，范例：t => t.Time</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <param name="includeTime">是否包含时间，默认：包含</param>
            <param name="boundary">包含边界</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.Queries.Query`2.OrderBy``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean)">
            <summary>
            添加排序
            </summary>
            <typeparam name="TProperty">属性类型</typeparam>
            <param name="propertyExpression">属性表达式</param>
            <param name="desc">是否降序</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.Queries.Query`2.OrderBy(System.String,System.Boolean)">
            <summary>
            添加排序
            </summary>
            <param name="propertyName">排序属性</param>
            <param name="desc">是否降序</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.Queries.Query`2.And(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            与连接
            </summary>
            <param name="predicate">查询条件</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.Queries.Query`2.And(Bing.Datas.Queries.IQuery{`0,`1})">
            <summary>
            与连接
            </summary>
            <param name="query">查询对象</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.Queries.Query`2.Or(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}}[])">
            <summary>
            或连接
            </summary>
            <param name="predicates">查询条件</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.Queries.Query`2.Or(Bing.Datas.Queries.IQuery{`0,`1})">
            <summary>
            或连接
            </summary>
            <param name="query">查询对象</param>
            <returns></returns>
        </member>
        <member name="T:Bing.Datas.Queries.QueryableExtensions">
            <summary>
            <see cref="T:System.Linq.IQueryable`1"/> 扩展
            </summary>
        </member>
        <member name="M:Bing.Datas.Queries.QueryableExtensions.Where``1(System.Linq.IQueryable{``0},Bing.Domains.Repositories.ICriteria{``0})">
            <summary>
            添加查询条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="source">数据源</param>
            <param name="criteria">查询条件对象</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.Queries.QueryableExtensions.WhereIf``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Boolean)">
            <summary>
            添加查询条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="source">数据源</param>
            <param name="predicate">查询条件</param>
            <param name="condition">该值为true时添加查询条件，否则忽略</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.Queries.QueryableExtensions.WhereIfNotEmpty``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            添加查询条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="source">数据源</param>
            <param name="predicate">查询条件，如果参数值为空，则忽略该查询条件，范例：t => t.Name == "" ，该查询条件被忽略。
            注意：一次仅能添加一个条件，范例：t => t.Name =="a" &amp;&amp; t.Mobile == "123"，不支持，将抛出异常</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.Queries.QueryableExtensions.Between``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Nullable{System.Int32},System.Nullable{System.Int32},Bing.Datas.Queries.Boundary)">
            <summary>
            添加范围查询条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="source">数据源</param>
            <typeparam name="TProperty">属性类型</typeparam>
            <param name="propertyExpression">属性表达式，范例：t => t.Age</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <param name="boundary">包含边界</param>
        </member>
        <member name="M:Bing.Datas.Queries.QueryableExtensions.Between``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Nullable{System.Double},System.Nullable{System.Double},Bing.Datas.Queries.Boundary)">
            <summary>
            添加范围查询条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="source">数据源</param>
            <typeparam name="TProperty">属性类型</typeparam>
            <param name="propertyExpression">属性表达式，范例：t => t.Age</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <param name="boundary">包含边界</param>
        </member>
        <member name="M:Bing.Datas.Queries.QueryableExtensions.Between``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Nullable{System.Decimal},System.Nullable{System.Decimal},Bing.Datas.Queries.Boundary)">
            <summary>
            添加范围查询条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="source">数据源</param>
            <typeparam name="TProperty">属性类型</typeparam>
            <param name="propertyExpression">属性表达式，范例：t => t.Age</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <param name="boundary">包含边界</param>
        </member>
        <member name="M:Bing.Datas.Queries.QueryableExtensions.Between``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Boolean,System.Nullable{Bing.Datas.Queries.Boundary})">
            <summary>
            添加范围查询条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="source">数据源</param>
            <typeparam name="TProperty">属性类型</typeparam>
            <param name="propertyExpression">属性表达式，范例：t => t.Time</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <param name="includeTime">是否包含时间</param>
            <param name="boundary">包含边界</param>
        </member>
        <member name="M:Bing.Datas.Queries.QueryableExtensions.Pager``1(System.Linq.IQueryable{``0},Bing.Domains.Repositories.IPager)">
            <summary>
            分页
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="source">数据源</param>
            <param name="pager">分页对象</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.Queries.QueryableExtensions.ToPagerList``1(System.Linq.IQueryable{``0},Bing.Domains.Repositories.IPager)">
            <summary>
            转换为分页列表
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="source">数据源</param>
            <param name="pager">分页对象</param>
            <returns></returns>
        </member>
        <member name="T:Bing.Datas.Queries.QueryParameter">
            <summary>
            查询参数
            </summary>
        </member>
        <member name="P:Bing.Datas.Queries.QueryParameter.Keyword">
            <summary>
            搜索关键字
            </summary>
        </member>
        <member name="T:Bing.Datas.Queries.Trees.ITreeQueryParameter`1">
            <summary>
            树型查询参数
            </summary>
            <typeparam name="TParentId">父编号类型</typeparam>
        </member>
        <member name="P:Bing.Datas.Queries.Trees.ITreeQueryParameter`1.ParentId">
            <summary>
            父编号
            </summary>
        </member>
        <member name="P:Bing.Datas.Queries.Trees.ITreeQueryParameter`1.Level">
            <summary>
            级数
            </summary>
        </member>
        <member name="P:Bing.Datas.Queries.Trees.ITreeQueryParameter`1.Path">
            <summary>
            路径
            </summary>
        </member>
        <member name="P:Bing.Datas.Queries.Trees.ITreeQueryParameter`1.Enabled">
            <summary>
            启用
            </summary>
        </member>
        <member name="M:Bing.Datas.Queries.Trees.ITreeQueryParameter`1.IsSearch">
            <summary>
            是否搜索
            </summary>
            <returns></returns>
        </member>
        <member name="T:Bing.Datas.Queries.Trees.ITreeQueryParameter">
            <summary>
            树型查询参数
            </summary>
        </member>
        <member name="T:Bing.Datas.Queries.Trees.TreeCriteria`1">
            <summary>
            树型查询条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
        </member>
        <member name="M:Bing.Datas.Queries.Trees.TreeCriteria`1.#ctor(Bing.Datas.Queries.Trees.ITreeQueryParameter{System.Nullable{System.Guid}})">
            <summary>
            初始化一个<see cref="T:Bing.Datas.Queries.Trees.TreeCriteria`1"/>类型的实例
            </summary>
            <param name="parameter">查询参数</param>
        </member>
        <member name="T:Bing.Datas.Queries.Trees.TreeCriteria`2">
            <summary>
            树型查询条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TParentId">父标识类型</typeparam>
        </member>
        <member name="M:Bing.Datas.Queries.Trees.TreeCriteria`2.#ctor(Bing.Datas.Queries.Trees.ITreeQueryParameter{`1})">
            <summary>
            初始化一个<see cref="T:Bing.Datas.Queries.Trees.TreeCriteria`2"/>类型的实例
            </summary>
            <param name="parameter">查询参数</param>
        </member>
        <member name="P:Bing.Datas.Queries.Trees.TreeCriteria`2.Predicate">
            <summary>
            查询条件
            </summary>
        </member>
        <member name="M:Bing.Datas.Queries.Trees.TreeCriteria`2.GetPredicate">
            <summary>
            获取查询条件
            </summary>
            <returns></returns>
        </member>
        <member name="T:Bing.Datas.Queries.Trees.TreeQueryParameter`1">
            <summary>
            树型查询参数
            </summary>
            <typeparam name="TParentId">父标识类型</typeparam>
        </member>
        <member name="P:Bing.Datas.Queries.Trees.TreeQueryParameter`1.ParentId">
            <summary>
            父编号
            </summary>
        </member>
        <member name="P:Bing.Datas.Queries.Trees.TreeQueryParameter`1.Level">
            <summary>
            级数
            </summary>
        </member>
        <member name="F:Bing.Datas.Queries.Trees.TreeQueryParameter`1._path">
            <summary>
            路径
            </summary>
        </member>
        <member name="P:Bing.Datas.Queries.Trees.TreeQueryParameter`1.Path">
            <summary>
            路径
            </summary>
        </member>
        <member name="P:Bing.Datas.Queries.Trees.TreeQueryParameter`1.Enabled">
            <summary>
            启用
            </summary>
        </member>
        <member name="M:Bing.Datas.Queries.Trees.TreeQueryParameter`1.#ctor">
            <summary>
            初始化一个<see cref="T:Bing.Datas.Queries.Trees.TreeQueryParameter`1"/>类型的实例
            </summary>
        </member>
        <member name="M:Bing.Datas.Queries.Trees.TreeQueryParameter`1.IsSearch">
            <summary>
            是否搜索
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.Queries.Trees.TreeQueryParameter`1.IsSearchProperty(System.String,System.Object)">
            <summary>
            是否搜索属性
            </summary>
            <param name="name">属性名</param>
            <param name="value">属性值</param>
            <returns></returns>
        </member>
        <member name="T:Bing.Datas.Queries.Trees.TreeQueryParameter">
            <summary>
            树型查询参数
            </summary>
        </member>
        <member name="T:Bing.DependencyInjection.ConventionalRegistrarBase">
            <summary>
            通用注册器基类
            </summary>
        </member>
        <member name="M:Bing.DependencyInjection.ConventionalRegistrarBase.AddAssembly(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Reflection.Assembly)">
            <summary>
            添加程序集
            </summary>
            <param name="services">服务集合</param>
            <param name="assembly">程序集</param>
        </member>
        <member name="M:Bing.DependencyInjection.ConventionalRegistrarBase.AddTypes(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type[])">
            <summary>
            添加类型数组
            </summary>
            <param name="services">服务集合</param>
            <param name="types">类型数组</param>
        </member>
        <member name="M:Bing.DependencyInjection.ConventionalRegistrarBase.AddType(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type)">
            <summary>
            添加类型
            </summary>
            <param name="services">服务集合</param>
            <param name="type">类型</param>
        </member>
        <member name="T:Bing.DependencyInjection.IConventionalRegistrar">
            <summary>
            通用注册器
            </summary>
        </member>
        <member name="M:Bing.DependencyInjection.IConventionalRegistrar.AddAssembly(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Reflection.Assembly)">
            <summary>
            添加程序集
            </summary>
            <param name="services">服务集合</param>
            <param name="assembly">程序集</param>
        </member>
        <member name="M:Bing.DependencyInjection.IConventionalRegistrar.AddTypes(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type[])">
            <summary>
            添加类型数组
            </summary>
            <param name="services">服务集合</param>
            <param name="types">类型数组</param>
        </member>
        <member name="M:Bing.DependencyInjection.IConventionalRegistrar.AddType(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type)">
            <summary>
            添加类型
            </summary>
            <param name="services">服务集合</param>
            <param name="type">类型</param>
        </member>
        <member name="T:Bing.DependencyInjection.IObjectAccessor`1">
            <summary>
            对象访问器
            </summary>
            <typeparam name="T">类型</typeparam>
        </member>
        <member name="P:Bing.DependencyInjection.IObjectAccessor`1.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="T:Bing.DependencyInjection.IServiceProviderAccessor">
            <summary>
            服务提供程序访问器
            </summary>
        </member>
        <member name="P:Bing.DependencyInjection.IServiceProviderAccessor.ServiceProvider">
            <summary>
            服务提供程序
            </summary>
        </member>
        <member name="T:Bing.DependencyInjection.ObjectAccessor`1">
            <summary>
            对象访问器
            </summary>
            <typeparam name="T">类型</typeparam>
        </member>
        <member name="P:Bing.DependencyInjection.ObjectAccessor`1.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="M:Bing.DependencyInjection.ObjectAccessor`1.#ctor">
            <summary>
            初始化一个<see cref="T:Bing.DependencyInjection.ObjectAccessor`1"/>类型的实例
            </summary>
        </member>
        <member name="M:Bing.DependencyInjection.ObjectAccessor`1.#ctor(`0)">
            <summary>
            初始化一个<see cref="T:Bing.DependencyInjection.ObjectAccessor`1"/>类型的实例
            </summary>
            <param name="value">值</param>
        </member>
        <member name="T:Bing.Dependency.DefaultServiceScopeFactory">
            <summary>
            默认<see cref="T:Microsoft.Extensions.DependencyInjection.IServiceScope"/>工厂，行为和<see cref="T:Microsoft.Extensions.DependencyInjection.IServiceScopeFactory"/>一样
            </summary>
        </member>
        <member name="P:Bing.Dependency.DefaultServiceScopeFactory.ServiceScopeFactory">
            <summary>
            服务作用域工厂
            </summary>
        </member>
        <member name="M:Bing.Dependency.DefaultServiceScopeFactory.#ctor(Microsoft.Extensions.DependencyInjection.IServiceScopeFactory)">
            <summary>
            初始化一个<see cref="T:Bing.Dependency.DefaultServiceScopeFactory"/>类型的实例
            </summary>
            <param name="serviceScopeFactory">服务作用域工厂</param>
        </member>
        <member name="M:Bing.Dependency.DefaultServiceScopeFactory.CreateScope">
            <summary>
            创建作用域
            </summary>
        </member>
        <member name="T:Bing.Dependency.DependencyAttribute">
            <summary>
            依赖注入行为特性
            </summary>
        </member>
        <member name="P:Bing.Dependency.DependencyAttribute.Lifetime">
            <summary>
            声明周期类型，代替
            <see cref="T:Bing.Dependency.ISingletonDependency"/>,<see cref="T:Bing.Dependency.IScopedDependency"/>,<see cref="T:Bing.Dependency.ITransientDependency"/>三个接口的作用
            </summary>
        </member>
        <member name="P:Bing.Dependency.DependencyAttribute.TryAdd">
            <summary>
            是否为TryAdd方式注册，通常用于默认服务，当服务可被替换时，应设置为true
            </summary>
        </member>
        <member name="P:Bing.Dependency.DependencyAttribute.ReplaceExisting">
            <summary>
            是否替换已存在的服务实现，通常用于主要服务，当服务存在时即优先使用时，应设置为true
            </summary>
        </member>
        <member name="P:Bing.Dependency.DependencyAttribute.AddSelf">
            <summary>
            是否注册自身类型，默认没有接口的类型会注册自身，当此属性为true时，也会注册自身
            </summary>
        </member>
        <member name="M:Bing.Dependency.DependencyAttribute.#ctor(Microsoft.Extensions.DependencyInjection.ServiceLifetime)">
            <summary>
            初始化一个<see cref="T:Bing.Dependency.DependencyAttribute"/>类型的实例
            </summary>
            <param name="lifetime">生命周期类型</param>
        </member>
        <member name="T:Bing.Dependency.DependencyTypeFinder">
            <summary>
            依赖注入类型查找器
            </summary>
        </member>
        <member name="F:Bing.Dependency.DependencyTypeFinder._allAssemblyFinder">
            <summary>
            所有程序集查找器
            </summary>
        </member>
        <member name="M:Bing.Dependency.DependencyTypeFinder.#ctor(Bing.Reflections.IAllAssemblyFinder)">
            <summary>
            初始化一个<see cref="T:Bing.Dependency.DependencyTypeFinder"/>类型的实例
            </summary>
            <param name="allAssemblyFinder">所有程序集查找器</param>
        </member>
        <member name="M:Bing.Dependency.DependencyTypeFinder.FindAllItems">
            <summary>
            重写已实现所有项的查找
            </summary>
        </member>
        <member name="M:Bing.Dependency.DependencyTypeFinder.Find``1(System.Collections.Generic.List{System.Reflection.Assembly})">
            <summary>
            查找类型列表
            </summary>
            <typeparam name="T">查找类型</typeparam>
            <param name="assemblies">在指定的程序集列表中查找</param>
        </member>
        <member name="M:Bing.Dependency.DependencyTypeFinder.Find(System.Type,System.Collections.Generic.List{System.Reflection.Assembly})">
            <summary>
            查找类型列表
            </summary>
            <param name="findType">查找类型</param>
            <param name="assemblies">在指定的程序集列表中查找</param>
        </member>
        <member name="T:Bing.Dependency.IDependencyTypeFinder">
            <summary>
            依赖注入类型查找器。查找标注了<see cref="T:Bing.Dependency.DependencyAttribute"/>特性，或者<see cref="T:Bing.Dependency.ISingletonDependency"/>, <see cref="T:Bing.Dependency.IScopedDependency"/>, <see cref="T:Bing.Dependency.ITransientDependency"/>三个接口的服务实现类型
            </summary>
        </member>
        <member name="T:Bing.Dependency.IgnoreDependencyAttribute">
            <summary>
            标注了此特性的类，将忽略依赖注入自动映射
            </summary>
        </member>
        <member name="T:Bing.Dependency.IHybridServiceScopeFactory">
            <summary>
            混合服务作用域工厂
            </summary>
        </member>
        <member name="T:Bing.Dependency.IScopedDependency">
            <summary>
            实现此接口的类型将注册为<see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped"/>模式
            </summary>
        </member>
        <member name="T:Bing.Dependency.IScopedServiceResolver">
            <summary>
            <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped"/>服务解析器
            </summary>
        </member>
        <member name="P:Bing.Dependency.IScopedServiceResolver.ResolveEnabled">
            <summary>
            是否可解析
            </summary>
        </member>
        <member name="P:Bing.Dependency.IScopedServiceResolver.ScopedProvider">
            <summary>
            <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped"/>生命周期的服务提供程序
            </summary>
        </member>
        <member name="M:Bing.Dependency.IScopedServiceResolver.GetService``1">
            <summary>
            获取指定服务类型的实例
            </summary>
            <typeparam name="T">服务类型</typeparam>
        </member>
        <member name="M:Bing.Dependency.IScopedServiceResolver.GetService(System.Type)">
            <summary>
            获取指定服务类型的实例
            </summary>
            <param name="serviceType">服务类型</param>
        </member>
        <member name="M:Bing.Dependency.IScopedServiceResolver.GetServices``1">
            <summary>
            获取指定服务类型的所有实例
            </summary>
            <typeparam name="T">服务类型</typeparam>
        </member>
        <member name="M:Bing.Dependency.IScopedServiceResolver.GetServices(System.Type)">
            <summary>
            获取指定服务类型的所有实例
            </summary>
            <param name="serviceType">服务类型</param>
        </member>
        <member name="T:Bing.Dependency.ISingletonDependency">
            <summary>
            实现此接口的类型将注册为<see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton"/>模式
            </summary>
        </member>
        <member name="T:Bing.Dependency.ITransientDependency">
            <summary>
            实现此接口的类型将自动注册为<see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient"/>模式
            </summary>
        </member>
        <member name="T:Bing.Dependency.Lazier`1">
            <summary>
            Lazy延迟加载解析器
            </summary>
            <typeparam name="T">对象类型</typeparam>
        </member>
        <member name="M:Bing.Dependency.Lazier`1.#ctor(System.IServiceProvider)">
            <summary>
            初始化一个<see cref="T:Bing.Dependency.Lazier`1"/>类型的实例
            </summary>
            <param name="serviceProvider">服务提供程序</param>
        </member>
        <member name="T:Bing.Dependency.MultipleDependencyAttribute">
            <summary>
            标记允许多重注入，即一个接口可以注入多个实例
            </summary>
        </member>
        <member name="T:Bing.Dependency.ScopedDictionary">
            <summary>
            基于<see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped"/>生命周期的数据字典。可用于在Scoped环境中传递数据
            </summary>
        </member>
        <member name="P:Bing.Dependency.ScopedDictionary.DataAuthValidRoleNames">
            <summary>
            对于当前功能有效的角色集合，用于数据权限判断
            </summary>
        </member>
        <member name="P:Bing.Dependency.ScopedDictionary.Identity">
            <summary>
            当前用户
            </summary>
        </member>
        <member name="M:Bing.Dependency.ScopedDictionary.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="T:Bing.Dependency.ScopedDictionaryExtensions">
            <summary>
            作用域字典(<see cref="T:Bing.Dependency.ScopedDictionary"/>) 扩展
            </summary>
        </member>
        <member name="M:Bing.Dependency.ScopedDictionaryExtensions.GetValue``1(Bing.Dependency.ScopedDictionary,System.String)">
            <summary>
            从Scoped字典获取指定类型的值
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="dictionary">字典</param>
            <param name="key">键名</param>
        </member>
        <member name="T:Bing.Dependency.ServiceLocator">
            <summary>
            应用程序服务定位器。可随时正常解析<see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton"/>与<see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient"/>生命周期类型的服务
            如果当前处于HttpContext有效的范围内，可正常解析<see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped"/>的服务
            注：服务定位器尚不能正常解析 RootServiceProvider.CreateScope() 生命周期内的 Scoped 的服务
            </summary>
        </member>
        <member name="F:Bing.Dependency.ServiceLocator.InstanceLazy">
            <summary>
            懒加载实例
            </summary>
        </member>
        <member name="F:Bing.Dependency.ServiceLocator._provider">
            <summary>
            服务提供程序
            </summary>
        </member>
        <member name="F:Bing.Dependency.ServiceLocator._services">
            <summary>
            服务集合
            </summary>
        </member>
        <member name="P:Bing.Dependency.ServiceLocator.Instance">
            <summary>
            服务定位器实例
            </summary>
        </member>
        <member name="P:Bing.Dependency.ServiceLocator.IsProviderEnabled">
            <summary>
            ServiceProvider是否可用
            </summary>
        </member>
        <member name="P:Bing.Dependency.ServiceLocator.ScopedProvider">
            <summary>
            <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped"/>生命周期的服务提供者
            </summary>
        </member>
        <member name="M:Bing.Dependency.ServiceLocator.#ctor">
            <summary>
            初始化一个<see cref="T:Bing.Dependency.ServiceLocator"/>类型的实例
            </summary>
        </member>
        <member name="M:Bing.Dependency.ServiceLocator.InScoped">
            <summary>
            当前是否处于<see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped"/>生命周期中
            </summary>
        </member>
        <member name="M:Bing.Dependency.ServiceLocator.SetServiceCollection(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            设置应用程序服务集合
            </summary>
            <param name="services">服务集合</param>
        </member>
        <member name="M:Bing.Dependency.ServiceLocator.SetApplicationServiceProvider(System.IServiceProvider)">
            <summary>
            设置应用程序服务提供程序
            </summary>
            <param name="provider">服务提供程序</param>
        </member>
        <member name="M:Bing.Dependency.ServiceLocator.GetServiceDescriptors">
            <summary>
            获取所有已注册的<see cref="T:Microsoft.Extensions.DependencyInjection.ServiceDescriptor"/>对象
            </summary>
        </member>
        <member name="M:Bing.Dependency.ServiceLocator.GetService``1">
            <summary>
            解析指定类型的服务实例
            </summary>
            <typeparam name="T">服务类型</typeparam>
        </member>
        <member name="M:Bing.Dependency.ServiceLocator.GetService(System.Type)">
            <summary>
            解析指定类型的服务实例
            </summary>
            <param name="serviceType">服务类型</param>
        </member>
        <member name="M:Bing.Dependency.ServiceLocator.GetServices``1">
            <summary>
            解析指定类型的所有服务实例
            </summary>
            <typeparam name="T">服务类型</typeparam>
        </member>
        <member name="M:Bing.Dependency.ServiceLocator.GetServices(System.Type)">
            <summary>
            解析指定类型的所有服务实例
            </summary>
            <param name="serviceType">服务类型</param>
        </member>
        <member name="M:Bing.Dependency.ServiceLocator.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="T:Bing.Dependency.Bootstrapper">
            <summary>
            依赖引导器
            </summary>
        </member>
        <member name="F:Bing.Dependency.Bootstrapper._services">
            <summary>
            服务集合
            </summary>
        </member>
        <member name="F:Bing.Dependency.Bootstrapper._configs">
            <summary>
            依赖配置
            </summary>
        </member>
        <member name="F:Bing.Dependency.Bootstrapper._builder">
            <summary>
            容器生成器
            </summary>
        </member>
        <member name="F:Bing.Dependency.Bootstrapper._finder">
            <summary>
            类型查找器
            </summary>
        </member>
        <member name="F:Bing.Dependency.Bootstrapper._allAssemblyFinder">
            <summary>
            所有程序集查找器
            </summary>
        </member>
        <member name="F:Bing.Dependency.Bootstrapper._assemblies">
            <summary>
            程序集列表
            </summary>
        </member>
        <member name="F:Bing.Dependency.Bootstrapper._aopConfigAction">
            <summary>
            Aop配置操作
            </summary>
        </member>
        <member name="M:Bing.Dependency.Bootstrapper.#ctor(Microsoft.Extensions.DependencyInjection.IServiceCollection,Bing.Dependency.IConfig[],System.Action{AspectCore.Configuration.IAspectConfiguration},Bing.Reflections.ITypeFinder)">
            <summary>
            初始化一个<see cref="T:Bing.Dependency.Bootstrapper"/>类型的实例
            </summary>
            <param name="services">服务集合</param>
            <param name="configs">依赖配置</param>
            <param name="aopConfigAction">Aop配置操作</param>
            <param name="finder">类型查找器</param>
        </member>
        <member name="M:Bing.Dependency.Bootstrapper.Run(Microsoft.Extensions.DependencyInjection.IServiceCollection,Bing.Dependency.IConfig[],System.Action{AspectCore.Configuration.IAspectConfiguration},Bing.Reflections.ITypeFinder)">
            <summary>
            启动引导
            </summary>
            <param name="services">服务集合</param>
            <param name="configs">依赖配置</param>
            <param name="aopConfigAction">Aop配置操作</param>
            <param name="finder">类型查找器</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Dependency.Bootstrapper.Run(Microsoft.Extensions.DependencyInjection.IServiceCollection,Bing.Dependency.IConfig[])">
            <summary>
            启动引导
            </summary>
            <param name="services">服务集合</param>
            <param name="configs">依赖配置</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Dependency.Bootstrapper.Bootstrap">
            <summary>
            引导
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bing.Dependency.Bootstrapper.RegistServices(Autofac.ContainerBuilder)">
            <summary>
            注册服务集合
            </summary>
            <param name="builder">容器生成器</param>
        </member>
        <member name="M:Bing.Dependency.Bootstrapper.RegistInfrastracture">
            <summary>
            注册基础设施
            </summary>
        </member>
        <member name="M:Bing.Dependency.Bootstrapper.EnableAop">
            <summary>
            启用Aop
            </summary>
        </member>
        <member name="M:Bing.Dependency.Bootstrapper.RegistFinder">
            <summary>
            注册类型查找器
            </summary>
        </member>
        <member name="M:Bing.Dependency.Bootstrapper.RegistEventHandlers">
            <summary>
            注册事件处理器
            </summary>
        </member>
        <member name="M:Bing.Dependency.Bootstrapper.RegistEventHandlers(System.Type)">
            <summary>
            注册事件处理器
            </summary>
            <param name="handlerType">处理器类型</param>
        </member>
        <member name="M:Bing.Dependency.Bootstrapper.RegistDependency">
            <summary>
            查找并注册依赖
            </summary>
        </member>
        <member name="M:Bing.Dependency.Bootstrapper.RegistSingletonDependency">
            <summary>
            注册单例依赖
            </summary>
        </member>
        <member name="M:Bing.Dependency.Bootstrapper.RegistScopeDependency">
            <summary>
            注册作用域依赖
            </summary>
        </member>
        <member name="M:Bing.Dependency.Bootstrapper.RegistTransientDependency">
            <summary>
            注册瞬态依赖
            </summary>
        </member>
        <member name="M:Bing.Dependency.Bootstrapper.ResolveDependencyRegistrar">
            <summary>
            解析依赖注册器
            </summary>
        </member>
        <member name="M:Bing.Dependency.Bootstrapper.GetTypes``1">
            <summary>
            获取类型集合
            </summary>
            <typeparam name="T">类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:Bing.Dependency.Bootstrapper.GetTypes(System.Type)">
            <summary>
            获取类型集合
            </summary>
            <param name="type">类型</param>
            <returns></returns>
        </member>
        <member name="T:Bing.Dependency.ConfigBase">
            <summary>
            依赖配置基类
            </summary>
        </member>
        <member name="T:Bing.Dependency.Container">
            <summary>
            默认容器。Autofac对象容器
            </summary>
        </member>
        <member name="F:Bing.Dependency.Container._container">
            <summary>
            Autofac容器
            </summary>
        </member>
        <member name="M:Bing.Dependency.Container.CreateList``1(System.String)">
            <summary>
            创建集合
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="name">服务名称</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Dependency.Container.CreateList(System.Type,System.String)">
            <summary>
            创建集合
            </summary>
            <param name="type">对象类型</param>
            <param name="name">服务名称</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Dependency.Container.Create``1(System.String)">
            <summary>
            创建对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="name">服务名称</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Dependency.Container.Create(System.Type,System.String)">
            <summary>
            创建对象
            </summary>
            <param name="type">对象类型</param>
            <param name="name">服务名称</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Dependency.Container.GetServiceFromHttpContext(System.Type,System.String)">
            <summary>
            从HttpContext获取服务
            </summary>
            <param name="type">对象类型</param>
            <param name="name">服务名称</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Dependency.Container.GetService(System.Type,System.String)">
            <summary>
            获取服务
            </summary>
            <param name="type">对象类型</param>
            <param name="name">服务名称</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Dependency.Container.BeginScope">
            <summary>
            作用域开始
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bing.Dependency.Container.Register(Bing.Dependency.IConfig[])">
            <summary>
            注册依赖
            </summary>
            <param name="configs">依赖配置</param>
        </member>
        <member name="M:Bing.Dependency.Container.Register(Microsoft.Extensions.DependencyInjection.IServiceCollection,Bing.Dependency.IConfig[])">
            <summary>
            注册依赖
            </summary>
            <param name="services">服务集合</param>
            <param name="configs">依赖配置</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Dependency.Container.Register(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Autofac.ContainerBuilder},Bing.Dependency.IConfig[])">
            <summary>
            注册依赖
            </summary>
            <param name="services">服务集合</param>
            <param name="actionBefore">注册前操作</param>
            <param name="configs">依赖配置</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Dependency.Container.CreateBuilder(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Autofac.ContainerBuilder},Bing.Dependency.IConfig[])">
            <summary>
            创建容器生成器
            </summary>
            <param name="services">服务集合</param>
            <param name="actionBefore">注册前执行的操作</param>
            <param name="configs">依赖配置</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Dependency.Container.Dispose">
            <summary>
            释放容器
            </summary>
        </member>
        <member name="T:Bing.Dependency.ContainerBuilderExtensions">
            <summary>
            Autofac 容器生成器 扩展
            </summary>
        </member>
        <member name="M:Bing.Dependency.ContainerBuilderExtensions.AddTransient``2(Autofac.ContainerBuilder,System.String)">
            <summary>
            注册服务，生命周期为 InstancePerDependency(每次创建一个新实例)
            </summary>
            <typeparam name="TService">接口类型</typeparam>
            <typeparam name="TImplementation">实现类型</typeparam>
            <param name="builder">容器生成器</param>
            <param name="name">服务名称</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Dependency.ContainerBuilderExtensions.AddScoped``2(Autofac.ContainerBuilder,System.String)">
            <summary>
            注册服务，生命周期为 InstancePerLifetimeScope(每个请求一个实例)
            </summary>
            <typeparam name="TService">接口类型</typeparam>
            <typeparam name="TImplementation">实现类型</typeparam>
            <param name="builder">容器生成器</param>
            <param name="name">服务名称</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Dependency.ContainerBuilderExtensions.AddScoped``1(Autofac.ContainerBuilder)">
            <summary>
            注册服务，生命周期为 InstancePerLifetimeScope(每个请求一个实例)
            </summary>
            <typeparam name="TImplementation">实现类型</typeparam>
            <param name="builder">容器生成器</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Dependency.ContainerBuilderExtensions.AddSingleton``2(Autofac.ContainerBuilder,System.String)">
            <summary>
            注册服务，生命周期为 SingleInstance(单例)
            </summary>
            <typeparam name="TService">接口类型</typeparam>
            <typeparam name="TImplementation">实现类型</typeparam>
            <param name="builder">容器生成器</param>
            <param name="name">服务名称</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Dependency.ContainerBuilderExtensions.AddSingleton``1(Autofac.ContainerBuilder,``0,System.String)">
            <summary>
            注册服务，生命周期为 SingleInstance(单例)
            </summary>
            <typeparam name="TService">接口类型</typeparam>
            <param name="builder">容器生成器</param>
            <param name="instance">服务实例</param>
            <param name="name">服务名称</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Dependency.ContainerBuilderExtensions.EnableAop(Autofac.ContainerBuilder,System.Action{AspectCore.Configuration.IAspectConfiguration})">
            <summary>
            启用Aop
            </summary>
            <param name="builder">容器生成器</param>
            <param name="configAction">Aop配置</param>
        </member>
        <member name="M:Bing.Dependency.ContainerBuilderExtensions.EnableAspectScoped(Autofac.ContainerBuilder)">
            <summary>
            启用Aop作用域
            </summary>
            <param name="builder">容器生成器</param>
        </member>
        <member name="T:Bing.Dependency.DependencyModule">
            <summary>
            依赖注入模块
            </summary>
        </member>
        <member name="P:Bing.Dependency.DependencyModule.Level">
            <summary>
            模块级别。级别越小越先启动
            </summary>
        </member>
        <member name="P:Bing.Dependency.DependencyModule.Order">
            <summary>
            模块启动顺序。模块启动的顺序先按级别启动，同一级别内部再按此顺序启动，
            级别默认为0，表示无依赖，需要在同级别有依赖顺序的时候，再重写为>0的顺序值
            </summary>
        </member>
        <member name="M:Bing.Dependency.DependencyModule.AddServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            添加服务。将模块服务添加到依赖注入服务容器中
            </summary>
            <param name="services">服务集合</param>
        </member>
        <member name="M:Bing.Dependency.DependencyModule.UseModule(System.IServiceProvider)">
            <summary>
            应用模块服务
            </summary>
            <param name="provider">服务提供程序</param>
        </member>
        <member name="M:Bing.Dependency.DependencyModule.AddToServices(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type)">
            <summary>
            将服务实现类型注册到服务集合中
            </summary>
            <param name="services">服务集合</param>
            <param name="implementationType">要注册的服务实现类型</param>
        </member>
        <member name="M:Bing.Dependency.DependencyModule.GetLifetimeOrNull(System.Type)">
            <summary>
            重写以实现 从类型获取要注册的<see cref="T:Microsoft.Extensions.DependencyInjection.ServiceLifetime"/>生命周期类型
            </summary>
            <param name="type">依赖注入实现类型</param>
        </member>
        <member name="M:Bing.Dependency.DependencyModule.GetImplementedInterfaces(System.Type)">
            <summary>
            重写以实现 获取实现类型的所有可注册服务接口
            </summary>
            <param name="type">依赖注入实现类型</param>
        </member>
        <member name="M:Bing.Dependency.DependencyModule.AddSingleService(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.DependencyInjection.ServiceDescriptor,Bing.Dependency.DependencyAttribute)">
            <summary>
            添加单一服务
            </summary>
            <param name="services">服务集合</param>
            <param name="descriptor">描述</param>
            <param name="dependencyAttribute">依赖注入行为特性</param>
        </member>
        <member name="T:Bing.Dependency.IConfig">
            <summary>
            依赖配置
            </summary>
        </member>
        <member name="T:Bing.Dependency.IContainer">
            <summary>
            容器
            </summary>
        </member>
        <member name="M:Bing.Dependency.IContainer.CreateList``1(System.String)">
            <summary>
            创建集合
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="name">服务名称</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Dependency.IContainer.CreateList(System.Type,System.String)">
            <summary>
            创建集合
            </summary>
            <param name="type">对象类型</param>
            <param name="name">服务名称</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Dependency.IContainer.Create``1(System.String)">
            <summary>
            创建对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="name">服务名称</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Dependency.IContainer.Create(System.Type,System.String)">
            <summary>
            创建对象
            </summary>
            <param name="type">对象类型</param>
            <param name="name">服务名称</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Dependency.IContainer.BeginScope">
            <summary>
            作用域开始
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bing.Dependency.IContainer.Register(Bing.Dependency.IConfig[])">
            <summary>
            注册依赖
            </summary>
            <param name="configs">依赖配置</param>
        </member>
        <member name="M:Bing.Dependency.IContainer.Register(Microsoft.Extensions.DependencyInjection.IServiceCollection,Bing.Dependency.IConfig[])">
            <summary>
            注册依赖
            </summary>
            <param name="services">服务集合</param>
            <param name="configs">依赖配置</param>
            <returns></returns>
        </member>
        <member name="T:Bing.Dependency.IDependencyRegistrar">
            <summary>
            依赖注册器
            </summary>
        </member>
        <member name="M:Bing.Dependency.IDependencyRegistrar.Register(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            注册依赖
            </summary>
            <param name="services">服务集合</param>
        </member>
        <member name="T:Bing.Dependency.IScope">
            <summary>
            作用域
            </summary>
        </member>
        <member name="M:Bing.Dependency.IScope.Create``1(System.String)">
            <summary>
            创建实例
            </summary>
            <typeparam name="T">实例类型</typeparam>
            <param name="name">服务名称</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Dependency.IScope.Create(System.Type,System.String)">
            <summary>
            创建对象
            </summary>
            <param name="type">对象类型</param>
            <param name="name">服务名称</param>
            <returns></returns>
        </member>
        <member name="T:Bing.Dependency.Scope">
            <summary>
            作用域
            </summary>
        </member>
        <member name="F:Bing.Dependency.Scope._scope">
            <summary>
            Autofac 作用域
            </summary>
        </member>
        <member name="M:Bing.Dependency.Scope.#ctor(Autofac.ILifetimeScope)">
            <summary>
            初始化一个<see cref="T:Bing.Dependency.Scope"/>类型的实例
            </summary>
            <param name="scope">Autofac 作用域</param>
        </member>
        <member name="M:Bing.Dependency.Scope.Dispose">
            <summary>
            释放对象
            </summary>
        </member>
        <member name="M:Bing.Dependency.Scope.Create``1(System.String)">
            <summary>
            创建实例
            </summary>
            <typeparam name="T">实例类型</typeparam>
            <param name="name">服务名称</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Dependency.Scope.Create(System.Type,System.String)">
            <summary>
            创建对象
            </summary>
            <param name="type">对象类型</param>
            <param name="name">服务名称</param>
            <returns></returns>
        </member>
        <member name="T:Bing.DisposeAction">
            <summary>
            释放操作
            </summary>
        </member>
        <member name="F:Bing.DisposeAction._action">
            <summary>
            操作
            </summary>
        </member>
        <member name="M:Bing.DisposeAction.#ctor(System.Action)">
            <summary>
            初始化一个<see cref="T:Bing.DisposeAction"/>类型的实例
            </summary>
            <param name="action">操作</param>
        </member>
        <member name="M:Bing.DisposeAction.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="T:Bing.Domains.ChangeTracking.ChangedValueDescriptor">
            <summary>
            变更值
            </summary>
        </member>
        <member name="M:Bing.Domains.ChangeTracking.ChangedValueDescriptor.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            初始化一个<see cref="T:Bing.Domains.ChangeTracking.ChangedValueDescriptor"/>类型的实例
            </summary>
            <param name="propertyName">属性名</param>
            <param name="description">描述</param>
            <param name="oldValue">旧值</param>
            <param name="newValue">新值</param>
        </member>
        <member name="P:Bing.Domains.ChangeTracking.ChangedValueDescriptor.PropertyName">
            <summary>
            属性名
            </summary>
        </member>
        <member name="P:Bing.Domains.ChangeTracking.ChangedValueDescriptor.Description">
            <summary>
            描述
            </summary>
        </member>
        <member name="P:Bing.Domains.ChangeTracking.ChangedValueDescriptor.OldValue">
            <summary>
            旧值
            </summary>
        </member>
        <member name="P:Bing.Domains.ChangeTracking.ChangedValueDescriptor.NewValue">
            <summary>
            新值
            </summary>
        </member>
        <member name="M:Bing.Domains.ChangeTracking.ChangedValueDescriptor.ToString">
            <summary>
            输出变更信息
            </summary>
        </member>
        <member name="T:Bing.Domains.ChangeTracking.ChangedValueDescriptorCollection">
            <summary>
            变更值集合
            </summary>
        </member>
        <member name="F:Bing.Domains.ChangeTracking.ChangedValueDescriptorCollection._list">
            <summary>
            变更值列表
            </summary>
        </member>
        <member name="F:Bing.Domains.ChangeTracking.ChangedValueDescriptorCollection._changedNameList">
            <summary>
            变更值名称列表
            </summary>
        </member>
        <member name="M:Bing.Domains.ChangeTracking.ChangedValueDescriptorCollection.#ctor">
            <summary>
            初始化一个<see cref="T:Bing.Domains.ChangeTracking.ChangedValueDescriptorCollection"/>类型的实例
            </summary>
        </member>
        <member name="M:Bing.Domains.ChangeTracking.ChangedValueDescriptorCollection.#ctor(Bing.Domains.ChangeTracking.ChangedValueDescriptorCollection)">
            <summary>
            初始化一个<see cref="T:Bing.Domains.ChangeTracking.ChangedValueDescriptorCollection"/>类型的实例
            </summary>
            <param name="descriptors">变更值描述符集合</param>
        </member>
        <member name="M:Bing.Domains.ChangeTracking.ChangedValueDescriptorCollection.GetEnumerator">
            <summary>
            获取迭代器
            </summary>
        </member>
        <member name="M:Bing.Domains.ChangeTracking.ChangedValueDescriptorCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            获取迭代器
            </summary>
        </member>
        <member name="M:Bing.Domains.ChangeTracking.ChangedValueDescriptorCollection.Add(Bing.Domains.ChangeTracking.ChangedValueDescriptor)">
            <summary>
            添加
            </summary>
            <param name="descriptor">变更值描述符</param>
        </member>
        <member name="M:Bing.Domains.ChangeTracking.ChangedValueDescriptorCollection.Add(System.String,System.String,System.String,System.String)">
            <summary>
            添加
            </summary>
            <param name="propertyName">属性名</param>
            <param name="description">描述</param>
            <param name="oldValue">旧值</param>
            <param name="newValue">新值</param>
        </member>
        <member name="M:Bing.Domains.ChangeTracking.ChangedValueDescriptorCollection.AddRange(System.Collections.Generic.IEnumerable{Bing.Domains.ChangeTracking.ChangedValueDescriptor})">
            <summary>
            添加集合
            </summary>
            <param name="descriptors">变更值描述符集合</param>
        </member>
        <member name="M:Bing.Domains.ChangeTracking.ChangedValueDescriptorCollection.Populate(System.Collections.Generic.IEnumerable{Bing.Domains.ChangeTracking.ChangedValueDescriptor})">
            <summary>
            填充
            </summary>
            <param name="descriptors">变更值描述符集合</param>
        </member>
        <member name="M:Bing.Domains.ChangeTracking.ChangedValueDescriptorCollection.FlushCache">
            <summary>
            刷新缓存
            </summary>
        </member>
        <member name="M:Bing.Domains.ChangeTracking.ChangedValueDescriptorCollection.ToString">
            <summary>
            输出变更信息
            </summary>
        </member>
        <member name="T:Bing.Domains.ChangeTracking.ChangeTrackingContext">
            <summary>
            变更跟踪上下文
            </summary>
        </member>
        <member name="F:Bing.Domains.ChangeTracking.ChangeTrackingContext._changedValueCollection">
            <summary>
            变更值集合
            </summary>
        </member>
        <member name="M:Bing.Domains.ChangeTracking.ChangeTrackingContext.#ctor">
            <summary>
            初始化一个<see cref="T:Bing.Domains.ChangeTracking.ChangeTrackingContext"/>类型的实例
            </summary>
        </member>
        <member name="M:Bing.Domains.ChangeTracking.ChangeTrackingContext.#ctor(Bing.Domains.ChangeTracking.ChangedValueDescriptorCollection)">
            <summary>
            初始化一个<see cref="T:Bing.Domains.ChangeTracking.ChangeTrackingContext"/>类型的实例
            </summary>
            <param name="collection">变更值集合</param>
        </member>
        <member name="M:Bing.Domains.ChangeTracking.ChangeTrackingContext.Add``1(System.String,System.String,``0,``0)">
            <summary>
            添加
            </summary>
            <typeparam name="TValue">值类型</typeparam>
            <param name="propertyName">属性名</param>
            <param name="description">描述</param>
            <param name="valueBeforeChange">变更前的值。范例：this.Name</param>
            <param name="valueAfterChange">变更后的值。范例：newEntity.Name</param>
        </member>
        <member name="M:Bing.Domains.ChangeTracking.ChangeTrackingContext.Add``1(Bing.Domains.ChangeTracking.IChangeTrackable{``0},``0)">
            <summary>
            添加
            </summary>
            <typeparam name="TObject">领域对象类型</typeparam>
            <param name="leftObj">左对象</param>
            <param name="rightObj">右对象</param>
        </member>
        <member name="M:Bing.Domains.ChangeTracking.ChangeTrackingContext.Add``3(System.Linq.Expressions.Expression{System.Func{``0,``1}},``2)">
            <summary>
            添加
            </summary>
            <typeparam name="TObject">领域对象类型</typeparam>
            <typeparam name="TProperty">属性类型</typeparam>
            <typeparam name="TValue">值类型</typeparam>
            <param name="expression">属性表达式。范例：t => t.Name</param>
            <param name="newValue">新值。范例：newEntity.Name</param>
        </member>
        <member name="M:Bing.Domains.ChangeTracking.ChangeTrackingContext.Add``1(System.Collections.Generic.IEnumerable{Bing.Domains.ChangeTracking.IChangeTrackable{``0}},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            添加
            </summary>
            <typeparam name="TObject">领域对象类型</typeparam>
            <param name="leftObjs">左对象列表</param>
            <param name="rightObjs">右对象列表</param>
        </member>
        <member name="M:Bing.Domains.ChangeTracking.ChangeTrackingContext.Populate(Bing.Domains.ChangeTracking.ChangedValueDescriptorCollection)">
            <summary>
            填充
            </summary>
            <param name="collection">变更值集合</param>
        </member>
        <member name="M:Bing.Domains.ChangeTracking.ChangeTrackingContext.FlushCache">
            <summary>
            刷新缓存
            </summary>
        </member>
        <member name="M:Bing.Domains.ChangeTracking.ChangeTrackingContext.GetChangedValueDescriptor">
            <summary>
            获取变更值集合
            </summary>
        </member>
        <member name="M:Bing.Domains.ChangeTracking.ChangeTrackingContext.Output">
            <summary>
            输出
            </summary>
        </member>
        <member name="M:Bing.Domains.ChangeTracking.ChangeTrackingContext.ToString">
            <summary>
            输出字符串
            </summary>
        </member>
        <member name="T:Bing.Domains.ChangeTracking.IChangeTrackable`1">
            <summary>
            变更跟踪
            </summary>
            <typeparam name="TObject"></typeparam>
        </member>
        <member name="M:Bing.Domains.ChangeTracking.IChangeTrackable`1.GetChanges(`0)">
            <summary>
            获取变更值集合
            </summary>
            <param name="otherObj">其它对象</param>
        </member>
        <member name="T:Bing.Domains.Core.DescriptionContext">
            <summary>
            描述上下文
            </summary>
        </member>
        <member name="F:Bing.Domains.Core.DescriptionContext._stringBuilder">
            <summary>
            字符串拼接器
            </summary>
        </member>
        <member name="M:Bing.Domains.Core.DescriptionContext.#ctor">
            <summary>
            初始化一个<see cref="T:Bing.Domains.Core.DescriptionContext"/>类型的实例
            </summary>
        </member>
        <member name="M:Bing.Domains.Core.DescriptionContext.Add(System.String)">
            <summary>
            添加描述
            </summary>
            <param name="description">描述</param>
        </member>
        <member name="M:Bing.Domains.Core.DescriptionContext.Add``1(System.String,``0)">
            <summary>
            添加描述
            </summary>
            <typeparam name="TValue">值类型</typeparam>
            <param name="name">属性名</param>
            <param name="value">属性值</param>
        </member>
        <member name="M:Bing.Domains.Core.DescriptionContext.Add``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            添加描述
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <typeparam name="TProperty">属性类型</typeparam>
            <param name="expression">属性表达式，范例：t => t.Name</param>
        </member>
        <member name="M:Bing.Domains.Core.DescriptionContext.FlushCache">
            <summary>
            刷新缓存
            </summary>
        </member>
        <member name="M:Bing.Domains.Core.DescriptionContext.Output">
            <summary>
            输出
            </summary>
        </member>
        <member name="M:Bing.Domains.Core.DescriptionContext.ToString">
            <summary>
            输出字符串
            </summary>
        </member>
        <member name="T:Bing.Domains.Entities.AggregateRoot`2">
            <summary>
            聚合根
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TKey">标识类型</typeparam>
        </member>
        <member name="M:Bing.Domains.Entities.AggregateRoot`2.#ctor(`1)">
            <summary>
            初始化一个<see cref="T:Bing.Domains.Entities.AggregateRoot`2"/>类型的实例
            </summary>
            <param name="id">标识</param>
        </member>
        <member name="P:Bing.Domains.Entities.AggregateRoot`2.Version">
            <summary>
            版本号（乐观锁）
            </summary>
        </member>
        <member name="T:Bing.Domains.Entities.AggregateRoot`1">
            <summary>
            聚合根
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
        </member>
        <member name="M:Bing.Domains.Entities.AggregateRoot`1.#ctor(System.Guid)">
            <summary>
            初始化一个<see cref="T:Bing.Domains.Entities.AggregateRoot`1"/>类型的实例
            </summary>
            <param name="id">标识</param>
        </member>
        <member name="T:Bing.Domains.Entities.Auditing.CreationAuditedInitializer">
            <summary>
            创建操作审计初始化器
            </summary>
        </member>
        <member name="F:Bing.Domains.Entities.Auditing.CreationAuditedInitializer._entity">
            <summary>
            实体
            </summary>
        </member>
        <member name="F:Bing.Domains.Entities.Auditing.CreationAuditedInitializer._userId">
            <summary>
            用户标识
            </summary>
        </member>
        <member name="F:Bing.Domains.Entities.Auditing.CreationAuditedInitializer._userName">
            <summary>
            用户名称
            </summary>
        </member>
        <member name="M:Bing.Domains.Entities.Auditing.CreationAuditedInitializer.#ctor(System.Object,System.String,System.String)">
            <summary>
            初始化一个<see cref="T:Bing.Domains.Entities.Auditing.CreationAuditedInitializer"/>类型的实例
            </summary>
            <param name="entity">实体</param>
            <param name="userId">用户标识</param>
            <param name="userName">用户名称</param>
        </member>
        <member name="M:Bing.Domains.Entities.Auditing.CreationAuditedInitializer.Init(System.Object,System.String,System.String)">
            <summary>
            初始化
            </summary>
            <param name="entity">实体</param>
            <param name="userId">用户标识</param>
            <param name="userName">用户名称</param>
        </member>
        <member name="M:Bing.Domains.Entities.Auditing.CreationAuditedInitializer.Init">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:Bing.Domains.Entities.Auditing.CreationAuditedInitializer.InitCreationTime">
            <summary>
            初始化创建时间
            </summary>
        </member>
        <member name="M:Bing.Domains.Entities.Auditing.CreationAuditedInitializer.InitCreator">
            <summary>
            初始化创建人
            </summary>
        </member>
        <member name="M:Bing.Domains.Entities.Auditing.CreationAuditedInitializer.InitGuid">
            <summary>
            初始化Guid
            </summary>
        </member>
        <member name="M:Bing.Domains.Entities.Auditing.CreationAuditedInitializer.InitNullableGuid">
            <summary>
            初始化可空Guid
            </summary>
        </member>
        <member name="M:Bing.Domains.Entities.Auditing.CreationAuditedInitializer.InitInt">
            <summary>
            初始化int
            </summary>
        </member>
        <member name="M:Bing.Domains.Entities.Auditing.CreationAuditedInitializer.InitNullableInt">
            <summary>
            初始化可空int
            </summary>
        </member>
        <member name="M:Bing.Domains.Entities.Auditing.CreationAuditedInitializer.InitLong">
            <summary>
            初始化Long
            </summary>
        </member>
        <member name="M:Bing.Domains.Entities.Auditing.CreationAuditedInitializer.InitNullableLong">
            <summary>
            初始化可空Long
            </summary>
        </member>
        <member name="M:Bing.Domains.Entities.Auditing.CreationAuditedInitializer.InitString">
            <summary>
            初始化字符串
            </summary>
        </member>
        <member name="T:Bing.Domains.Entities.Auditing.DeletionAuditedInitializer">
            <summary>
            删除操作审计初始化器
            </summary>
        </member>
        <member name="F:Bing.Domains.Entities.Auditing.DeletionAuditedInitializer._entity">
            <summary>
            实体
            </summary>
        </member>
        <member name="F:Bing.Domains.Entities.Auditing.DeletionAuditedInitializer._userId">
            <summary>
            用户标识
            </summary>
        </member>
        <member name="F:Bing.Domains.Entities.Auditing.DeletionAuditedInitializer._userName">
            <summary>
            用户名称
            </summary>
        </member>
        <member name="M:Bing.Domains.Entities.Auditing.DeletionAuditedInitializer.#ctor(System.Object,System.String,System.String)">
            <summary>
            初始化一个<see cref="T:Bing.Domains.Entities.Auditing.DeletionAuditedInitializer"/>类型的实例
            </summary>
            <param name="entity">实体</param>
            <param name="userId">用户标识</param>
            <param name="userName">用户名称</param>
        </member>
        <member name="M:Bing.Domains.Entities.Auditing.DeletionAuditedInitializer.Init(System.Object,System.String,System.String)">
            <summary>
            初始化
            </summary>
            <param name="entity">实体</param>
            <param name="userId">用户标识</param>
            <param name="userName">用户名称</param>
        </member>
        <member name="M:Bing.Domains.Entities.Auditing.DeletionAuditedInitializer.Init">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:Bing.Domains.Entities.Auditing.DeletionAuditedInitializer.InitDeletionTime">
            <summary>
            初始化删除时间
            </summary>
        </member>
        <member name="M:Bing.Domains.Entities.Auditing.DeletionAuditedInitializer.InitDeleter">
            <summary>
            初始化删除人
            </summary>
        </member>
        <member name="M:Bing.Domains.Entities.Auditing.DeletionAuditedInitializer.InitGuid">
            <summary>
            初始化Guid
            </summary>
        </member>
        <member name="M:Bing.Domains.Entities.Auditing.DeletionAuditedInitializer.InitNullableGuid">
            <summary>
            初始化可空Guid
            </summary>
        </member>
        <member name="M:Bing.Domains.Entities.Auditing.DeletionAuditedInitializer.InitInt">
            <summary>
            初始化int
            </summary>
        </member>
        <member name="M:Bing.Domains.Entities.Auditing.DeletionAuditedInitializer.InitNullableInt">
            <summary>
            初始化可空int
            </summary>
        </member>
        <member name="M:Bing.Domains.Entities.Auditing.DeletionAuditedInitializer.InitLong">
            <summary>
            初始化Long
            </summary>
        </member>
        <member name="M:Bing.Domains.Entities.Auditing.DeletionAuditedInitializer.InitNullableLong">
            <summary>
            初始化可空Long
            </summary>
        </member>
        <member name="M:Bing.Domains.Entities.Auditing.DeletionAuditedInitializer.InitString">
            <summary>
            初始化字符串
            </summary>
        </member>
        <member name="T:Bing.Domains.Entities.Auditing.IAudited">
            <summary>
            操作审计
            </summary>
        </member>
        <member name="T:Bing.Domains.Entities.Auditing.IAudited`1">
            <summary>
            操作审计
            </summary>
            <typeparam name="TKey">操作人编号类型</typeparam>
        </member>
        <member name="T:Bing.Domains.Entities.Auditing.IAuditor">
            <summary>
            操作人审计
            </summary>
        </member>
        <member name="T:Bing.Domains.Entities.Auditing.IAuditor`1">
            <summary>
            操作人审计
            </summary>
            <typeparam name="TKey">操作人标识类型</typeparam>
        </member>
        <member name="T:Bing.Domains.Entities.Auditing.ICreationAudited">
            <summary>
            创建操作审计
            </summary>
        </member>
        <member name="T:Bing.Domains.Entities.Auditing.ICreationAudited`1">
            <summary>
            创建操作审计
            </summary>
            <typeparam name="TKey">创建人标识类型</typeparam>
        </member>
        <member name="P:Bing.Domains.Entities.Auditing.ICreationAudited`1.CreatorId">
            <summary>
            创建人标识
            </summary>
        </member>
        <member name="T:Bing.Domains.Entities.Auditing.ICreationTime">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="P:Bing.Domains.Entities.Auditing.ICreationTime.CreationTime">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="T:Bing.Domains.Entities.Auditing.ICreator">
            <summary>
            创建人
            </summary>
        </member>
        <member name="P:Bing.Domains.Entities.Auditing.ICreator.Creator">
            <summary>
            创建人
            </summary>
        </member>
        <member name="T:Bing.Domains.Entities.Auditing.ICreatorAudited">
            <summary>
            创建人操作审计
            </summary>
        </member>
        <member name="T:Bing.Domains.Entities.Auditing.ICreatorAudited`1">
            <summary>
            创建人操作审计
            </summary>
            <typeparam name="TKey">创建人标识类型</typeparam>
        </member>
        <member name="T:Bing.Domains.Entities.Auditing.IDeleter">
            <summary>
            删除人审计
            </summary>
        </member>
        <member name="P:Bing.Domains.Entities.Auditing.IDeleter.Deleter">
            <summary>
            删除人
            </summary>
        </member>
        <member name="T:Bing.Domains.Entities.Auditing.IDeleterAudited">
            <summary>
            删除人操作审计
            </summary>
        </member>
        <member name="T:Bing.Domains.Entities.Auditing.IDeleterAudited`1">
            <summary>
            删除人操作审计
            </summary>
            <typeparam name="TKey">删除人标识类型</typeparam>
        </member>
        <member name="T:Bing.Domains.Entities.Auditing.IDeletionAudited">
            <summary>
            删除操作审计
            </summary>
        </member>
        <member name="T:Bing.Domains.Entities.Auditing.IDeletionAudited`1">
            <summary>
            删除操作审计
            </summary>
            <typeparam name="TKey">删除人编号类型</typeparam>
        </member>
        <member name="P:Bing.Domains.Entities.Auditing.IDeletionAudited`1.DeleterId">
            <summary>
            删除人编号
            </summary>
        </member>
        <member name="T:Bing.Domains.Entities.Auditing.IDeletionTime">
            <summary>
            删除时间审计
            </summary>
        </member>
        <member name="P:Bing.Domains.Entities.Auditing.IDeletionTime.DeletionTime">
            <summary>
            删除时间
            </summary>
        </member>
        <member name="T:Bing.Domains.Entities.Auditing.IFullAudited">
            <summary>
            全部操作审计
            </summary>
        </member>
        <member name="T:Bing.Domains.Entities.Auditing.IFullAudited`1">
            <summary>
            全部审计操作
            </summary>
            <typeparam name="TKey">操作人编号类型</typeparam>
        </member>
        <member name="T:Bing.Domains.Entities.Auditing.IModificationAudited">
            <summary>
            修改操作审计
            </summary>
        </member>
        <member name="T:Bing.Domains.Entities.Auditing.IModificationAudited`1">
            <summary>
            修改操作审计
            </summary>
            <typeparam name="TKey">最后修改人标识类型</typeparam>
        </member>
        <member name="P:Bing.Domains.Entities.Auditing.IModificationAudited`1.LastModifierId">
            <summary>
            最后修改人标识
            </summary>
        </member>
        <member name="T:Bing.Domains.Entities.Auditing.IModificationTime">
            <summary>
            修改时间
            </summary>
        </member>
        <member name="P:Bing.Domains.Entities.Auditing.IModificationTime.LastModificationTime">
            <summary>
            最后修改时间
            </summary>
        </member>
        <member name="T:Bing.Domains.Entities.Auditing.IModifier">
            <summary>
            修改人
            </summary>
        </member>
        <member name="P:Bing.Domains.Entities.Auditing.IModifier.LastModifier">
            <summary>
            最后修改人
            </summary>
        </member>
        <member name="T:Bing.Domains.Entities.Auditing.IModifierAudited">
            <summary>
            修改人操作审计
            </summary>
        </member>
        <member name="T:Bing.Domains.Entities.Auditing.IModifierAudited`1">
            <summary>
            修改人操作审计
            </summary>
            <typeparam name="TKey">最后修改人标识类型</typeparam>
        </member>
        <member name="T:Bing.Domains.Entities.Auditing.ModificationAuditedInitializer">
            <summary>
            修改操作审计初始化器
            </summary>
        </member>
        <member name="F:Bing.Domains.Entities.Auditing.ModificationAuditedInitializer._entity">
            <summary>
            实体
            </summary>
        </member>
        <member name="F:Bing.Domains.Entities.Auditing.ModificationAuditedInitializer._userId">
            <summary>
            用户标识
            </summary>
        </member>
        <member name="F:Bing.Domains.Entities.Auditing.ModificationAuditedInitializer._userName">
            <summary>
            用户名称
            </summary>
        </member>
        <member name="M:Bing.Domains.Entities.Auditing.ModificationAuditedInitializer.#ctor(System.Object,System.String,System.String)">
            <summary>
            初始化一个<see cref="T:Bing.Domains.Entities.Auditing.ModificationAuditedInitializer"/>类型的实例
            </summary>
            <param name="entity">实体</param>
            <param name="userId">用户标识</param>
            <param name="userName">用户名称</param>
        </member>
        <member name="M:Bing.Domains.Entities.Auditing.ModificationAuditedInitializer.Init(System.Object,System.String,System.String)">
            <summary>
            初始化
            </summary>
            <param name="entity">实体</param>
            <param name="userId">用户标识</param>
            <param name="userName">用户名称</param>
        </member>
        <member name="M:Bing.Domains.Entities.Auditing.ModificationAuditedInitializer.Init">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:Bing.Domains.Entities.Auditing.ModificationAuditedInitializer.InitLastModificationTime">
            <summary>
            初始化创建时间
            </summary>
        </member>
        <member name="M:Bing.Domains.Entities.Auditing.ModificationAuditedInitializer.InitLastModifier">
            <summary>
            初始化创建人
            </summary>
        </member>
        <member name="M:Bing.Domains.Entities.Auditing.ModificationAuditedInitializer.InitGuid">
            <summary>
            初始化Guid
            </summary>
        </member>
        <member name="M:Bing.Domains.Entities.Auditing.ModificationAuditedInitializer.InitNullableGuid">
            <summary>
            初始化可空Guid
            </summary>
        </member>
        <member name="M:Bing.Domains.Entities.Auditing.ModificationAuditedInitializer.InitInt">
            <summary>
            初始化int
            </summary>
        </member>
        <member name="M:Bing.Domains.Entities.Auditing.ModificationAuditedInitializer.InitNullableInt">
            <summary>
            初始化可空int
            </summary>
        </member>
        <member name="M:Bing.Domains.Entities.Auditing.ModificationAuditedInitializer.InitLong">
            <summary>
            初始化Long
            </summary>
        </member>
        <member name="M:Bing.Domains.Entities.Auditing.ModificationAuditedInitializer.InitNullableLong">
            <summary>
            初始化可空Long
            </summary>
        </member>
        <member name="M:Bing.Domains.Entities.Auditing.ModificationAuditedInitializer.InitString">
            <summary>
            初始化字符串
            </summary>
        </member>
        <member name="T:Bing.Domains.Entities.DeleteOperationTypes">
            <summary>
            删除操作类型
            </summary>
        </member>
        <member name="F:Bing.Domains.Entities.DeleteOperationTypes.LogicDelete">
            <summary>
            逻辑删除，也称为软删除
            </summary>
        </member>
        <member name="F:Bing.Domains.Entities.DeleteOperationTypes.Restore">
            <summary>
            还原。用于逻辑删除实体
            </summary>
        </member>
        <member name="F:Bing.Domains.Entities.DeleteOperationTypes.PhysicalDelete">
            <summary>
            物理删除，也称为硬删除
            </summary>
        </member>
        <member name="T:Bing.Domains.Entities.DomainObjectBase`1">
            <summary>
            领域对象基类
            </summary>
            <typeparam name="TObject">领域对象</typeparam>
        </member>
        <member name="F:Bing.Domains.Entities.DomainObjectBase`1._validationContext">
            <summary>
            验证上下文
            </summary>
        </member>
        <member name="F:Bing.Domains.Entities.DomainObjectBase`1._descriptionContext">
            <summary>
            描述上下文
            </summary>
        </member>
        <member name="F:Bing.Domains.Entities.DomainObjectBase`1._changeTrackingContext">
            <summary>
            变更跟踪上下文
            </summary>
        </member>
        <member name="M:Bing.Domains.Entities.DomainObjectBase`1.#ctor">
            <summary>
            初始化一个<see cref="T:Bing.Domains.Entities.DomainObjectBase`1"/>类型的实例
            </summary>
        </member>
        <member name="M:Bing.Domains.Entities.DomainObjectBase`1.SetValidateHandler(Bing.Validations.Abstractions.IValidationHandler)">
            <summary>
            设置验证处理器
            </summary>
            <param name="handler">验证处理器</param>
        </member>
        <member name="M:Bing.Domains.Entities.DomainObjectBase`1.AddStrategy(Bing.Validations.Abstractions.IValidateStrategy{`0})">
            <summary>
            添加验证策略
            </summary>
            <param name="strategy">验证策略</param>
        </member>
        <member name="M:Bing.Domains.Entities.DomainObjectBase`1.AddStrategyList(System.Collections.Generic.IEnumerable{Bing.Validations.Abstractions.IValidateStrategy{`0}})">
            <summary>
            添加验证策略集合
            </summary>
            <param name="strategies">验证策略集合</param>
        </member>
        <member name="M:Bing.Domains.Entities.DomainObjectBase`1.Validate">
            <summary>
            验证
            </summary>
        </member>
        <member name="M:Bing.Domains.Entities.DomainObjectBase`1.Validate(Bing.Validations.ValidationResultCollection)">
            <summary>
            验证并添加到验证结果集合
            </summary>
            <param name="results"></param>
        </member>
        <member name="M:Bing.Domains.Entities.DomainObjectBase`1.AddChanges(`0)">
            <summary>
            添加变更列表
            </summary>
            <param name="newObj">新对象</param>
        </member>
        <member name="M:Bing.Domains.Entities.DomainObjectBase`1.AddChange``2(System.Linq.Expressions.Expression{System.Func{`0,``0}},``1)">
            <summary>
            添加变更
            </summary>
            <typeparam name="TProperty">属性类型</typeparam>
            <typeparam name="TValue">值类型</typeparam>
            <param name="expression">属性表达式。范例：t => t.Name</param>
            <param name="newValue">新值。范例：newEntity.Name</param>
        </member>
        <member name="M:Bing.Domains.Entities.DomainObjectBase`1.AddChange``1(Bing.Domains.ChangeTracking.IChangeTrackable{``0},``0)">
            <summary>
            添加变更
            </summary>
            <param name="objectBeforeChangeTrackable">对象变更前跟踪</param>
            <param name="objectAfterChange">变更后的对象</param>
        </member>
        <member name="M:Bing.Domains.Entities.DomainObjectBase`1.AddChange``1(System.Collections.Generic.IEnumerable{Bing.Domains.ChangeTracking.IChangeTrackable{``0}},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            添加变更
            </summary>
            <param name="leftObjs">左对象列表</param>
            <param name="rightObjs">右对象列表</param>
        </member>
        <member name="M:Bing.Domains.Entities.DomainObjectBase`1.AddChange``1(System.String,System.String,``0,``0)">
            <summary>
            添加变更
            </summary>
            <typeparam name="TValue">值类型</typeparam>
            <param name="propertyName">属性名</param>
            <param name="description">描述</param>
            <param name="valueBeforeChange">变更前的值。范例：this.Name</param>
            <param name="valueAfterChange">变更后的值。范例：newEntity.Name</param>
        </member>
        <member name="M:Bing.Domains.Entities.DomainObjectBase`1.GetChanges(`0)">
            <summary>
            获取变更值集合
            </summary>
            <param name="otherObj">其它对象</param>
        </member>
        <member name="M:Bing.Domains.Entities.DomainObjectBase`1.AddDescriptions">
            <summary>
            添加描述
            </summary>
        </member>
        <member name="M:Bing.Domains.Entities.DomainObjectBase`1.AddDescription(System.String)">
            <summary>
            添加描述
            </summary>
            <param name="description">描述</param>
        </member>
        <member name="M:Bing.Domains.Entities.DomainObjectBase`1.AddDescription``1(System.String,``0)">
            <summary>
            添加描述
            </summary>
            <typeparam name="TValue">属性类型</typeparam>
            <param name="name">属性名</param>
            <param name="value">属性值</param>
        </member>
        <member name="M:Bing.Domains.Entities.DomainObjectBase`1.AddDescription``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            添加描述
            </summary>
            <typeparam name="TProperty">属性类型</typeparam>
            <param name="expression">属性表达式。范例：t => t.Name</param>
        </member>
        <member name="M:Bing.Domains.Entities.DomainObjectBase`1.AssignableType(Bing.Domains.Entities.DomainObjectBase{`0})">
            <summary>
            分配类型
            </summary>
            <param name="me">领域对象基类</param>
        </member>
        <member name="M:Bing.Domains.Entities.DomainObjectBase`1.ToString">
            <summary>
            输出对象状态
            </summary>
        </member>
        <member name="T:Bing.Domains.Entities.EntityBase`1">
            <summary>
            领域实体
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
        </member>
        <member name="M:Bing.Domains.Entities.EntityBase`1.#ctor(System.Guid)">
            <summary>
            初始化一个<see cref="T:Bing.Domains.Entities.EntityBase`1"/>类型的实例
            </summary>
            <param name="id">标识</param>
        </member>
        <member name="T:Bing.Domains.Entities.EntityBase`2">
            <summary>
            领域实体
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TKey">标识类型</typeparam>
        </member>
        <member name="P:Bing.Domains.Entities.EntityBase`2.Id">
            <summary>
            标识
            </summary>
        </member>
        <member name="P:Bing.Domains.Entities.EntityBase`2.Session">
            <summary>
            用户会话
            </summary>
        </member>
        <member name="M:Bing.Domains.Entities.EntityBase`2.#ctor(`1)">
            <summary>
            初始化一个<see cref="T:Bing.Domains.Entities.EntityBase`2"/>类型的实例
            </summary>
            <param name="id">标识</param>
        </member>
        <member name="M:Bing.Domains.Entities.EntityBase`2.Equals(System.Object)">
            <summary>
            判断两个实体是否同一数据记录的实体
            </summary>
            <param name="other">领域实体</param>
        </member>
        <member name="M:Bing.Domains.Entities.EntityBase`2.GetHashCode">
            <summary>
            用作特定类型的哈希函数。
            </summary>
        </member>
        <member name="M:Bing.Domains.Entities.EntityBase`2.op_Equality(Bing.Domains.Entities.EntityBase{`0,`1},Bing.Domains.Entities.EntityBase{`0,`1})">
            <summary>
            相等比较
            </summary>
            <param name="left">领域实体</param>
            <param name="right">领域实体</param>
        </member>
        <member name="M:Bing.Domains.Entities.EntityBase`2.op_Inequality(Bing.Domains.Entities.EntityBase{`0,`1},Bing.Domains.Entities.EntityBase{`0,`1})">
            <summary>
            不相等比较
            </summary>
            <param name="left">领域实体</param>
            <param name="right">领域实体</param>
        </member>
        <member name="M:Bing.Domains.Entities.EntityBase`2.Init">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:Bing.Domains.Entities.EntityBase`2.InitId">
            <summary>
            初始化标识
            </summary>
        </member>
        <member name="M:Bing.Domains.Entities.EntityBase`2.CreateId">
            <summary>
            创建标识
            </summary>
        </member>
        <member name="M:Bing.Domains.Entities.EntityBase`2.Validate(Bing.Validations.ValidationResultCollection)">
            <summary>
            验证
            </summary>
            <param name="results">验证结果集合</param>
        </member>
        <member name="M:Bing.Domains.Entities.EntityBase`2.ValidateId(Bing.Validations.ValidationResultCollection)">
            <summary>
            验证标识
            </summary>
            <param name="results">验证结果集合</param>
        </member>
        <member name="T:Bing.Domains.Entities.IAggregateRoot">
            <summary>
            聚合根
            </summary>
        </member>
        <member name="T:Bing.Domains.Entities.IAggregateRoot`1">
            <summary>
            聚合根
            </summary>
            <typeparam name="TKey">标识类型</typeparam>
        </member>
        <member name="T:Bing.Domains.Entities.IAggregateRoot`2">
            <summary>
            聚合根
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TKey">标识类型</typeparam>
        </member>
        <member name="T:Bing.Domains.Entities.IDelete">
            <summary>
            逻辑删除
            </summary>
        </member>
        <member name="P:Bing.Domains.Entities.IDelete.IsDeleted">
            <summary>
            是否已删除
            </summary>
        </member>
        <member name="T:Bing.Domains.Entities.IDomainObject">
            <summary>
            领域对象
            </summary>
        </member>
        <member name="T:Bing.Domains.Entities.IEntity">
            <summary>
            实体
            </summary>
        </member>
        <member name="M:Bing.Domains.Entities.IEntity.Init">
            <summary>
            初始化
            </summary>
        </member>
        <member name="T:Bing.Domains.Entities.IEntity`1">
            <summary>
            实体
            </summary>
            <typeparam name="TKey">标识类型</typeparam>
        </member>
        <member name="T:Bing.Domains.Entities.IEntity`2">
            <summary>
            实体
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TKey">标识类型</typeparam>
        </member>
        <member name="T:Bing.Domains.Entities.IExpirable">
            <summary>
            有效期
            </summary>
        </member>
        <member name="P:Bing.Domains.Entities.IExpirable.ExpireLimitedFromTime">
            <summary>
            有效期 - 开始时间
            </summary>
        </member>
        <member name="P:Bing.Domains.Entities.IExpirable.ExpireLimitedToTime">
            <summary>
            有效期 - 结束时间
            </summary>
        </member>
        <member name="M:Bing.Domains.Entities.IExpirable.IsStart">
            <summary>
            是否开始
            </summary>
        </member>
        <member name="M:Bing.Domains.Entities.IExpirable.IsStart(System.DateTime)">
            <summary>
            是否开始
            </summary>
            <param name="targetTime">目标时间</param>
        </member>
        <member name="M:Bing.Domains.Entities.IExpirable.IsExpired">
            <summary>
            是否已过期
            </summary>
        </member>
        <member name="M:Bing.Domains.Entities.IExpirable.IsExpired(System.DateTime)">
            <summary>
            是否已过期
            </summary>
            <param name="targetTime">目标时间</param>
        </member>
        <member name="M:Bing.Domains.Entities.IExpirable.IsActive">
            <summary>
            是否生效
            </summary>
        </member>
        <member name="M:Bing.Domains.Entities.IExpirable.IsActive(System.DateTime)">
            <summary>
            是否生效
            </summary>
            <param name="targetTime">目标时间</param>
        </member>
        <member name="T:Bing.Domains.Entities.IKey`1">
            <summary>
            标识
            </summary>
            <typeparam name="TKey">标识类型</typeparam>
        </member>
        <member name="P:Bing.Domains.Entities.IKey`1.Id">
            <summary>
            标识
            </summary>
        </member>
        <member name="T:Bing.Domains.Entities.ILockable">
            <summary>
            是否已锁定
            </summary>
        </member>
        <member name="P:Bing.Domains.Entities.ILockable.IsLocked">
            <summary>
            是否已锁定
            </summary>
        </member>
        <member name="T:Bing.Domains.Entities.IVersion">
            <summary>
            乐观锁
            </summary>
        </member>
        <member name="P:Bing.Domains.Entities.IVersion.Version">
            <summary>
            版本号
            </summary>
        </member>
        <member name="T:Bing.Domains.Entities.EntityExtensions">
            <summary>
            实体扩展
            </summary>
        </member>
        <member name="M:Bing.Domains.Entities.EntityExtensions.IsNullOrDeleted(Bing.Domains.Entities.IDelete)">
            <summary>
            是否空对象或是否已删除
            </summary>
            <param name="entity">逻辑删除实体</param>
        </member>
        <member name="M:Bing.Domains.Entities.EntityExtensions.UnDelete(Bing.Domains.Entities.IDelete)">
            <summary>
            取消删除。将<see cref="P:Bing.Domains.Entities.IDelete.IsDeleted"/>设为false，并且将<see cref="T:Bing.Domains.Entities.Auditing.IDeletionAudited"/>属性设置为空
            </summary>
            <param name="entity">逻辑删除实体</param>
        </member>
        <member name="T:Bing.Domains.Entities.IEntityHash">
            <summary>
            实体Hash。对实体的属性值进行Hash，确定实体是否存在变化。
            这些变化可用于系统初始化时确定是否需要进行数据同步
            </summary>
        </member>
        <member name="T:Bing.Domains.Entities.KeyListComparator`1">
            <summary>
            键列表比较器
            </summary>
            <typeparam name="TKey">标识类型</typeparam>
        </member>
        <member name="M:Bing.Domains.Entities.KeyListComparator`1.Compare(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`0})">
            <summary>
            比较
            </summary>
            <param name="newList">新实体集合</param>
            <param name="oldList">旧实体集合</param>
        </member>
        <member name="M:Bing.Domains.Entities.KeyListComparator`1.GetCreateList(System.Collections.Generic.List{`0},System.Collections.Generic.List{`0})">
            <summary>
            获取创建列表
            </summary>
            <param name="newList">新实体列表</param>
            <param name="oldList">旧实体列表</param>
        </member>
        <member name="M:Bing.Domains.Entities.KeyListComparator`1.GetUpdateList(System.Collections.Generic.List{`0},System.Collections.Generic.List{`0})">
            <summary>
            获取更新列表
            </summary>
            <param name="newList">新实体列表</param>
            <param name="oldList">旧实体列表</param>
        </member>
        <member name="M:Bing.Domains.Entities.KeyListComparator`1.GetDeleteList(System.Collections.Generic.List{`0},System.Collections.Generic.List{`0})">
            <summary>
            获取删除列表
            </summary>
            <param name="newList">新实体列表</param>
            <param name="oldList">旧实体列表</param>
        </member>
        <member name="T:Bing.Domains.Entities.KeyListCompareResult`1">
            <summary>
            键列表比较结果
            </summary>
            <typeparam name="TKey">标识类型</typeparam>
        </member>
        <member name="P:Bing.Domains.Entities.KeyListCompareResult`1.CreateList">
            <summary>
            创建列表
            </summary>
        </member>
        <member name="P:Bing.Domains.Entities.KeyListCompareResult`1.UpdateList">
            <summary>
            更新列表
            </summary>
        </member>
        <member name="P:Bing.Domains.Entities.KeyListCompareResult`1.DeleteList">
            <summary>
            删除列表
            </summary>
        </member>
        <member name="M:Bing.Domains.Entities.KeyListCompareResult`1.#ctor(System.Collections.Generic.List{`0},System.Collections.Generic.List{`0},System.Collections.Generic.List{`0})">
            <summary>
            初始化一个<see cref="T:Bing.Domains.Entities.KeyListCompareResult`1"/>类型的实例
            </summary>
            <param name="createList">创建列表</param>
            <param name="updateList">更新列表</param>
            <param name="deleteList">删除列表</param>
        </member>
        <member name="T:Bing.Domains.Entities.ListComparator`2">
            <summary>
            实体列表比较器
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TKey">标识类型</typeparam>
        </member>
        <member name="M:Bing.Domains.Entities.ListComparator`2.Compare(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`0})">
            <summary>
            比较
            </summary>
            <param name="newList">新实体集合</param>
            <param name="oldList">旧实体集合</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Domains.Entities.ListComparator`2.GetCreateList(System.Collections.Generic.List{`0},System.Collections.Generic.List{`0})">
            <summary>
            获取创建列表
            </summary>
            <param name="newList">新实体列表</param>
            <param name="oldList">旧实体列表</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Domains.Entities.ListComparator`2.GetUpdateList(System.Collections.Generic.List{`0},System.Collections.Generic.List{`0})">
            <summary>
            获取更新列表
            </summary>
            <param name="newList">新实体列表</param>
            <param name="oldList">旧实体列表</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Domains.Entities.ListComparator`2.GetDeleteList(System.Collections.Generic.List{`0},System.Collections.Generic.List{`0})">
            <summary>
            获取删除列表
            </summary>
            <param name="newList">新实体列表</param>
            <param name="oldList">旧实体列表</param>
            <returns></returns>
        </member>
        <member name="T:Bing.Domains.Entities.ListCompareResult`2">
            <summary>
            列表比较结果
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TKey">标识类型</typeparam>
        </member>
        <member name="P:Bing.Domains.Entities.ListCompareResult`2.CreateList">
            <summary>
            创建列表
            </summary>
        </member>
        <member name="P:Bing.Domains.Entities.ListCompareResult`2.UpdateList">
            <summary>
            更新列表
            </summary>
        </member>
        <member name="P:Bing.Domains.Entities.ListCompareResult`2.DeleteList">
            <summary>
            删除列表
            </summary>
        </member>
        <member name="M:Bing.Domains.Entities.ListCompareResult`2.#ctor(System.Collections.Generic.List{`0},System.Collections.Generic.List{`0},System.Collections.Generic.List{`0})">
            <summary>
            初始化一个<see cref="T:Bing.Domains.Entities.ListCompareResult`2"/>类型的实例
            </summary>
            <param name="createList">创建列表</param>
            <param name="updateList">更新列表</param>
            <param name="deleteList">删除列表</param>
        </member>
        <member name="T:Bing.Domains.Entities.Tenants.ITenant">
            <summary>
            租户
            </summary>
        </member>
        <member name="P:Bing.Domains.Entities.Tenants.ITenant.TenantId">
            <summary>
            租户编号
            </summary>
        </member>
        <member name="T:Bing.Domains.Entities.Tenants.ITenant`1">
            <summary>
            租户
            </summary>
            <typeparam name="TKey">类型</typeparam>
        </member>
        <member name="P:Bing.Domains.Entities.Tenants.ITenant`1.TenantId">
            <summary>
            租户标识
            </summary>
        </member>
        <member name="T:Bing.Domains.Entities.Trees.IEnabled">
            <summary>
            树型节点启用
            </summary>
        </member>
        <member name="P:Bing.Domains.Entities.Trees.IEnabled.Enabled">
            <summary>
            启用
            </summary>
        </member>
        <member name="T:Bing.Domains.Entities.Trees.IParentId`1">
            <summary>
            树型父标识
            </summary>
            <typeparam name="TParentId">父标识类型</typeparam>
        </member>
        <member name="P:Bing.Domains.Entities.Trees.IParentId`1.ParentId">
            <summary>
            父标识
            </summary>
        </member>
        <member name="T:Bing.Domains.Entities.Trees.IPath">
            <summary>
            树型物化路径
            </summary>
        </member>
        <member name="P:Bing.Domains.Entities.Trees.IPath.Path">
            <summary>
            路径
            </summary>
        </member>
        <member name="P:Bing.Domains.Entities.Trees.IPath.Level">
            <summary>
            级数
            </summary>
        </member>
        <member name="T:Bing.Domains.Entities.Trees.ISortId">
            <summary>
            排序号
            </summary>
        </member>
        <member name="P:Bing.Domains.Entities.Trees.ISortId.SortId">
            <summary>
            排序号
            </summary>
        </member>
        <member name="T:Bing.Domains.Entities.Trees.ITreeEntity`3">
            <summary>
            树型实体
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TKey">实体标识类型</typeparam>
            <typeparam name="TParentId">父标识类型</typeparam>
        </member>
        <member name="M:Bing.Domains.Entities.Trees.ITreeEntity`3.InitPath">
            <summary>
            初始化路径
            </summary>
        </member>
        <member name="M:Bing.Domains.Entities.Trees.ITreeEntity`3.InitPath(`0)">
            <summary>
            初始化路径
            </summary>
            <param name="parent">父节点</param>
        </member>
        <member name="M:Bing.Domains.Entities.Trees.ITreeEntity`3.GetParentIdsFromPath(System.Boolean)">
            <summary>
            从路径中获取所有上级节点编号
            </summary>
            <param name="excludeSelf">是否排除当前节点，默认排除自身</param>
        </member>
        <member name="T:Bing.Domains.Entities.Trees.TreeEntityBase`1">
            <summary>
            树型实体
            </summary>
            <typeparam name="TEntity">树型实体类型</typeparam>
        </member>
        <member name="M:Bing.Domains.Entities.Trees.TreeEntityBase`1.#ctor(System.Guid,System.String,System.Int32)">
            <summary>
            初始化一个<see cref="T:Bing.Domains.Entities.Trees.TreeEntityBase`1"/>类型的实例
            </summary>
            <param name="id">标识</param>
            <param name="path">路径</param>
            <param name="level">级数</param>
        </member>
        <member name="T:Bing.Domains.Entities.Trees.TreeEntityBase`3">
            <summary>
            树型实体
            </summary>
            <typeparam name="TEntity">树型实体类型</typeparam>
            <typeparam name="TKey">标识类型</typeparam>
            <typeparam name="TParentId">父编号类型</typeparam>
        </member>
        <member name="P:Bing.Domains.Entities.Trees.TreeEntityBase`3.ParentId">
            <summary>
            父标识
            </summary>
        </member>
        <member name="P:Bing.Domains.Entities.Trees.TreeEntityBase`3.Path">
            <summary>
            路径
            </summary>
        </member>
        <member name="P:Bing.Domains.Entities.Trees.TreeEntityBase`3.Level">
            <summary>
            级数
            </summary>
        </member>
        <member name="P:Bing.Domains.Entities.Trees.TreeEntityBase`3.SortId">
            <summary>
            排序号
            </summary>
        </member>
        <member name="P:Bing.Domains.Entities.Trees.TreeEntityBase`3.Enabled">
            <summary>
            启用
            </summary>
        </member>
        <member name="M:Bing.Domains.Entities.Trees.TreeEntityBase`3.#ctor(`1,System.String,System.Int32)">
            <summary>
            初始化一个<see cref="T:Bing.Domains.Entities.Trees.TreeEntityBase`3"/>类型的实例
            </summary>
            <param name="id">标识</param>
            <param name="path">路径</param>
            <param name="level">级数</param>
        </member>
        <member name="M:Bing.Domains.Entities.Trees.TreeEntityBase`3.InitPath">
            <summary>
            初始化路径
            </summary>
        </member>
        <member name="M:Bing.Domains.Entities.Trees.TreeEntityBase`3.InitPath(`0)">
            <summary>
            初始化路径
            </summary>
            <param name="parent">父节点</param>
        </member>
        <member name="M:Bing.Domains.Entities.Trees.TreeEntityBase`3.GetParentIdsFromPath(System.Boolean)">
            <summary>
            从路径中获取所有上级节点编号
            </summary>
            <param name="excludeSelf">是否排除当前节点，默认排除自身</param>
        </member>
        <member name="T:Bing.Domains.Entities.Trees.UpdatePathManager`3">
            <summary>
            树型路径更新服务
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TKey">实体标识类型</typeparam>
            <typeparam name="TParentId">父标识类型</typeparam>
        </member>
        <member name="F:Bing.Domains.Entities.Trees.UpdatePathManager`3._repository">
            <summary>
            仓储
            </summary>
        </member>
        <member name="M:Bing.Domains.Entities.Trees.UpdatePathManager`3.#ctor(Bing.Domains.Repositories.ITreeCompactRepository{`0,`1,`2})">
            <summary>
            初始化一个<see cref="T:Bing.Domains.Entities.Trees.UpdatePathManager`3"/>类型的实例
            </summary>
            <param name="repository">仓储</param>
        </member>
        <member name="M:Bing.Domains.Entities.Trees.UpdatePathManager`3.UpdatePathAsync(`0)">
            <summary>
            更新实体级所有下级节点路径
            </summary>
            <param name="entity">实体</param>
        </member>
        <member name="M:Bing.Domains.Entities.Trees.UpdatePathManager`3.UpdateChildrenPathAsync(`0,System.Collections.Generic.List{`0})">
            <summary>
            更新下级节点路径
            </summary>
            <param name="parent">父节点</param>
            <param name="children">子节点</param>
        </member>
        <member name="T:Bing.Domains.Repositories.ICompactRepository`1">
            <summary>
            仓储
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
        </member>
        <member name="T:Bing.Domains.Repositories.ICompactRepository`2">
            <summary>
            仓储
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TKey">实体标识类型</typeparam>
        </member>
        <member name="T:Bing.Domains.Repositories.IQueryRepository`1">
            <summary>
            查询仓储
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
        </member>
        <member name="T:Bing.Domains.Repositories.IQueryRepository`2">
            <summary>
            查询仓储
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TKey">实体标识类型</typeparam>
        </member>
        <member name="T:Bing.Domains.Repositories.IRepository">
            <summary>
            仓储
            </summary>
        </member>
        <member name="M:Bing.Domains.Repositories.IRepository.GetUnitOfWork">
            <summary>
            获取工作单元
            </summary>
        </member>
        <member name="T:Bing.Domains.Repositories.IRepository`1">
            <summary>
            仓储
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
        </member>
        <member name="T:Bing.Domains.Repositories.IRepository`2">
            <summary>
            仓储
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TKey">实体标识类型</typeparam>
        </member>
        <member name="T:Bing.Domains.Repositories.ICriteria`1">
            <summary>
            查询条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
        </member>
        <member name="M:Bing.Domains.Repositories.ICriteria`1.GetPredicate">
            <summary>
            获取查询条件
            </summary>
        </member>
        <member name="T:Bing.Domains.Repositories.IPager">
            <summary>
            分页
            </summary>
        </member>
        <member name="P:Bing.Domains.Repositories.IPager.Order">
            <summary>
            排序条件
            </summary>
        </member>
        <member name="M:Bing.Domains.Repositories.IPager.GetPageCount">
            <summary>
            获取总页数
            </summary>
        </member>
        <member name="M:Bing.Domains.Repositories.IPager.GetSkipCount">
            <summary>
            获取跳过的行数
            </summary>
        </member>
        <member name="M:Bing.Domains.Repositories.IPager.GetStartNumber">
            <summary>
            获取起始行数
            </summary>
        </member>
        <member name="M:Bing.Domains.Repositories.IPager.GetEndNumber">
            <summary>
            获取结束行数
            </summary>
        </member>
        <member name="T:Bing.Domains.Repositories.IPagerBase">
            <summary>
            分页基类
            </summary>
        </member>
        <member name="P:Bing.Domains.Repositories.IPagerBase.Page">
            <summary>
            页数，即第几页，从1开始
            </summary>
        </member>
        <member name="P:Bing.Domains.Repositories.IPagerBase.PageSize">
            <summary>
            每页显示行数
            </summary>
        </member>
        <member name="P:Bing.Domains.Repositories.IPagerBase.TotalCount">
            <summary>
            总行数
            </summary>
        </member>
        <member name="T:Bing.Domains.Repositories.IQueryBase`1">
            <summary>
            查询对象
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
        </member>
        <member name="M:Bing.Domains.Repositories.IQueryBase`1.GetOrder">
            <summary>
            获取排序条件
            </summary>
        </member>
        <member name="M:Bing.Domains.Repositories.IQueryBase`1.GetPager">
            <summary>
            获取分页参数
            </summary>
        </member>
        <member name="T:Bing.Domains.Repositories.ITreeCompactRepository`1">
            <summary>
            树型仓储
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
        </member>
        <member name="T:Bing.Domains.Repositories.ITreeCompactRepository`3">
            <summary>
            树型仓储
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TKey">实体类型标识</typeparam>
            <typeparam name="TParentId">父标识类型</typeparam>
        </member>
        <member name="M:Bing.Domains.Repositories.ITreeCompactRepository`3.GenerateSortIdAsync(`2)">
            <summary>
            生成排序号
            </summary>
            <param name="parentId">父标识</param>
        </member>
        <member name="M:Bing.Domains.Repositories.ITreeCompactRepository`3.GetAllChildrenAsync(`0)">
            <summary>
            获取全部下级实体
            </summary>
            <param name="parent">父实体</param>
        </member>
        <member name="T:Bing.Domains.Repositories.ITreeRepository`1">
            <summary>
            树型仓储
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
        </member>
        <member name="T:Bing.Domains.Repositories.ITreeRepository`3">
            <summary>
            树型仓储
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TKey">实体标识类型</typeparam>
            <typeparam name="TParentId">父标识类型</typeparam>
        </member>
        <member name="T:Bing.Domains.Repositories.Pager">
            <summary>
            分页参数
            </summary>
        </member>
        <member name="M:Bing.Domains.Repositories.Pager.#ctor">
            <summary>
            初始化一个<see cref="T:Bing.Domains.Repositories.Pager"/>类型的实例
            </summary>
        </member>
        <member name="M:Bing.Domains.Repositories.Pager.#ctor(System.Int32,System.Int32,System.String)">
            <summary>
            初始化一个<see cref="T:Bing.Domains.Repositories.Pager"/>类型的实例
            </summary>
            <param name="page">页索引</param>
            <param name="pageSize">每页显示行数，默认20</param>
            <param name="order">排序条件</param>
        </member>
        <member name="M:Bing.Domains.Repositories.Pager.#ctor(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            初始化一个<see cref="T:Bing.Domains.Repositories.Pager"/>类型的实例
            </summary>
            <param name="page">页索引</param>
            <param name="pageSize">每页显示行数，默认20</param>
            <param name="totalCount">总行数</param>
            <param name="order">排序条件</param>
        </member>
        <member name="F:Bing.Domains.Repositories.Pager._pageIndex">
            <summary>
            页索引，级第几页，从1开始
            </summary>
        </member>
        <member name="F:Bing.Domains.Repositories.Pager._description">
            <summary>
            描述
            </summary>
        </member>
        <member name="P:Bing.Domains.Repositories.Pager.Page">
            <summary>
            页索引，即第几页，从1开始
            </summary>
        </member>
        <member name="P:Bing.Domains.Repositories.Pager.PageSize">
            <summary>
            每页显示行数
            </summary>
        </member>
        <member name="P:Bing.Domains.Repositories.Pager.TotalCount">
            <summary>
            总行数
            </summary>
        </member>
        <member name="P:Bing.Domains.Repositories.Pager.Order">
            <summary>
            排序条件
            </summary>
        </member>
        <member name="M:Bing.Domains.Repositories.Pager.GetPageCount">
            <summary>
            获取总页数
            </summary>
        </member>
        <member name="M:Bing.Domains.Repositories.Pager.GetSkipCount">
            <summary>
            获取跳过的行数
            </summary>
        </member>
        <member name="M:Bing.Domains.Repositories.Pager.GetStartNumber">
            <summary>
            获取起始行数
            </summary>
        </member>
        <member name="M:Bing.Domains.Repositories.Pager.GetEndNumber">
            <summary>
            获取结束行数
            </summary>
        </member>
        <member name="M:Bing.Domains.Repositories.Pager.ToString">
            <summary>
            重写 生成字符串
            </summary>
        </member>
        <member name="M:Bing.Domains.Repositories.Pager.AddDescriptions">
            <summary>
            添加描述
            </summary>
        </member>
        <member name="M:Bing.Domains.Repositories.Pager.AddDescription(System.String)">
            <summary>
            添加描述
            </summary>
            <param name="description">描述</param>
        </member>
        <member name="M:Bing.Domains.Repositories.Pager.AddDescription``1(System.String,``0)">
            <summary>
            添加描述
            </summary>
            <typeparam name="TValue">值类型</typeparam>
            <param name="name">属性名</param>
            <param name="value">属性值</param>
        </member>
        <member name="T:Bing.Domains.Repositories.PagerList`1">
            <summary>
            分页集合
            </summary>
            <typeparam name="T">元素类型</typeparam>
        </member>
        <member name="P:Bing.Domains.Repositories.PagerList`1.Page">
            <summary>
            页索引，即第几页，从1开始
            </summary>
        </member>
        <member name="P:Bing.Domains.Repositories.PagerList`1.PageSize">
            <summary>
            每页显示行数
            </summary>
        </member>
        <member name="P:Bing.Domains.Repositories.PagerList`1.TotalCount">
            <summary>
            总行数
            </summary>
        </member>
        <member name="P:Bing.Domains.Repositories.PagerList`1.PageCount">
            <summary>
            总页数
            </summary>
        </member>
        <member name="P:Bing.Domains.Repositories.PagerList`1.Order">
            <summary>
            排序条件
            </summary>
        </member>
        <member name="P:Bing.Domains.Repositories.PagerList`1.Data">
            <summary>
            内容
            </summary>
        </member>
        <member name="P:Bing.Domains.Repositories.PagerList`1.Item(System.Int32)">
            <summary>
            索引器
            </summary>
            <param name="index">索引</param>
        </member>
        <member name="M:Bing.Domains.Repositories.PagerList`1.#ctor">
            <summary>
            初始化一个<see cref="T:Bing.Domains.Repositories.PagerList`1"/>类型的实例
            </summary>
        </member>
        <member name="M:Bing.Domains.Repositories.PagerList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            初始化一个<see cref="T:Bing.Domains.Repositories.PagerList`1"/>类型的实例
            </summary>
            <param name="data">数据</param>
        </member>
        <member name="M:Bing.Domains.Repositories.PagerList`1.#ctor(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            初始化一个<see cref="T:Bing.Domains.Repositories.PagerList`1"/>类型的实例
            </summary>
            <param name="totalCount">总行数</param>
            <param name="data">数据</param>
        </member>
        <member name="M:Bing.Domains.Repositories.PagerList`1.#ctor(System.Int32,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            初始化一个<see cref="T:Bing.Domains.Repositories.PagerList`1"/>类型的实例
            </summary>
            <param name="page">页索引</param>
            <param name="pageSize">每页显示行数</param>
            <param name="totalCount">总行数</param>
            <param name="data">数据</param>
        </member>
        <member name="M:Bing.Domains.Repositories.PagerList`1.#ctor(Bing.Domains.Repositories.IPager,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            初始化一个<see cref="T:Bing.Domains.Repositories.PagerList`1"/>类型的实例
            </summary>
            <param name="pager">查询对象</param>
            <param name="data">数据</param>
        </member>
        <member name="M:Bing.Domains.Repositories.PagerList`1.#ctor(System.Int32,System.Int32,System.Int32,System.String,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            初始化一个<see cref="T:Bing.Domains.Repositories.PagerList`1"/>类型的实例
            </summary>
            <param name="page">页索引</param>
            <param name="pageSize">每页显示行数</param>
            <param name="totalCount">总行数</param>
            <param name="order">排序条件</param>
            <param name="data">数据</param>
        </member>
        <member name="M:Bing.Domains.Repositories.PagerList`1.Add(`0)">
            <summary>
            添加元素
            </summary>
            <param name="item">元素</param>
        </member>
        <member name="M:Bing.Domains.Repositories.PagerList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            添加元素集合
            </summary>
            <param name="collection">元素集合</param>
        </member>
        <member name="M:Bing.Domains.Repositories.PagerList`1.Clear">
            <summary>
            清空
            </summary>
        </member>
        <member name="M:Bing.Domains.Repositories.PagerList`1.Convert``1(System.Func{`0,``0})">
            <summary>
            转换为分页集合
            </summary>
            <typeparam name="TResult">目标元素类型</typeparam>
            <param name="converter">转换方法</param>
        </member>
        <member name="M:Bing.Domains.Repositories.PagerList`1.Convert``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            转换为分页集合
            </summary>
            <typeparam name="TResult">目标元素类型</typeparam>
            <param name="data">数据</param>
        </member>
        <member name="T:Bing.Domains.Services.DomainServiceBase">
            <summary>
            领域服务抽象基类
            </summary>
        </member>
        <member name="M:Bing.Domains.Services.DomainServiceBase.#ctor">
            <summary>
            初始化一个<see cref="T:Bing.Domains.Services.DomainServiceBase"/>类型的实例
            </summary>
        </member>
        <member name="P:Bing.Domains.Services.DomainServiceBase.Log">
            <summary>
            日志
            </summary>
        </member>
        <member name="P:Bing.Domains.Services.DomainServiceBase.Session">
            <summary>
            用户会话
            </summary>
        </member>
        <member name="T:Bing.Domains.Services.IDomainService">
            <summary>
            领域服务
            </summary>
        </member>
        <member name="T:Bing.Domains.Services.ParameterBase">
            <summary>
            参数基类
            </summary>
        </member>
        <member name="M:Bing.Domains.Services.ParameterBase.Validate">
            <summary>
            验证
            </summary>
        </member>
        <member name="T:Bing.Domains.Values.ValueObjectBase`1">
            <summary>
            值对象
            参考地址：https://docs.microsoft.com/zh-cn/dotnet/architecture/microservices/microservice-ddd-cqrs-patterns/implement-value-objects
            </summary>
            <typeparam name="TValueObject">值对象类型</typeparam>
        </member>
        <member name="M:Bing.Domains.Values.ValueObjectBase`1.Equals(`0)">
            <summary>
            相等性比较
            </summary>
            <param name="other">值对象</param>
        </member>
        <member name="M:Bing.Domains.Values.ValueObjectBase`1.Equals(System.Object)">
            <summary>
            相等性比较
            </summary>
            <param name="other">值对象</param>
        </member>
        <member name="M:Bing.Domains.Values.ValueObjectBase`1.op_Equality(Bing.Domains.Values.ValueObjectBase{`0},Bing.Domains.Values.ValueObjectBase{`0})">
            <summary>
            相等性比较
            </summary>
            <param name="left">值对象</param>
            <param name="right">值对象</param>
        </member>
        <member name="M:Bing.Domains.Values.ValueObjectBase`1.op_Inequality(Bing.Domains.Values.ValueObjectBase{`0},Bing.Domains.Values.ValueObjectBase{`0})">
            <summary>
            不相等比较
            </summary>
            <param name="left">值对象</param>
            <param name="right">值对象</param>
        </member>
        <member name="M:Bing.Domains.Values.ValueObjectBase`1.GetHashCode">
            <summary>
            获取哈希
            </summary>
        </member>
        <member name="M:Bing.Domains.Values.ValueObjectBase`1.Clone">
            <summary>
            克隆副本
            </summary>
        </member>
        <member name="T:Bing.Events.Event">
            <summary>
            事件
            </summary>
        </member>
        <member name="F:Bing.Events.Event._eventName">
            <summary>
            事件名称
            </summary>
        </member>
        <member name="M:Bing.Events.Event.#ctor(System.String)">
            <summary>
            初始化一个<see cref="T:Bing.Events.Event"/>类型的实例
            </summary>
        </member>
        <member name="P:Bing.Events.Event.Id">
            <summary>
            事件标识
            </summary>
        </member>
        <member name="P:Bing.Events.Event.Time">
            <summary>
            事件时间
            </summary>
        </member>
        <member name="M:Bing.Events.Event.GetEventName">
            <summary>
            获取事件名称
            </summary>
        </member>
        <member name="M:Bing.Events.Event.ToString">
            <summary>
            输出日志
            </summary>
        </member>
        <member name="T:Bing.Events.EventNameAttribute">
            <summary>
            事件名称 特性
            </summary>
        </member>
        <member name="P:Bing.Events.EventNameAttribute.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="M:Bing.Events.EventNameAttribute.#ctor(System.String)">
            <summary>
            初始化一个<see cref="T:Bing.Events.EventNameAttribute"/>类型的实例
            </summary>
            <param name="name">名称</param>
        </member>
        <member name="M:Bing.Events.EventNameAttribute.GetName(System.Type)">
            <summary>
            获取名称
            </summary>
            <param name="eventType">事件类型</param>
        </member>
        <member name="M:Bing.Events.EventNameAttribute.GetNameOrDefault``1">
            <summary>
            获取名称
            </summary>
            <typeparam name="TEvent">事件类型</typeparam>
        </member>
        <member name="M:Bing.Events.EventNameAttribute.GetNameOrDefault(System.Type)">
            <summary>
            获取名称
            </summary>
            <param name="eventType">事件类型</param>
        </member>
        <member name="T:Bing.Events.GenericEventNameAttribute">
            <summary>
            泛型事件名称 特性
            </summary>
        </member>
        <member name="P:Bing.Events.GenericEventNameAttribute.Prefix">
            <summary>
            前缀
            </summary>
        </member>
        <member name="P:Bing.Events.GenericEventNameAttribute.Postfix">
            <summary>
            后缀
            </summary>
        </member>
        <member name="M:Bing.Events.GenericEventNameAttribute.GetName(System.Type)">
            <summary>
            获取名称
            </summary>
            <param name="eventType">事件类型</param>
        </member>
        <member name="T:Bing.Events.IEvent">
            <summary>
            事件
            </summary>
        </member>
        <member name="P:Bing.Events.IEvent.Id">
            <summary>
            事件标识
            </summary>
        </member>
        <member name="P:Bing.Events.IEvent.Time">
            <summary>
            事件时间
            </summary>
        </member>
        <member name="M:Bing.Events.IEvent.GetEventName">
            <summary>
            获取事件名称
            </summary>
        </member>
        <member name="T:Bing.Events.IEventNameProvider">
            <summary>
            事件名称提供程序
            </summary>
        </member>
        <member name="M:Bing.Events.IEventNameProvider.GetName(System.Type)">
            <summary>
            获取名称
            </summary>
            <param name="eventType">事件类型</param>
        </member>
        <member name="T:Bing.Events.Handlers.IEventHandler">
            <summary>
            事件处理器
            </summary>
        </member>
        <member name="T:Bing.Events.Handlers.IEventHandler`1">
            <summary>
            事件处理器
            </summary>
            <typeparam name="TEvent">事件类型</typeparam>
        </member>
        <member name="M:Bing.Events.Handlers.IEventHandler`1.HandleAsync(`0)">
            <summary>
            处理事件
            </summary>
            <param name="event">事件</param>
        </member>
        <member name="T:Bing.Events.Handlers.IEventHandlerManager">
            <summary>
            事件处理器服务
            </summary>
        </member>
        <member name="M:Bing.Events.Handlers.IEventHandlerManager.GetHandlers``1">
            <summary>
            获取事件处理器列表
            </summary>
            <typeparam name="TEvent">事件类型</typeparam>
        </member>
        <member name="T:Bing.Events.IEventBus">
            <summary>
            事件总线
            </summary>
        </member>
        <member name="M:Bing.Events.IEventBus.PublishAsync``1(``0)">
            <summary>
            发布事件
            </summary>
            <typeparam name="TEvent">事件类型</typeparam>
            <param name="event">事件</param>
        </member>
        <member name="T:Bing.Events.ISimpleEventBus">
            <summary>
            基于内存的简单事件总线
            </summary>
        </member>
        <member name="T:Bing.Events.Messages.IMessageEvent">
            <summary>
            消息事件
            </summary>
        </member>
        <member name="P:Bing.Events.Messages.IMessageEvent.Name">
            <summary>
            消息名称
            </summary>
        </member>
        <member name="P:Bing.Events.Messages.IMessageEvent.Data">
            <summary>
            事件数据
            </summary>
        </member>
        <member name="P:Bing.Events.Messages.IMessageEvent.Callback">
            <summary>
            回调名称
            </summary>
        </member>
        <member name="P:Bing.Events.Messages.IMessageEvent.Send">
            <summary>
            是否立即发送消息
            </summary>
        </member>
        <member name="T:Bing.Events.Messages.IMessageEventBus">
            <summary>
            消息事件总线
            </summary>
        </member>
        <member name="M:Bing.Events.Messages.IMessageEventBus.PublishAsync``1(``0)">
            <summary>
            发布事件
            </summary>
            <typeparam name="TEvent">事件类型</typeparam>
            <param name="event">事件</param>
        </member>
        <member name="M:Bing.Events.Messages.IMessageEventBus.PublishAsync(System.String,System.Object,System.String,System.Boolean)">
            <summary>
            发布事件
            </summary>
            <param name="name">消息名称</param>
            <param name="data">事件数据</param>
            <param name="callback">回调名称</param>
            <param name="send">是否立即发送消息</param>
        </member>
        <member name="T:Bing.Events.Messages.MessageEvent">
            <summary>
            消息事件
            </summary>
        </member>
        <member name="P:Bing.Events.Messages.MessageEvent.Name">
            <summary>
            消息名称
            </summary>
        </member>
        <member name="P:Bing.Events.Messages.MessageEvent.Data">
            <summary>
            事件数据
            </summary>
        </member>
        <member name="P:Bing.Events.Messages.MessageEvent.Callback">
            <summary>
            回调名称
            </summary>
        </member>
        <member name="P:Bing.Events.Messages.MessageEvent.Send">
            <summary>
            是否立即发送消息
            </summary>
        </member>
        <member name="M:Bing.Events.Messages.MessageEvent.ToString">
            <summary>
            输出日志
            </summary>
            <returns></returns>
        </member>
        <member name="T:Bing.ExceptionHandling.IHasErrorCode">
            <summary>
            错误码
            </summary>
        </member>
        <member name="P:Bing.ExceptionHandling.IHasErrorCode.Code">
            <summary>
            错误码
            </summary>
        </member>
        <member name="T:Bing.ExceptionHandling.IHasErrorDetails">
            <summary>
            错误详情
            </summary>
        </member>
        <member name="P:Bing.ExceptionHandling.IHasErrorDetails.Details">
            <summary>
            错误详情
            </summary>
        </member>
        <member name="T:Bing.ExceptionHandling.ILocalizeErrorMessage">
            <summary>
            本地化错误消息
            </summary>
        </member>
        <member name="T:Bing.Exceptions.BingExceptionOptions">
            <summary>
            Bing框架异常选项配置
            </summary>
        </member>
        <member name="F:Bing.Exceptions.BingExceptionOptions.EmptyFlag">
            <summary>
            空标识
            </summary>
        </member>
        <member name="F:Bing.Exceptions.BingExceptionOptions.DefaultErrorMessage">
            <summary>
            默认错误消息
            </summary>
        </member>
        <member name="F:Bing.Exceptions.BingExceptionOptions.DefaultExtendErrorCode">
            <summary>
            默认扩展错误编码
            </summary>
        </member>
        <member name="P:Bing.Exceptions.BingExceptionOptions.Message">
            <summary>
            错误消息。默认值：<see cref="F:Bing.Exceptions.BingExceptionOptions.DefaultErrorMessage"/>
            </summary>
        </member>
        <member name="P:Bing.Exceptions.BingExceptionOptions.Flag">
            <summary>
            错误标识。默认值：<see cref="F:Bing.Exceptions.BingExceptionOptions.EmptyFlag"/>
            </summary>
        </member>
        <member name="P:Bing.Exceptions.BingExceptionOptions.ErrorCode">
            <summary>
            错误码。默认值：<see cref="F:Bing.Exceptions.BingExceptionOptions.DefaultExtendErrorCode"/>
            </summary>
        </member>
        <member name="P:Bing.Exceptions.BingExceptionOptions.InnerException">
            <summary>
            内部异常
            </summary>
        </member>
        <member name="P:Bing.Exceptions.BingExceptionOptions.ExtraErrors">
            <summary>
            额外错误
            </summary>
        </member>
        <member name="T:Bing.Exceptions.ExceptionHelper">
            <summary>
            异常操作辅助类
            </summary>
        </member>
        <member name="M:Bing.Exceptions.ExceptionHelper.PrepareForRethrow(System.Exception)">
            <summary>
            捕抓异常并重新抛出
            </summary>
            <param name="exception">异常</param>
        </member>
        <member name="T:Bing.Exceptions.IBusinessException">
            <summary>
            业务异常
            </summary>
        </member>
        <member name="T:Bing.Exceptions.IUserFriendlyException">
            <summary>
            用户友好提示异常
            </summary>
        </member>
        <member name="T:Bing.Exceptions.ConcurrencyException">
            <summary>
            并发异常
            </summary>
        </member>
        <member name="F:Bing.Exceptions.ConcurrencyException._message">
            <summary>
            消息
            </summary>
        </member>
        <member name="M:Bing.Exceptions.ConcurrencyException.#ctor">
            <summary>
            初始化一个<see cref="T:Bing.Exceptions.ConcurrencyException"/>类型的实例
            </summary>
        </member>
        <member name="M:Bing.Exceptions.ConcurrencyException.#ctor(System.String)">
            <summary>
            初始化一个<see cref="T:Bing.Exceptions.ConcurrencyException"/>类型的实例
            </summary>
            <param name="message">错误消息</param>
        </member>
        <member name="M:Bing.Exceptions.ConcurrencyException.#ctor(System.Exception)">
            <summary>
            初始化一个<see cref="T:Bing.Exceptions.ConcurrencyException"/>类型的实例
            </summary>
            <param name="exception">异常</param>
        </member>
        <member name="M:Bing.Exceptions.ConcurrencyException.#ctor(System.String,System.Exception)">
            <summary>
            初始化一个<see cref="T:Bing.Exceptions.ConcurrencyException"/>类型的实例
            </summary>
            <param name="message">错误消息</param>
            <param name="exception">异常</param>
        </member>
        <member name="M:Bing.Exceptions.ConcurrencyException.#ctor(System.String,System.Exception,System.String)">
            <summary>
            初始化一个<see cref="T:Bing.Exceptions.ConcurrencyException"/>类型的实例
            </summary>
            <param name="message">错误消息</param>
            <param name="exception">异常</param>
            <param name="code">错误码</param>
        </member>
        <member name="P:Bing.Exceptions.ConcurrencyException.Message">
            <summary>
            错误消息
            </summary>
        </member>
        <member name="T:Bing.Exceptions.ConfigException">
            <summary>
            配置异常
            </summary>
        </member>
        <member name="M:Bing.Exceptions.ConfigException.#ctor">
            <summary>
            初始化一个<see cref="T:Bing.Exceptions.ConfigException"/>类型的实例
            </summary>
        </member>
        <member name="M:Bing.Exceptions.ConfigException.#ctor(System.String)">
            <summary>
            初始化一个<see cref="T:Bing.Exceptions.ConfigException"/>类型的实例
            </summary>
            <param name="configKey">配置键</param>
        </member>
        <member name="M:Bing.Exceptions.ConfigException.#ctor(System.String,System.Object[])">
            <summary>
            初始化一个<see cref="T:Bing.Exceptions.ConfigException"/>类型的实例
            </summary>
            <param name="msgFormat">格式化消息</param>
            <param name="objects">格式化参数</param>
        </member>
        <member name="M:Bing.Exceptions.ConfigException.#ctor(System.String,System.Exception)">
            <summary>
            初始化一个<see cref="T:Bing.Exceptions.ConfigException"/>类型的实例
            </summary>
            <param name="message">消息</param>
            <param name="innerException">错误来源</param>
        </member>
        <member name="M:Bing.Exceptions.ConfigException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            初始化一个<see cref="T:Bing.Exceptions.ConfigException"/>类型的实例
            </summary>
            <param name="info">消息</param>
            <param name="context">错误来源</param>
        </member>
        <member name="T:Bing.Exceptions.Prompts.ExceptionPrompt">
            <summary>
            异常提示
            </summary>
        </member>
        <member name="F:Bing.Exceptions.Prompts.ExceptionPrompt.Prompts">
            <summary>
            异常提示组件集合
            </summary>
        </member>
        <member name="P:Bing.Exceptions.Prompts.ExceptionPrompt.IsShowSystemException">
            <summary>
            是否显示系统异常消息
            </summary>
        </member>
        <member name="M:Bing.Exceptions.Prompts.ExceptionPrompt.AddPrompt(Bing.Exceptions.Prompts.IExceptionPrompt)">
            <summary>
            添加异常提示
            </summary>
            <param name="prompt">异常提示</param>
        </member>
        <member name="M:Bing.Exceptions.Prompts.ExceptionPrompt.GetPrompt(System.Exception)">
            <summary>
            获取异常提示
            </summary>
            <param name="exception">异常</param>
        </member>
        <member name="M:Bing.Exceptions.Prompts.ExceptionPrompt.GetExceptionPrompt(System.Exception)">
            <summary>
            获取异常提示
            </summary>
            <param name="exception">异常</param>
        </member>
        <member name="T:Bing.Exceptions.Prompts.IExceptionPrompt">
            <summary>
            异常提示
            </summary>
        </member>
        <member name="M:Bing.Exceptions.Prompts.IExceptionPrompt.GetPrompt(System.Exception)">
            <summary>
            获取异常提示
            </summary>
            <param name="exception">异常</param>
            <returns></returns>
        </member>
        <member name="T:Bing.Exceptions.Warning">
            <summary>
            应用程序异常
            </summary>
        </member>
        <member name="P:Bing.Exceptions.Warning.Code">
            <summary>
            错误码
            </summary>
        </member>
        <member name="M:Bing.Exceptions.Warning.#ctor(System.String)">
            <summary>
            初始化一个<see cref="T:Bing.Exceptions.Warning"/>类型的实例
            </summary>
            <param name="message">错误消息</param>
        </member>
        <member name="M:Bing.Exceptions.Warning.#ctor(System.Exception)">
            <summary>
            初始化一个<see cref="T:Bing.Exceptions.Warning"/>类型的实例
            </summary>
            <param name="exception">异常</param>
        </member>
        <member name="M:Bing.Exceptions.Warning.#ctor(System.String,System.String)">
            <summary>
            初始化一个<see cref="T:Bing.Exceptions.Warning"/>类型的实例
            </summary>
            <param name="message">错误消息</param>
            <param name="code">错误码</param>
        </member>
        <member name="M:Bing.Exceptions.Warning.#ctor(System.String,System.String,System.Exception)">
            <summary>
            初始化一个<see cref="T:Bing.Exceptions.Warning"/>类型的实例
            </summary>
            <param name="message">错误消息</param>
            <param name="code">错误码</param>
            <param name="exception">异常</param>
        </member>
        <member name="M:Bing.Exceptions.Warning.GetMessage">
            <summary>
            获取错误消息
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bing.Exceptions.Warning.GetMessage(System.Exception)">
            <summary>
            获取错误消息
            </summary>
            <param name="ex">异常</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Exceptions.Warning.AppendMessage(System.Text.StringBuilder,System.Exception)">
            <summary>
            添加异常消息
            </summary>
            <param name="result">字符串拼接器</param>
            <param name="exception">异常</param>
        </member>
        <member name="M:Bing.Exceptions.Warning.GetExceptions">
            <summary>
            获取异常列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bing.Exceptions.Warning.GetExceptions(System.Exception)">
            <summary>
            获取异常列表
            </summary>
            <param name="ex">异常</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Exceptions.Warning.AddException(System.Collections.Generic.List{System.Exception},System.Exception)">
            <summary>
            添加内部异常
            </summary>
            <param name="result">异常列表</param>
            <param name="exception">异常</param>
        </member>
        <member name="M:Bing.Exceptions.Warning.GetPrompt(Microsoft.Extensions.Logging.LogLevel)">
            <summary>
            获取友好提示
            </summary>
            <param name="level">日志级别</param>
            <returns></returns>
        </member>
        <member name="T:Bing.Localization.LocalizationContext">
            <summary>
            本地化上下文
            </summary>
        </member>
        <member name="P:Bing.Localization.LocalizationContext.ServiceProvider">
            <summary>
            服务提供程序
            </summary>
        </member>
        <member name="P:Bing.Localization.LocalizationContext.LocalizerFactory">
            <summary>
            本地化工厂
            </summary>
        </member>
        <member name="M:Bing.Localization.LocalizationContext.#ctor(System.IServiceProvider)">
            <summary>
            初始化一个<see cref="T:Bing.Localization.LocalizationContext"/>类型的实例
            </summary>
            <param name="serviceProvider">服务提供程序</param>
        </member>
        <member name="T:Bing.Mapping.IMapper">
            <summary>
            对象映射
            </summary>
        </member>
        <member name="M:Bing.Mapping.IMapper.MapTo``1(System.Object)">
            <summary>
            将对象映射为指定类型
            </summary>
            <typeparam name="TDestination">目标类型</typeparam>
            <param name="source">源对象</param>
        </member>
        <member name="M:Bing.Mapping.IMapper.MapTo``2(``0,``1)">
            <summary>
            将源对象的对象更新目标类型的对象
            </summary>
            <typeparam name="TSource">源类型</typeparam>
            <typeparam name="TDestination">目标类型</typeparam>
            <param name="source">源对象</param>
            <param name="destination">目标对象</param>
        </member>
        <member name="M:Bing.Mapping.IMapper.MapToList``1(System.Collections.IEnumerable)">
            <summary>
            将源集合映射到目标列表
            </summary>
            <typeparam name="TDestination">目标元素类型，范例：Sample，不用加List</typeparam>
            <param name="source">源集合</param>
        </member>
        <member name="M:Bing.Mapping.IMapper.ToOutput``1(System.Linq.IQueryable,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            将数据源映射为指定输出DTO的集合
            </summary>
            <typeparam name="TOutputDto">输出DTO类型</typeparam>
            <param name="source">数据源</param>
            <param name="membersToExpand">成员展开</param>
        </member>
        <member name="T:Bing.Mapping.MapperExtensions">
            <summary>
            对象映射扩展
            </summary>
        </member>
        <member name="F:Bing.Mapping.MapperExtensions._mapper">
            <summary>
            对象映射执行者
            </summary>
        </member>
        <member name="M:Bing.Mapping.MapperExtensions.SetMapper(Bing.Mapping.IMapper)">
            <summary>
            设置对象映射执行者
            </summary>
            <param name="mapper">对象映射执行者</param>
        </member>
        <member name="M:Bing.Mapping.MapperExtensions.MapTo``2(``0,``1)">
            <summary>
            将源对象映射到目标对象
            </summary>
            <typeparam name="TSource">源类型</typeparam>
            <typeparam name="TDestination">目标类型</typeparam>
            <param name="source">源对象</param>
            <param name="destination">目标对象</param>
        </member>
        <member name="M:Bing.Mapping.MapperExtensions.CheckMapper">
            <summary>
            检查映射执行者是否为空
            </summary>
        </member>
        <member name="M:Bing.Mapping.MapperExtensions.MapTo``1(System.Object)">
            <summary>
            将源对象映射到目标对象
            </summary>
            <typeparam name="TDestination">目标类型</typeparam>
            <param name="source">源对象</param>
        </member>
        <member name="M:Bing.Mapping.MapperExtensions.MapToList``1(System.Collections.IEnumerable)">
            <summary>
            将源集合映射到目标列表
            </summary>
            <typeparam name="TDestination">目标元素类型，范例：Sample，不用加List</typeparam>
            <param name="source">源集合</param>
        </member>
        <member name="M:Bing.Mapping.MapperExtensions.ToOutput``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``1,System.Object}}[])">
            <summary>
            将数据源映射为指定<typeparamref name="TOutputDto"/>集合
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TOutputDto">输出Dto类型</typeparam>
            <param name="source">源类型</param>
            <param name="membersToExpand">成员展开</param>
        </member>
        <member name="T:Bing.NullDisposable">
            <summary>
            空释放器
            </summary>
        </member>
        <member name="P:Bing.NullDisposable.Instance">
            <summary>
            空释放器实例
            </summary>
        </member>
        <member name="M:Bing.NullDisposable.#ctor">
            <summary>
            初始化一个<see cref="T:Bing.NullDisposable"/>类型的实例
            </summary>
        </member>
        <member name="M:Bing.NullDisposable.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="T:Bing.Reflections.AssemblyHelper">
            <summary>
            程序集操作辅助类
            </summary>
        </member>
        <member name="M:Bing.Reflections.AssemblyHelper.LoadAssemblies(System.String,System.IO.SearchOption)">
            <summary>
            加载程序集列表
            </summary>
            <param name="folderPath">目录路径</param>
            <param name="searchOption">查询选项</param>
        </member>
        <member name="M:Bing.Reflections.AssemblyHelper.GetAssemblyFiles(System.String,System.IO.SearchOption)">
            <summary>
            获取程序集文件列表
            </summary>
            <param name="folderPath">目录路径</param>
            <param name="searchOption">查询选项</param>
        </member>
        <member name="M:Bing.Reflections.AssemblyHelper.GetAllTypes(System.Reflection.Assembly)">
            <summary>
            获取程序集中所有类型
            </summary>
            <param name="assembly">程序集</param>
        </member>
        <member name="T:Bing.Reflections.AppDomainAllAssemblyFinder">
            <summary>
            应用程序目录程序集查找器
            </summary>
        </member>
        <member name="F:Bing.Reflections.AppDomainAllAssemblyFinder.SkipAssemblies">
            <summary>
            跳过的程序集
            </summary>
        </member>
        <member name="M:Bing.Reflections.AppDomainAllAssemblyFinder.FindAllItems">
            <summary>
            重写已实现所有项的查找
            </summary>
        </member>
        <member name="M:Bing.Reflections.AppDomainAllAssemblyFinder.LoadAssemblies(System.String)">
            <summary>
            加载程序集到当前应用程序域
            </summary>
            <param name="path">目录绝对路径</param>
        </member>
        <member name="M:Bing.Reflections.AppDomainAllAssemblyFinder.Match(System.String)">
            <summary>
            程序集是否匹配
            </summary>
            <param name="assemblyName">程序集名称</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Reflections.AppDomainAllAssemblyFinder.LoadAssemblyToAppDomain(System.String)">
            <summary>
            将程序集添加到当前应用程序域
            </summary>
            <param name="file">程序集文件</param>
        </member>
        <member name="M:Bing.Reflections.AppDomainAllAssemblyFinder.GetAssembliesFromCurrentAppDomain">
            <summary>
            从当前应用程序域获取程序集列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bing.Reflections.AppDomainAllAssemblyFinder.Match(System.Reflection.Assembly)">
            <summary>
            程序集是否匹配
            </summary>
            <param name="assembly">程序集</param>
            <returns></returns>
        </member>
        <member name="T:Bing.Reflections.BaseTypeFinderBase`1">
            <summary>
            指定基类的实现类型查找器基类
            </summary>
            <typeparam name="TBaseType">要查找类型的基类</typeparam>
        </member>
        <member name="F:Bing.Reflections.BaseTypeFinderBase`1._allAssemblyFinder">
            <summary>
            所有程序集查找器
            </summary>
        </member>
        <member name="M:Bing.Reflections.BaseTypeFinderBase`1.#ctor(Bing.Reflections.IAllAssemblyFinder)">
            <summary>
            初始化一个<see cref="T:Bing.Reflections.BaseTypeFinderBase`1"/>类型的实例
            </summary>
            <param name="allAssemblyFinder">所有程序集查找器</param>
        </member>
        <member name="M:Bing.Reflections.BaseTypeFinderBase`1.FindAllItems">
            <summary>
            重写已实现所有项的查找
            </summary>
        </member>
        <member name="M:Bing.Reflections.BaseTypeFinderBase`1.Find``1(System.Collections.Generic.List{System.Reflection.Assembly})">
            <summary>
            查找类型列表
            </summary>
            <typeparam name="T">查找类型</typeparam>
            <param name="assemblies">在指定的程序集列表中查找</param>
        </member>
        <member name="M:Bing.Reflections.BaseTypeFinderBase`1.Find(System.Type,System.Collections.Generic.List{System.Reflection.Assembly})">
            <summary>
            查找类型列表
            </summary>
            <param name="findType">查找类型</param>
            <param name="assemblies">在指定的程序集列表中查找</param>
        </member>
        <member name="T:Bing.Reflections.IAllAssemblyFinder">
            <summary>
            定义所有程序集查找器
            </summary>
        </member>
        <member name="T:Bing.Reflections.IAssemblyFinder">
            <summary>
            定义程序集查找器
            </summary>
        </member>
        <member name="T:Bing.Reflections.IMethodInfoFinder">
            <summary>
            方法信息查找器
            </summary>
        </member>
        <member name="M:Bing.Reflections.IMethodInfoFinder.Find(System.Type,System.Func{System.Reflection.MethodInfo,System.Boolean})">
            <summary>
            查找指定条件的项
            </summary>
            <param name="type">要查找的类型</param>
            <param name="predicate">筛选条件</param>
        </member>
        <member name="M:Bing.Reflections.IMethodInfoFinder.FindAll(System.Type)">
            <summary>
            查找所有项
            </summary>
            <param name="type">要查找的类型</param>
        </member>
        <member name="T:Bing.Reflections.ITypeFinder">
            <summary>
            定义类型查找器
            </summary>
        </member>
        <member name="M:Bing.Reflections.ITypeFinder.Find``1(System.Collections.Generic.List{System.Reflection.Assembly})">
            <summary>
            查找类型列表
            </summary>
            <typeparam name="T">查找类型</typeparam>
            <param name="assemblies">在指定的程序集列表中查找</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Reflections.ITypeFinder.Find(System.Type,System.Collections.Generic.List{System.Reflection.Assembly})">
            <summary>
            查找类型列表
            </summary>
            <param name="findType">查找类型</param>
            <param name="assemblies">在指定的程序集列表中查找</param>
            <returns></returns>
        </member>
        <member name="T:Bing.Reflections.TypeFinder">
            <summary>
            类型查找器
            </summary>
        </member>
        <member name="F:Bing.Reflections.TypeFinder._allAssemblyFinder">
            <summary>
            所有程序集查找器
            </summary>
        </member>
        <member name="M:Bing.Reflections.TypeFinder.#ctor(Bing.Reflections.IAllAssemblyFinder)">
            <summary>
            初始化一个<see cref="T:Bing.Reflections.TypeFinder"/>类型的实例
            </summary>
            <param name="allAssemblyFinder">所有程序集查找器</param>
        </member>
        <member name="M:Bing.Reflections.TypeFinder.FindAllItems">
            <summary>
            重写已实现所有项的查找
            </summary>
        </member>
        <member name="M:Bing.Reflections.TypeFinder.Find``1(System.Collections.Generic.List{System.Reflection.Assembly})">
            <summary>
            查找类型列表
            </summary>
            <typeparam name="T">查找类型</typeparam>
            <param name="assemblies">在指定的程序集列表中查找</param>
        </member>
        <member name="M:Bing.Reflections.TypeFinder.Find(System.Type,System.Collections.Generic.List{System.Reflection.Assembly})">
            <summary>
            查找类型列表
            </summary>
            <param name="findType">查找类型</param>
            <param name="assemblies">在指定的程序集列表中查找</param>
        </member>
        <member name="T:Bing.Release.IClearable">
            <summary>
            可清空的接口
            </summary>
        </member>
        <member name="M:Bing.Release.IClearable.Clear">
            <summary>
            清空
            </summary>
        </member>
        <member name="T:Bing.Release.ICloseable">
            <summary>
            可关闭的接口
            </summary>
        </member>
        <member name="M:Bing.Release.ICloseable.Close">
            <summary>
            关闭
            </summary>
        </member>
        <member name="E:Bing.Release.ICloseable.Closed">
            <summary>
            关闭后事件
            </summary>
        </member>
        <member name="T:Bing.Threading.ICancellationTokenProvider">
            <summary>
            异步任务取消令牌提供程序
            </summary>
        </member>
        <member name="P:Bing.Threading.ICancellationTokenProvider.Token">
            <summary>
            异步任务取消令牌
            </summary>
        </member>
        <member name="T:Bing.Threading.NoneCancellationTokenProvider">
            <summary>
            空异步任务取消令牌提供程序
            </summary>
        </member>
        <member name="F:Bing.Threading.NoneCancellationTokenProvider.Instance">
            <summary>
            空异步任务取消令牌提供程序实例
            </summary>
        </member>
        <member name="P:Bing.Threading.NoneCancellationTokenProvider.Token">
            <summary>
            异步任务取消令牌
            </summary>
        </member>
        <member name="T:Bing.Validations.Abstractions.IValidatable">
            <summary>
            验证
            </summary>
        </member>
        <member name="M:Bing.Validations.Abstractions.IValidatable.Validate">
            <summary>
            验证
            </summary>
        </member>
        <member name="T:Bing.Validations.Abstractions.IValidatable`1">
            <summary>
            验证
            </summary>
            <typeparam name="TObject">对象类型</typeparam>
        </member>
        <member name="M:Bing.Validations.Abstractions.IValidatable`1.SetValidateHandler(Bing.Validations.Abstractions.IValidationHandler)">
            <summary>
            设置验证处理器
            </summary>
            <param name="handler">验证处理器</param>
        </member>
        <member name="M:Bing.Validations.Abstractions.IValidatable`1.AddStrategy(Bing.Validations.Abstractions.IValidateStrategy{`0})">
            <summary>
            添加验证策略
            </summary>
            <param name="strategy">验证策略</param>
        </member>
        <member name="M:Bing.Validations.Abstractions.IValidatable`1.AddStrategyList(System.Collections.Generic.IEnumerable{Bing.Validations.Abstractions.IValidateStrategy{`0}})">
            <summary>
            添加验证策略集合
            </summary>
            <param name="strategies">验证策略集合</param>
        </member>
        <member name="T:Bing.Validations.Abstractions.IValidateStrategy">
            <summary>
            验证策略
            </summary>
        </member>
        <member name="P:Bing.Validations.Abstractions.IValidateStrategy.StrategyName">
            <summary>
            策略名称
            </summary>
        </member>
        <member name="T:Bing.Validations.Abstractions.IValidateStrategy`1">
            <summary>
            验证策略
            </summary>
            <typeparam name="TObject">对象类型</typeparam>
        </member>
        <member name="M:Bing.Validations.Abstractions.IValidateStrategy`1.Validate(`0)">
            <summary>
            验证
            </summary>
            <param name="obj">对象</param>
        </member>
        <member name="T:Bing.Validations.Abstractions.IValidationHandler">
            <summary>
            验证处理器
            </summary>
        </member>
        <member name="M:Bing.Validations.Abstractions.IValidationHandler.Handle(Bing.Validations.ValidationResultCollection)">
            <summary>
            处理验证错误
            </summary>
            <param name="results">验证结果集合</param>
        </member>
        <member name="T:Bing.Validations.Abstractions.IValidationResult">
            <summary>
            验证结果集合
            </summary>
        </member>
        <member name="P:Bing.Validations.Abstractions.IValidationResult.Count">
            <summary>
            验证结果计数
            </summary>
        </member>
        <member name="P:Bing.Validations.Abstractions.IValidationResult.IsValid">
            <summary>
            是否已验证
            </summary>
        </member>
        <member name="P:Bing.Validations.Abstractions.IValidationResult.ErrorCode">
            <summary>
            错误码
            </summary>
        </member>
        <member name="P:Bing.Validations.Abstractions.IValidationResult.Flag">
            <summary>
            标识
            </summary>
        </member>
        <member name="M:Bing.Validations.Abstractions.IValidationResult.Add(System.ComponentModel.DataAnnotations.ValidationResult)">
            <summary>
            添加
            </summary>
            <param name="result">验证结果</param>
        </member>
        <member name="M:Bing.Validations.Abstractions.IValidationResult.AddRange(System.Collections.Generic.IEnumerable{System.ComponentModel.DataAnnotations.ValidationResult})">
            <summary>
            添加集合
            </summary>
            <param name="results">验证结果集合</param>
        </member>
        <member name="M:Bing.Validations.Abstractions.IValidationResult.ToMessage">
            <summary>
            转换为消息
            </summary>
        </member>
        <member name="M:Bing.Validations.Abstractions.IValidationResult.ToValidationMessages">
            <summary>
            转换为验证消息集合
            </summary>
        </member>
        <member name="T:Bing.Validations.Abstractions.IValidator">
            <summary>
            验证器
            </summary>
        </member>
        <member name="T:Bing.Validations.Abstractions.IValidator`1">
            <summary>
            验证器
            </summary>
            <typeparam name="TObject">对象类型</typeparam>
        </member>
        <member name="M:Bing.Validations.Abstractions.IValidator`1.Validate(Bing.Validations.Abstractions.IValidateStrategy{`0})">
            <summary>
            验证
            </summary>
            <param name="strategy">验证策略</param>
        </member>
        <member name="M:Bing.Validations.Abstractions.IValidator`1.Validate(System.Collections.Generic.IEnumerable{Bing.Validations.Abstractions.IValidateStrategy{`0}})">
            <summary>
            验证
            </summary>
            <param name="strategies">验证策略集合</param>
        </member>
        <member name="M:Bing.Validations.Abstractions.IValidator`1.GetValidationResult">
            <summary>
            获取验证结果集合
            </summary>
        </member>
        <member name="T:Bing.Validations.Aspects.ValidAttribute">
            <summary>
            验证拦截器
            </summary>
        </member>
        <member name="M:Bing.Validations.Aspects.ValidAttribute.Invoke(AspectCore.DynamicProxy.Parameters.ParameterAspectContext,AspectCore.DynamicProxy.Parameters.ParameterAspectDelegate)">
            <summary>
            执行
            </summary>
        </member>
        <member name="M:Bing.Validations.Aspects.ValidAttribute.Validate(AspectCore.DynamicProxy.Parameters.Parameter)">
            <summary>
            验证
            </summary>
            <param name="parameter">参数</param>
        </member>
        <member name="M:Bing.Validations.Aspects.ValidAttribute.ValidateCollection(AspectCore.DynamicProxy.Parameters.Parameter)">
            <summary>
            验证集合
            </summary>
            <param name="parameter">参数</param>
        </member>
        <member name="T:Bing.Validations.DataAnnotationValidation">
            <summary>
            DataAnnotation 验证操作
            </summary>
        </member>
        <member name="M:Bing.Validations.DataAnnotationValidation.Validate(System.Object)">
            <summary>
            验证
            </summary>
            <param name="target">验证目标</param>
        </member>
        <member name="T:Bing.Validations.ValidationContext`1">
            <summary>
            验证上下文
            </summary>
            <typeparam name="TObject">对象类型</typeparam>
        </member>
        <member name="P:Bing.Validations.ValidationContext`1.Instance">
            <summary>
            对象实例
            </summary>
        </member>
        <member name="P:Bing.Validations.ValidationContext`1.ValidateStrategyList">
            <summary>
            验证策略列表
            </summary>
        </member>
        <member name="P:Bing.Validations.ValidationContext`1.ResultCollection">
            <summary>
            验证结果集合
            </summary>
        </member>
        <member name="P:Bing.Validations.ValidationContext`1.Handle">
            <summary>
            处理操作
            </summary>
        </member>
        <member name="M:Bing.Validations.ValidationContext`1.#ctor(`0)">
            <summary>
            初始化一个<see cref="T:Bing.Validations.ValidationContext`1"/>类型的实例
            </summary>
            <param name="instanceToValidate">验证实例</param>
        </member>
        <member name="P:Bing.Validations.ValidationContext`1.IsValid">
            <summary>
            是否已验证
            </summary>
        </member>
        <member name="M:Bing.Validations.ValidationContext`1.AddStrategy(Bing.Validations.Abstractions.IValidateStrategy{`0})">
            <summary>
            添加验证策略
            </summary>
            <param name="strategy">验证策略</param>
        </member>
        <member name="M:Bing.Validations.ValidationContext`1.AddStrategyList(System.Collections.Generic.IEnumerable{Bing.Validations.Abstractions.IValidateStrategy{`0}})">
            <summary>
            添加验证策略列表
            </summary>
            <param name="strategies">验证策略列表</param>
        </member>
        <member name="M:Bing.Validations.ValidationContext`1.SetHandler(System.Action{Bing.Validations.ValidationHandleOperation})">
            <summary>
            设置验证处理器
            </summary>
            <param name="action">操作</param>
        </member>
        <member name="M:Bing.Validations.ValidationContext`1.RaiseException``1(System.Action{``0,Bing.Validations.ValidationResultCollection})">
            <summary>
            引发异常
            </summary>
            <typeparam name="TException">异常类型</typeparam>
            <param name="appendAction">追加操作</param>
        </member>
        <member name="M:Bing.Validations.ValidationContext`1.Validate(System.Action{Bing.Validations.ValidationResultCollection})">
            <summary>
            验证
            </summary>
            <param name="appendAction">追加操作</param>
        </member>
        <member name="M:Bing.Validations.ValidationContext`1.ValidateAndRaise``1(System.Action{``0,Bing.Validations.ValidationResultCollection})">
            <summary>
            验证并引发异常
            </summary>
            <typeparam name="TException">异常类型</typeparam>
            <param name="appendAction">追加操作</param>
        </member>
        <member name="M:Bing.Validations.ValidationContext`1.GetValidationResultCollection">
            <summary>
            获取验证结果集合
            </summary>
            <returns></returns>
        </member>
        <member name="T:Bing.Validations.ValidationException">
            <summary>
            验证异常
            </summary>
        </member>
        <member name="F:Bing.Validations.ValidationException.ValidationFlag">
            <summary>
            验证标识
            </summary>
        </member>
        <member name="F:Bing.Validations.ValidationException.ValidationMessageInfoKey">
            <summary>
            验证消息键
            </summary>
        </member>
        <member name="F:Bing.Validations.ValidationException._validationMessage">
            <summary>
            验证消息集合
            </summary>
        </member>
        <member name="M:Bing.Validations.ValidationException.#ctor">
            <summary>
            初始化一个<see cref="T:Bing.Validations.ValidationException"/>类型的实例
            </summary>
        </member>
        <member name="M:Bing.Validations.ValidationException.#ctor(System.String)">
            <summary>
            初始化一个<see cref="T:Bing.Validations.ValidationException"/>类型的实例
            </summary>
            <param name="message">错误消息</param>
        </member>
        <member name="M:Bing.Validations.ValidationException.#ctor(System.String,System.String)">
            <summary>
            初始化一个<see cref="T:Bing.Validations.ValidationException"/>类型的实例
            </summary>
            <param name="message">错误消息</param>
            <param name="flag">错误标识</param>
        </member>
        <member name="M:Bing.Validations.ValidationException.#ctor(System.String,System.Exception)">
            <summary>
            初始化一个<see cref="T:Bing.Validations.ValidationException"/>类型的实例
            </summary>
            <param name="message">错误消息</param>
            <param name="innerException">内部异常</param>
        </member>
        <member name="M:Bing.Validations.ValidationException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            初始化一个<see cref="T:Bing.Validations.ValidationException"/>类型的实例
            </summary>
            <param name="message">错误消息</param>
            <param name="flag">错误标识</param>
            <param name="innerException">内部异常</param>
        </member>
        <member name="M:Bing.Validations.ValidationException.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            初始化一个<see cref="T:Bing.Validations.ValidationException"/>类型的实例
            </summary>
            <param name="validationMessage">验证消息集合</param>
        </member>
        <member name="M:Bing.Validations.ValidationException.#ctor(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            初始化一个<see cref="T:Bing.Validations.ValidationException"/>类型的实例
            </summary>
            <param name="validationMessage">验证消息集合</param>
            <param name="flag">错误标识</param>
        </member>
        <member name="M:Bing.Validations.ValidationException.#ctor(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            初始化一个<see cref="T:Bing.Validations.ValidationException"/>类型的实例
            </summary>
            <param name="message">错误消息</param>
            <param name="validationMessage">验证消息集合</param>
        </member>
        <member name="M:Bing.Validations.ValidationException.#ctor(System.String,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            初始化一个<see cref="T:Bing.Validations.ValidationException"/>类型的实例
            </summary>
            <param name="message">错误消息</param>
            <param name="validationMessage">验证消息集合</param>
            <param name="flag">错误标识</param>
        </member>
        <member name="M:Bing.Validations.ValidationException.#ctor(System.Int64,System.String)">
            <summary>
            初始化一个<see cref="T:Bing.Validations.ValidationException"/>类型的实例
            </summary>
            <param name="errorCode">错误码</param>
            <param name="message">错误消息</param>
        </member>
        <member name="M:Bing.Validations.ValidationException.#ctor(System.Int64,System.String,System.String)">
            <summary>
            初始化一个<see cref="T:Bing.Validations.ValidationException"/>类型的实例
            </summary>
            <param name="errorCode">错误码</param>
            <param name="message">错误消息</param>
            <param name="flag">错误标识</param>
        </member>
        <member name="M:Bing.Validations.ValidationException.#ctor(System.Int64,System.String,System.Exception)">
            <summary>
            初始化一个<see cref="T:Bing.Validations.ValidationException"/>类型的实例
            </summary>
            <param name="errorCode">错误码</param>
            <param name="message">错误消息</param>
            <param name="innerException">内部异常</param>
        </member>
        <member name="M:Bing.Validations.ValidationException.#ctor(System.Int64,System.String,System.String,System.Exception)">
            <summary>
            初始化一个<see cref="T:Bing.Validations.ValidationException"/>类型的实例
            </summary>
            <param name="errorCode">错误码</param>
            <param name="message">错误消息</param>
            <param name="flag">错误标识</param>
            <param name="innerException">内部异常</param>
        </member>
        <member name="M:Bing.Validations.ValidationException.#ctor(System.Int64,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            初始化一个<see cref="T:Bing.Validations.ValidationException"/>类型的实例
            </summary>
            <param name="errorCode">错误码</param>
            <param name="validationMessage">验证消息集合</param>
        </member>
        <member name="M:Bing.Validations.ValidationException.#ctor(System.Int64,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            初始化一个<see cref="T:Bing.Validations.ValidationException"/>类型的实例
            </summary>
            <param name="errorCode">错误码</param>
            <param name="validationMessage">验证消息集合</param>
            <param name="flag">错误标识</param>
        </member>
        <member name="M:Bing.Validations.ValidationException.#ctor(System.Int64,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            初始化一个<see cref="T:Bing.Validations.ValidationException"/>类型的实例
            </summary>
            <param name="errorCode">错误码</param>
            <param name="message">错误消息</param>
            <param name="validationMessage">验证消息集合</param>
        </member>
        <member name="M:Bing.Validations.ValidationException.#ctor(System.Int64,System.String,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            初始化一个<see cref="T:Bing.Validations.ValidationException"/>类型的实例
            </summary>
            <param name="errorCode">错误码</param>
            <param name="message">错误消息</param>
            <param name="validationMessage">验证消息集合</param>
            <param name="flag">错误标识</param>
        </member>
        <member name="M:Bing.Validations.ValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            初始化一个<see cref="T:Bing.Validations.ValidationException"/>类型的实例
            </summary>
            <param name="info">序列化信息</param>
            <param name="streamingContext">流上下文</param>
        </member>
        <member name="M:Bing.Validations.ValidationException.#ctor(Bing.Exceptions.BingExceptionOptions)">
            <summary>
            初始化一个<see cref="T:Bing.Validations.ValidationException"/>类型的实例
            </summary>
            <param name="options">Bing框架异常选项配置</param>
        </member>
        <member name="P:Bing.Validations.ValidationException.ValidationMessage">
            <summary>
            验证消息集合
            </summary>
        </member>
        <member name="M:Bing.Validations.ValidationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            获取对象数据
            </summary>
            <param name="info">序列化信息</param>
            <param name="streamingContext">流上下文</param>
        </member>
        <member name="M:Bing.Validations.ValidationException.GetFullMessage">
            <summary>
            获取完整的消息
            </summary>
        </member>
        <member name="M:Bing.Validations.ValidationException.ToString">
            <summary>
            输出字符串
            </summary>
        </member>
        <member name="T:Bing.Validations.ValidationExceptionExtensions">
            <summary>
            验证异常扩展
            </summary>
        </member>
        <member name="M:Bing.Validations.ValidationExceptionExtensions.ToException``1(Bing.Validations.ValidationResultCollection,System.Action{``0,Bing.Validations.ValidationResultCollection})">
            <summary>
            转换异常
            </summary>
            <typeparam name="TException">异常类型</typeparam>
            <param name="resultCollection">验证结果集合</param>
            <param name="appendAction">追加操作</param>
        </member>
        <member name="M:Bing.Validations.ValidationExceptionExtensions.ToException(Bing.Validations.ValidationResultCollection,System.Action{Bing.Validations.ValidationException,Bing.Validations.ValidationResultCollection})">
            <summary>
            转换为异常
            </summary>
            <param name="resultCollection">验证结果集合</param>
            <param name="appendAction">追加操作</param>
        </member>
        <member name="M:Bing.Validations.ValidationExceptionExtensions.ToException``1(Bing.Validations.Abstractions.IValidationResult,System.Action{``0,Bing.Validations.ValidationResultCollection})">
            <summary>
            转换为异常
            </summary>
            <typeparam name="TException">异常类型</typeparam>
            <param name="result">验证结果</param>
            <param name="appendAction">追加操作</param>
        </member>
        <member name="M:Bing.Validations.ValidationExceptionExtensions.ToException(Bing.Validations.Abstractions.IValidationResult,System.Action{Bing.Validations.ValidationException,Bing.Validations.ValidationResultCollection})">
            <summary>
            转换为异常
            </summary>
            <param name="result">验证结果</param>
            <param name="appendAction">追加操作</param>
        </member>
        <member name="M:Bing.Validations.ValidationExceptionExtensions.CreateBasicException``1(Bing.Validations.Abstractions.IValidationResult)">
            <summary>
            创建基础异常
            </summary>
            <param name="result">验证结果</param>
        </member>
        <member name="M:Bing.Validations.ValidationExceptionExtensions.CreateValidationException(Bing.Validations.Abstractions.IValidationResult)">
            <summary>
            创建验证异常
            </summary>
            <param name="result">验证结果</param>
        </member>
        <member name="M:Bing.Validations.ValidationExceptionExtensions.RaiseException``1(Bing.Validations.ValidationResultCollection,System.Action{``0,Bing.Validations.ValidationResultCollection})">
            <summary>
            引发异常
            </summary>
            <typeparam name="TException">异常类型</typeparam>
            <param name="resultCollection">验证结果集合</param>
            <param name="appendAction">追加操作</param>
        </member>
        <member name="M:Bing.Validations.ValidationExceptionExtensions.RaiseException(Bing.Validations.ValidationResultCollection,System.Action{Bing.Validations.ValidationException,Bing.Validations.ValidationResultCollection})">
            <summary>
            引发异常
            </summary>
            <param name="resultCollection">验证结果集合</param>
            <param name="appendAction">追加操作</param>
        </member>
        <member name="T:Bing.Validations.ValidationHandleExceptionExtensions">
            <summary>
            验证处理异常扩展
            </summary>
        </member>
        <member name="M:Bing.Validations.ValidationHandleExceptionExtensions.Handle(Bing.Validations.ValidationResultCollection)">
            <summary>
            处理
            </summary>
            <param name="collection">验证结果集合</param>
        </member>
        <member name="M:Bing.Validations.ValidationHandleExceptionExtensions.HandleAll(Bing.Validations.ValidationHandleOperation,Bing.Validations.Abstractions.IValidationHandler)">
            <summary>
            处理所有验证
            </summary>
            <param name="op">验证处理操作</param>
            <param name="handler">验证处理器</param>
        </member>
        <member name="T:Bing.Validations.ValidationHandleOperation">
            <summary>
            验证处理操作
            </summary>
        </member>
        <member name="F:Bing.Validations.ValidationHandleOperation._collection">
            <summary>
            验证结果集合
            </summary>
        </member>
        <member name="M:Bing.Validations.ValidationHandleOperation.#ctor(Bing.Validations.ValidationResultCollection)">
            <summary>
            初始化一个<see cref="T:Bing.Validations.ValidationHandleOperation"/>
            </summary>
            <param name="collection">验证结果集合</param>
        </member>
        <member name="M:Bing.Validations.ValidationHandleOperation.Handle(Bing.Validations.Abstractions.IValidationHandler,System.Action{System.Collections.Generic.IEnumerable{System.ComponentModel.DataAnnotations.ValidationResult}})">
            <summary>
            处理
            </summary>
            <param name="handler">验证处理器</param>
            <param name="filterFunc">过滤函数</param>
        </member>
        <member name="M:Bing.Validations.ValidationHandleOperation.Handle(Bing.Validations.Abstractions.IValidationHandler,System.String)">
            <summary>
            处理
            </summary>
            <param name="handler">验证处理器</param>
            <param name="strategyName">策略名称</param>
        </member>
        <member name="M:Bing.Validations.ValidationHandleOperation.RaiseException``1(System.Action{``0,Bing.Validations.ValidationResultCollection})">
            <summary>
            引发异常
            </summary>
            <typeparam name="TException">异常类型</typeparam>
            <param name="appendAction">追加操作</param>
        </member>
        <member name="T:Bing.Validations.ValidationResultCollection">
            <summary>
            验证结果集合
            </summary>
        </member>
        <member name="F:Bing.Validations.ValidationResultCollection.NoName">
            <summary>
            无名称
            </summary>
        </member>
        <member name="F:Bing.Validations.ValidationResultCollection._results">
            <summary>
            验证结果集合
            </summary>
        </member>
        <member name="F:Bing.Validations.ValidationResultCollection._resultsFlaggedByStrategy">
            <summary>
            策略验证结果。策略 - 验证结果集合
            </summary>
        </member>
        <member name="M:Bing.Validations.ValidationResultCollection.#ctor">
            <summary>
            初始化一个<see cref="T:Bing.Validations.ValidationResultCollection"/>类型的实例
            </summary>
        </member>
        <member name="M:Bing.Validations.ValidationResultCollection.#ctor(System.ComponentModel.DataAnnotations.ValidationResult)">
            <summary>
            初始化一个<see cref="T:Bing.Validations.ValidationResultCollection"/>类型的实例
            </summary>
            <param name="result">验证结果</param>
        </member>
        <member name="M:Bing.Validations.ValidationResultCollection.#ctor(System.ComponentModel.DataAnnotations.ValidationResult,System.String)">
            <summary>
            初始化一个<see cref="T:Bing.Validations.ValidationResultCollection"/>类型的实例
            </summary>
            <param name="result">验证结果</param>
            <param name="strategyName">策略名称</param>
        </member>
        <member name="M:Bing.Validations.ValidationResultCollection.#ctor(System.Collections.Generic.IEnumerable{System.ComponentModel.DataAnnotations.ValidationResult})">
            <summary>
            初始化一个<see cref="T:Bing.Validations.ValidationResultCollection"/>类型的实例
            </summary>
            <param name="results">验证结果集合</param>
        </member>
        <member name="M:Bing.Validations.ValidationResultCollection.#ctor(System.Collections.Generic.IEnumerable{System.ComponentModel.DataAnnotations.ValidationResult},System.String)">
            <summary>
            初始化一个<see cref="T:Bing.Validations.ValidationResultCollection"/>类型的实例
            </summary>
            <param name="results">验证结果集合</param>
            <param name="strategyName">策略名称</param>
        </member>
        <member name="M:Bing.Validations.ValidationResultCollection.#ctor(Bing.Validations.ValidationResultCollection)">
            <summary>
            初始化一个<see cref="T:Bing.Validations.ValidationResultCollection"/>类型的实例
            </summary>
            <param name="collection">验证结果集合</param>
        </member>
        <member name="P:Bing.Validations.ValidationResultCollection.Count">
            <summary>
            验证结果计数
            </summary>
        </member>
        <member name="P:Bing.Validations.ValidationResultCollection.IsValid">
            <summary>
            是否已验证
            </summary>
        </member>
        <member name="P:Bing.Validations.ValidationResultCollection.ErrorCode">
            <summary>
            错误码
            </summary>
        </member>
        <member name="P:Bing.Validations.ValidationResultCollection.Flag">
            <summary>
            标识
            </summary>
        </member>
        <member name="P:Bing.Validations.ValidationResultCollection.Success">
            <summary>
            成功验证结果集合
            </summary>
        </member>
        <member name="M:Bing.Validations.ValidationResultCollection.Add(System.ComponentModel.DataAnnotations.ValidationResult)">
            <summary>
            添加
            </summary>
            <param name="result">验证结果</param>
        </member>
        <member name="M:Bing.Validations.ValidationResultCollection.AddRange(System.Collections.Generic.IEnumerable{System.ComponentModel.DataAnnotations.ValidationResult})">
            <summary>
            添加集合
            </summary>
            <param name="results">验证结果集合</param>
        </member>
        <member name="M:Bing.Validations.ValidationResultCollection.ToMessage">
            <summary>
            转换为消息
            </summary>
        </member>
        <member name="M:Bing.Validations.ValidationResultCollection.ToValidationMessages">
            <summary>
            转换为验证消息集合
            </summary>
        </member>
        <member name="M:Bing.Validations.ValidationResultCollection.GetErrorString(System.Int32)">
            <summary>
            获取错误字符串
            </summary>
            <param name="spaceCount">空格数量</param>
        </member>
        <member name="M:Bing.Validations.ValidationResultCollection.GetEnumerator">
            <summary>
            获取迭代器
            </summary>
        </member>
        <member name="M:Bing.Validations.ValidationResultCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            获取迭代器
            </summary>
        </member>
        <member name="M:Bing.Validations.ValidationResultCollection.ToString">
            <summary>
            输出字符串
            </summary>
        </member>
        <member name="M:Bing.Validations.ValidationResultCollection.UpdateResultFlaggedByStrategy(Bing.Validations.ValidationResultCollection)">
            <summary>
            更新指定策略的验证结果
            </summary>
            <param name="collection">验证结果集合</param>
        </member>
        <member name="M:Bing.Validations.ValidationResultCollection.UpdateResultFlaggedByStrategy(System.String,System.Collections.Generic.List{System.ComponentModel.DataAnnotations.ValidationResult})">
            <summary>
            更新指定策略的验证结果
            </summary>
            <param name="name">策略名称</param>
            <param name="results">验证结果集合</param>
        </member>
        <member name="M:Bing.Validations.ValidationResultCollection.UpdateResultFlaggedByStrategy(System.String,System.ComponentModel.DataAnnotations.ValidationResult)">
            <summary>
            更新指定策略的验证结果
            </summary>
            <param name="name">策略名称</param>
            <param name="result">验证结果</param>
        </member>
        <member name="M:Bing.Validations.ValidationResultCollection.Filter(System.Action{System.Collections.Generic.IEnumerable{System.ComponentModel.DataAnnotations.ValidationResult}})">
            <summary>
            过滤
            </summary>
            <param name="filter">过滤操作</param>
        </member>
        <member name="M:Bing.Validations.ValidationResultCollection.Filter(System.String)">
            <summary>
            过滤
            </summary>
            <param name="strategyName">策略名称</param>
        </member>
        <member name="T:Bing.Validations.Handlers.NothingHandler">
            <summary>
            验证失败，不做任何处理
            </summary>
        </member>
        <member name="M:Bing.Validations.Handlers.NothingHandler.Handle(Bing.Validations.ValidationResultCollection)">
            <summary>
            处理验证错误
            </summary>
            <param name="results">验证结果集合</param>
        </member>
        <member name="T:Bing.Validations.Handlers.ThrowHandler">
            <summary>
            验证失败，抛出异常 - 默认验证处理器
            </summary>
        </member>
        <member name="M:Bing.Validations.Handlers.ThrowHandler.Handle(Bing.Validations.ValidationResultCollection)">
            <summary>
            处理验证错误
            </summary>
            <param name="results">验证错误集合</param>
        </member>
        <member name="T:Bing.Validations.IValidation">
            <summary>
            验证操作
            </summary>
        </member>
        <member name="M:Bing.Validations.IValidation.Validate">
            <summary>
            验证
            </summary>
        </member>
        <member name="T:Bing.Validations.IValidationRule">
            <summary>
            验证规则
            </summary>
        </member>
        <member name="M:Bing.Validations.IValidationRule.Validate">
            <summary>
            验证
            </summary>
        </member>
        <member name="T:Bing.Validations.Validators.ValidatePattern">
            <summary>
            验证正则
            </summary>
        </member>
        <member name="F:Bing.Validations.Validators.ValidatePattern.MobilePhonePattern">
            <summary>
            手机号验证正则表达式
            </summary>
        </member>
        <member name="F:Bing.Validations.Validators.ValidatePattern.IdCardPattern">
            <summary>
            身份证验证正则表达式
            </summary>
        </member>
        <member name="F:Bing.Validations.Validators.ValidatePattern.ChinesePattern">
            <summary>
            中文验证正则表达式
            </summary>
        </member>
        <member name="F:Bing.Validations.Validators.ValidatePattern.UrlPattern">
            <summary>
            Url验证正则表达式
            </summary>
        </member>
        <member name="F:Bing.Validations.Validators.ValidatePattern.LetterPattern">
            <summary>
            英文字母验证正则表达式
            </summary>
        </member>
        <member name="F:Bing.Validations.Validators.ValidatePattern.PlateNumberOfChinaPatter">
            <summary>
            车牌号验证正则表达式
            </summary>
        </member>
        <member name="F:Bing.Validations.Validators.ValidatePattern.PostalCodeOfChinaPatter">
            <summary>
            邮政编码验证正则表达式
            </summary>
        </member>
        <member name="F:Bing.Validations.Validators.ValidatePattern.QQPatter">
            <summary>
            QQ验证正则表达式
            </summary>
        </member>
        <member name="F:Bing.Validations.Validators.ValidatePattern.WechatNoPatter">
            <summary>
            微信号验证正则表达式
            </summary>
        </member>
        <member name="F:Bing.Validations.Validators.ValidatePattern.TelNoOfChinaPatter">
            <summary>
            固话验证正则表达式
            </summary>
        </member>
        <member name="T:Bing.Configurations.BingConfig">
            <summary>
            Bing 框架配置
            </summary>
        </member>
        <member name="F:Bing.Configurations.BingConfig._instance">
            <summary>
            框架配置实例
            </summary>
        </member>
        <member name="F:Bing.Configurations.BingConfig._lockObj">
            <summary>
            对象锁
            </summary>
        </member>
        <member name="P:Bing.Configurations.BingConfig.Current">
            <summary>
            当前框架配置
            </summary>
        </member>
        <member name="F:Bing.Configurations.BingConfig.ValidationHandler">
            <summary>
            验证
            </summary>
        </member>
        <member name="P:Bing.Configurations.BingConfig.EnabledDebug">
            <summary>
            是否启用调试日志
            </summary>
        </member>
        <member name="P:Bing.Configurations.BingConfig.EnabledTrace">
            <summary>
            是否启用跟踪日志
            </summary>
        </member>
        <member name="T:Bing.Configurations.ConfigurationBuilderOptions">
            <summary>
            配置构建器选项
            </summary>
        </member>
        <member name="P:Bing.Configurations.ConfigurationBuilderOptions.FileName">
            <summary>
            文件名。默认值：appsettings
            </summary>
        </member>
        <member name="P:Bing.Configurations.ConfigurationBuilderOptions.EnvironmentName">
            <summary>
            环境名称。支持：Development(开发环境)、Staging(演示环境)、Production(生产环境)
            </summary>
        </member>
        <member name="P:Bing.Configurations.ConfigurationBuilderOptions.BasePath">
            <summary>
            基本路径。用于读取配置文件的根路径
            </summary>
        </member>
        <member name="T:Bing.Configurations.ConfigurationUtil">
            <summary>
            配置工具
            </summary>
        </member>
        <member name="M:Bing.Configurations.ConfigurationUtil.BuildConfiguration(Bing.Configurations.ConfigurationBuilderOptions)">
            <summary>
            构建配置
            </summary>
            <param name="options">配置构建起选项</param>
            <returns></returns>
        </member>
        <member name="T:Bing.Configurations.DefaultConfigurationAccessor">
            <summary>
            默认配置访问器
            </summary>
        </member>
        <member name="P:Bing.Configurations.DefaultConfigurationAccessor.Empty">
            <summary>
            空
            </summary>
        </member>
        <member name="P:Bing.Configurations.DefaultConfigurationAccessor.Configuration">
            <summary>
            配置
            </summary>
        </member>
        <member name="M:Bing.Configurations.DefaultConfigurationAccessor.#cctor">
            <summary>
            静态构造函数
            </summary>
        </member>
        <member name="M:Bing.Configurations.DefaultConfigurationAccessor.#ctor(Microsoft.Extensions.Configuration.IConfigurationRoot)">
            <summary>
            初始化一耳光<see cref="T:Bing.Configurations.DefaultConfigurationAccessor"/>类型的实例
            </summary>
            <param name="configuration">配置</param>
        </member>
        <member name="T:Bing.Configurations.IConfigurationAccessor">
            <summary>
            配置访问器
            </summary>
        </member>
        <member name="P:Bing.Configurations.IConfigurationAccessor.Configuration">
            <summary>
            配置
            </summary>
        </member>
        <member name="T:Bing.DomainExtensions">
            <summary>
            领域实体扩展
            </summary>
        </member>
        <member name="M:Bing.DomainExtensions.Compare``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            比较
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="newList">新实体集合</param>
            <param name="oldList">旧实体集合</param>
            <returns></returns>
        </member>
        <member name="M:Bing.DomainExtensions.Compare``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            比较
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TKey">标识类型</typeparam>
            <param name="newList">新实体集合</param>
            <param name="oldList">旧实体集合</param>
            <returns></returns>
        </member>
        <member name="M:Bing.DomainExtensions.Compare(System.Collections.Generic.IEnumerable{System.Guid},System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            比较
            </summary>
            <param name="newList">新实体标识集合</param>
            <param name="oldList">旧实体标识集合</param>
            <returns></returns>
        </member>
        <member name="M:Bing.DomainExtensions.Compare(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            比较
            </summary>
            <param name="newList">新实体标识集合</param>
            <param name="oldList">旧实体标识集合</param>
            <returns></returns>
        </member>
        <member name="M:Bing.DomainExtensions.Compare(System.Collections.Generic.IEnumerable{System.Int32},System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            比较
            </summary>
            <param name="newList">新实体标识集合</param>
            <param name="oldList">旧实体标识集合</param>
            <returns></returns>
        </member>
        <member name="M:Bing.DomainExtensions.Compare(System.Collections.Generic.IEnumerable{System.Int64},System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            比较
            </summary>
            <param name="newList">新实体标识集合</param>
            <param name="oldList">旧实体标识集合</param>
            <returns></returns>
        </member>
        <member name="T:Bing.ExceptionExtensions">
            <summary>
            异常扩展
            </summary>
        </member>
        <member name="M:Bing.ExceptionExtensions.GetRawException(System.Exception)">
            <summary>
            获取原始异常
            </summary>
            <param name="exception">异常</param>
            <returns></returns>
        </member>
        <member name="M:Bing.ExceptionExtensions.GetPrompt(System.Exception)">
            <summary>
            获取异常提示
            </summary>
            <param name="exception">异常</param>
        </member>
        <member name="T:Bing.InfrastructureExtensions">
            <summary>
            基础设施扩展
            </summary>
        </member>
        <member name="M:Bing.InfrastructureExtensions.AddBing(Microsoft.Extensions.DependencyInjection.IServiceCollection,Bing.Dependency.IConfig[])">
            <summary>
            注册Bing基础设施服务
            </summary>
            <param name="services">服务集合</param>
            <param name="configs">依赖配置</param>
            <returns></returns>
        </member>
        <member name="M:Bing.InfrastructureExtensions.AddBing(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{AspectCore.Configuration.IAspectConfiguration},Bing.Dependency.IConfig[])">
            <summary>
            注册Bing基础设施服务
            </summary>
            <param name="services">服务集合</param>
            <param name="aopConfigAction">Aop配置操作</param>
            <param name="configs">依赖配置</param>
            <returns></returns>
        </member>
        <member name="T:Bing.QueryableExtensions">
            <summary>
            <see cref="T:System.Linq.IQueryable`1"/> 扩展
            </summary>
        </member>
        <member name="M:Bing.QueryableExtensions.Page``1(System.Linq.IQueryable{``0},Bing.Domains.Repositories.IPager)">
            <summary>
            分页，包含排序
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="query">数据源</param>
            <param name="pager">分页对象</param>
            <returns></returns>
        </member>
        <member name="M:Bing.QueryableExtensions.ToPagerList``1(System.Linq.IQueryable{``0},Bing.Domains.Repositories.IPager)">
            <summary>
            转换为分页列表，包含排序分页操作
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="query">数据源</param>
            <param name="pager">分页对象</param>
            <returns></returns>
        </member>
        <member name="M:Bing.QueryableExtensions.Where``1(System.Linq.IQueryable{``0},Bing.Domains.Repositories.ICriteria{``0})">
            <summary>
            添加查询条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="query">数据源</param>
            <param name="criteria">查询条件对象</param>
            <returns></returns>
        </member>
        <member name="M:Bing.QueryableExtensions.WhereIf``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Boolean)">
            <summary>
            添加查询条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="query">数据源</param>
            <param name="predicate">查询条件</param>
            <param name="condition">判断条件，该值为true时添加查询条件，否则忽略</param>
            <returns></returns>
        </member>
        <member name="M:Bing.QueryableExtensions.WhereIfNotEmpty``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            添加查询条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="query">数据源</param>
            <param name="predicate">查询条件，如果参数为空，则忽略该查询条件，范例：t => t.Name == ""，该查询条件被忽略。注意：一次仅能添加一个条件，范例：t => t.Name == "a" &amp;&amp; t.Mobile == "123"，不支持，将抛出异常</param>
            <returns></returns>
        </member>
        <member name="M:Bing.QueryableExtensions.Between``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Nullable{System.Int32},System.Nullable{System.Int32},Bing.Datas.Queries.Boundary)">
            <summary>
            添加范围查询条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TProperty">属性类型</typeparam>
            <param name="query">数据源</param>
            <param name="propertyExpression">属性表达式，范例：t => t.Age</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <param name="boundary">包含边界</param>
            <returns></returns>
        </member>
        <member name="M:Bing.QueryableExtensions.Between``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Nullable{System.Double},System.Nullable{System.Double},Bing.Datas.Queries.Boundary)">
            <summary>
            添加范围查询条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TProperty">属性类型</typeparam>
            <param name="query">数据源</param>
            <param name="propertyExpression">属性表达式，范例：t => t.Age</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <param name="boundary">包含边界</param>
            <returns></returns>
        </member>
        <member name="M:Bing.QueryableExtensions.Between``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Nullable{System.Decimal},System.Nullable{System.Decimal},Bing.Datas.Queries.Boundary)">
            <summary>
            添加范围查询条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TProperty">属性类型</typeparam>
            <param name="query">数据源</param>
            <param name="propertyExpression">属性表达式，范例：t => t.Age</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <param name="boundary">包含边界</param>
            <returns></returns>
        </member>
        <member name="M:Bing.QueryableExtensions.Between``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Nullable{System.DateTime},System.Nullable{System.DateTime},Bing.Datas.Queries.Boundary)">
            <summary>
            添加范围查询条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TProperty">属性类型</typeparam>
            <param name="query">数据源</param>
            <param name="propertyExpression">属性表达式，范例：t => t.Time</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <param name="boundary">包含边界</param>
            <returns></returns>
        </member>
        <member name="T:Bing.SecurityExtensions">
            <summary>
            安全扩展
            </summary>
        </member>
        <member name="M:Bing.SecurityExtensions.GetIdentity(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            获取身份标识
            </summary>
            <param name="context">Http上下文</param>
            <returns></returns>
        </member>
        <member name="T:Bing.TreeExtensions">
            <summary>
            树型扩展
            </summary>
        </member>
        <member name="M:Bing.TreeExtensions.UpdatePathAsync``3(Bing.Domains.Repositories.ITreeCompactRepository{``0,``1,``2},``0)">
            <summary>
            更新实体以及所有下级节点路径
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TKey">标识类型</typeparam>
            <typeparam name="TParentId">父标识类型</typeparam>
            <param name="repository">仓储</param>
            <param name="entity">实体</param>
            <returns></returns>
        </member>
        <member name="M:Bing.TreeExtensions.SwapSort(Bing.Domains.Entities.Trees.ISortId,Bing.Domains.Entities.Trees.ISortId)">
            <summary>
            交换排序
            </summary>
            <param name="entity">实体</param>
            <param name="swapEntity">交换实体</param>
        </member>
        <member name="M:Bing.TreeExtensions.GetMissingParentIds``3(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            获取缺失的父标识列表
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TKey">标识类型</typeparam>
            <typeparam name="TParentId">父标识类型</typeparam>
            <param name="entities">实体列表</param>
            <returns></returns>
        </member>
        <member name="T:Bing.Finders.FinderBase`1">
            <summary>
            查找器基类
            </summary>
            <typeparam name="TItem">要查找的项类型</typeparam>
        </member>
        <member name="F:Bing.Finders.FinderBase`1._lockObj">
            <summary>
            对象锁
            </summary>
        </member>
        <member name="F:Bing.Finders.FinderBase`1.ItemsCache">
            <summary>
            项缓存
            </summary>
        </member>
        <member name="F:Bing.Finders.FinderBase`1.Found">
            <summary>
            是否已查找过
            </summary>
        </member>
        <member name="M:Bing.Finders.FinderBase`1.Find(System.Func{`0,System.Boolean},System.Boolean)">
            <summary>
            查找指定条件的项
            </summary>
            <param name="predicate">筛选条件</param>
            <param name="fromCache">是否来自缓存</param>
        </member>
        <member name="M:Bing.Finders.FinderBase`1.FindAll(System.Boolean)">
            <summary>
            查找所有项
            </summary>
            <param name="fromCache">是否来自缓存</param>
        </member>
        <member name="M:Bing.Finders.FinderBase`1.FindAllItems">
            <summary>
            重写已实现所有项的查找
            </summary>
        </member>
        <member name="T:Bing.Finders.IFinder`1">
            <summary>
            定义查找器
            </summary>
            <typeparam name="TItem">要查找的项类型</typeparam>
        </member>
        <member name="M:Bing.Finders.IFinder`1.Find(System.Func{`0,System.Boolean},System.Boolean)">
            <summary>
            查找指定条件的项
            </summary>
            <param name="predicate">筛选条件</param>
            <param name="fromCache">是否来自缓存</param>
        </member>
        <member name="M:Bing.Finders.IFinder`1.FindAll(System.Boolean)">
            <summary>
            查找所有项
            </summary>
            <param name="fromCache">是否来自缓存</param>
        </member>
        <member name="T:Bing.Helpers.Ioc">
            <summary>
            容器操作
            </summary>
        </member>
        <member name="P:Bing.Helpers.Ioc.DefaultContainer">
            <summary>
            默认容器
            </summary>
        </member>
        <member name="M:Bing.Helpers.Ioc.CreateContainer(Bing.Dependency.IConfig[])">
            <summary>
            创建容器
            </summary>
            <param name="configs">依赖配置</param>
        </member>
        <member name="M:Bing.Helpers.Ioc.CreateList``1(System.String)">
            <summary>
            创建集合
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="name">服务名称</param>
        </member>
        <member name="M:Bing.Helpers.Ioc.CreateList``1(System.Type,System.String)">
            <summary>
            创建集合
            </summary>
            <typeparam name="TResult">对象类型</typeparam>
            <param name="type">对象类型</param>
            <param name="name">服务名称</param>
        </member>
        <member name="M:Bing.Helpers.Ioc.Create``1(System.String)">
            <summary>
            创建实例
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="name">服务名称</param>
        </member>
        <member name="M:Bing.Helpers.Ioc.Create(System.Type,System.String)">
            <summary>
            创建实例
            </summary>
            <param name="type">对象类型</param>
            <param name="name">服务名称</param>
        </member>
        <member name="M:Bing.Helpers.Ioc.Create``1(System.Type,System.String)">
            <summary>
            创建实例
            </summary>
            <typeparam name="TResult">对象类型</typeparam>
            <param name="type">对象类型</param>
            <param name="name">服务名称</param>
        </member>
        <member name="M:Bing.Helpers.Ioc.BeginScope">
            <summary>
            作用域开始
            </summary>
        </member>
        <member name="M:Bing.Helpers.Ioc.Register(Bing.Dependency.IConfig[])">
            <summary>
            注册依赖
            </summary>
            <param name="configs">依赖配置</param>
        </member>
        <member name="M:Bing.Helpers.Ioc.Register(Microsoft.Extensions.DependencyInjection.IServiceCollection,Bing.Dependency.IConfig[])">
            <summary>
            注册依赖
            </summary>
            <param name="services">服务集合</param>
            <param name="configs">依赖配置</param>
        </member>
        <member name="M:Bing.Helpers.Ioc.Dispose">
            <summary>
            释放容器
            </summary>
        </member>
        <member name="T:Bing.Helpers.WebIdentity">
            <summary>
            Web身份操作
            </summary>
        </member>
        <member name="P:Bing.Helpers.WebIdentity.User">
            <summary>
            当前用户安全主体
            </summary>
        </member>
        <member name="P:Bing.Helpers.WebIdentity.Identity">
            <summary>
            当前用户身份
            </summary>
        </member>
        <member name="T:Bing.Locks.Default.DefaultLock">
            <summary>
            业务锁
            </summary>
        </member>
        <member name="F:Bing.Locks.Default.DefaultLock._cache">
            <summary>
            缓存提供程序
            </summary>
        </member>
        <member name="F:Bing.Locks.Default.DefaultLock._key">
            <summary>
            锁定标识
            </summary>
        </member>
        <member name="F:Bing.Locks.Default.DefaultLock._expiration">
            <summary>
            延迟执行时间
            </summary>
        </member>
        <member name="M:Bing.Locks.Default.DefaultLock.#ctor(Bing.Caching.ICache)">
            <summary>
            初始化一个<see cref="T:Bing.Locks.Default.DefaultLock"/>类型的实例
            </summary>
            <param name="cache">缓存提供程序</param>
        </member>
        <member name="M:Bing.Locks.Default.DefaultLock.Lock(System.String,System.Nullable{System.TimeSpan})">
            <summary>
            锁定，成功锁定返回true，false代表之前已被锁定
            </summary>
            <param name="key">锁定标识</param>
            <param name="expiration">锁定时间间隔</param>
        </member>
        <member name="M:Bing.Locks.Default.DefaultLock.UnLock">
            <summary>
            解除锁定
            </summary>
        </member>
        <member name="T:Bing.Locks.Default.Extensions">
            <summary>
            业务锁扩展
            </summary>
        </member>
        <member name="M:Bing.Locks.Default.Extensions.AddLock(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            注册业务锁
            </summary>
            <param name="services">服务集合</param>
        </member>
        <member name="T:Bing.Locks.IDistributedLock">
            <summary>
            分布式锁
            </summary>
        </member>
        <member name="M:Bing.Locks.IDistributedLock.TryLock(System.String,System.Nullable{System.TimeSpan})">
            <summary>
            尝试获取锁。成功锁定返回true，false代表之前已被锁定
            </summary>
            <param name="key">锁定标识</param>
            <param name="expiration">锁定时间间隔</param>
        </member>
        <member name="M:Bing.Locks.IDistributedLock.Lock(System.String)">
            <summary>
            锁定。如果锁空闲立即返回，否则一直等待
            </summary>
            <param name="key">锁定标识</param>
        </member>
        <member name="M:Bing.Locks.IDistributedLock.TryLock(System.Collections.Generic.List{System.String},System.Nullable{System.TimeSpan})">
            <summary>
            尝试批量获取锁。成功锁定返回true，false代表之前已被锁定
            </summary>
            <param name="keys">批量锁定标识</param>
            <param name="expiration">锁定时间间隔</param>
        </member>
        <member name="M:Bing.Locks.IDistributedLock.UnLock(System.String)">
            <summary>
            解除锁定
            </summary>
            <param name="key">锁定标识</param>
        </member>
        <member name="M:Bing.Locks.IDistributedLock.UnLock(System.Collections.Generic.List{System.String})">
            <summary>
            批量解除锁定
            </summary>
            <param name="keys">锁定标识列表</param>
        </member>
        <member name="T:Bing.Locks.ILock">
            <summary>
            业务锁
            </summary>
        </member>
        <member name="M:Bing.Locks.ILock.Lock(System.String,System.Nullable{System.TimeSpan})">
            <summary>
            锁定，成功锁定返回true，false代表之前已被锁定
            </summary>
            <param name="key">锁定标识</param>
            <param name="expiration">锁定时间间隔</param>
        </member>
        <member name="M:Bing.Locks.ILock.UnLock">
            <summary>
            解除锁定
            </summary>
        </member>
        <member name="T:Bing.Locks.NullDistributedLock">
            <summary>
            空分布式锁
            </summary>
        </member>
        <member name="P:Bing.Locks.NullDistributedLock.Instance">
            <summary>
            空分布式锁
            </summary>
        </member>
        <member name="M:Bing.Locks.NullDistributedLock.#ctor">
            <summary>
            初始化一个<see cref="T:Bing.Locks.NullDistributedLock"/>类型的实例
            </summary>
        </member>
        <member name="M:Bing.Locks.NullDistributedLock.TryLock(System.String,System.Nullable{System.TimeSpan})">
            <summary>
            尝试获取锁。成功锁定返回true，false代表之前已被锁定
            </summary>
            <param name="key">锁定标识</param>
            <param name="expiration">锁定时间间隔</param>
        </member>
        <member name="M:Bing.Locks.NullDistributedLock.Lock(System.String)">
            <summary>
            锁定。如果锁空闲立即返回，否则一直等待
            </summary>
            <param name="key">锁定标识</param>
        </member>
        <member name="M:Bing.Locks.NullDistributedLock.TryLock(System.Collections.Generic.List{System.String},System.Nullable{System.TimeSpan})">
            <summary>
            尝试批量获取锁。成功锁定返回true，false代表之前已被锁定
            </summary>
            <param name="keys">批量锁定标识</param>
            <param name="expiration">锁定时间间隔</param>
        </member>
        <member name="M:Bing.Locks.NullDistributedLock.UnLock(System.String)">
            <summary>
            解除锁定
            </summary>
            <param name="key">锁定标识</param>
        </member>
        <member name="M:Bing.Locks.NullDistributedLock.UnLock(System.Collections.Generic.List{System.String})">
            <summary>
            批量解除锁定
            </summary>
            <param name="keys">锁定标识列表</param>
        </member>
        <member name="T:Bing.Locks.NullLock">
            <summary>
            空业务锁
            </summary>
        </member>
        <member name="P:Bing.Locks.NullLock.Instance">
            <summary>
            空业务锁
            </summary>
        </member>
        <member name="M:Bing.Locks.NullLock.#ctor">
            <summary>
            初始化一个<see cref="T:Bing.Locks.NullLock"/>类型的实例
            </summary>
        </member>
        <member name="M:Bing.Locks.NullLock.Lock(System.String,System.Nullable{System.TimeSpan})">
            <summary>
            锁定，成功锁定返回true，false代表之前已被锁定
            </summary>
            <param name="key">锁定标识</param>
            <param name="expiration">锁定时间间隔</param>
        </member>
        <member name="M:Bing.Locks.NullLock.UnLock">
            <summary>
            解除锁定
            </summary>
        </member>
        <member name="T:Bing.Logs.Abstractions.ILogContent">
            <summary>
            日志内容
            </summary>
        </member>
        <member name="P:Bing.Logs.Abstractions.ILogContent.LogName">
            <summary>
            日志名称
            </summary>
        </member>
        <member name="P:Bing.Logs.Abstractions.ILogContent.Level">
            <summary>
            日志级别
            </summary>
        </member>
        <member name="P:Bing.Logs.Abstractions.ILogContent.LogId">
            <summary>
            日志标识
            </summary>
        </member>
        <member name="P:Bing.Logs.Abstractions.ILogContent.TraceId">
            <summary>
            跟踪号
            </summary>
        </member>
        <member name="P:Bing.Logs.Abstractions.ILogContent.OperationTime">
            <summary>
            操作时间
            </summary>
        </member>
        <member name="P:Bing.Logs.Abstractions.ILogContent.Duration">
            <summary>
            持续时间
            </summary>
        </member>
        <member name="P:Bing.Logs.Abstractions.ILogContent.Ip">
            <summary>
            IP
            </summary>
        </member>
        <member name="P:Bing.Logs.Abstractions.ILogContent.Host">
            <summary>
            主机
            </summary>
        </member>
        <member name="P:Bing.Logs.Abstractions.ILogContent.ThreadId">
            <summary>
            线程号
            </summary>
        </member>
        <member name="P:Bing.Logs.Abstractions.ILogContent.Browser">
            <summary>
            浏览器
            </summary>
        </member>
        <member name="P:Bing.Logs.Abstractions.ILogContent.Url">
            <summary>
            请求地址
            </summary>
        </member>
        <member name="P:Bing.Logs.Abstractions.ILogContent.UserId">
            <summary>
            操作人编号
            </summary>
        </member>
        <member name="P:Bing.Logs.Abstractions.ILogContent.Content">
            <summary>
            内容
            </summary>
        </member>
        <member name="P:Bing.Logs.Abstractions.ILogContent.Exception">
            <summary>
            异常消息
            </summary>
        </member>
        <member name="P:Bing.Logs.Abstractions.ILogContent.Tags">
            <summary>
            标签列表
            </summary>
        </member>
        <member name="T:Bing.Logs.Abstractions.ILogContext">
            <summary>
            日志上下文
            </summary>
        </member>
        <member name="P:Bing.Logs.Abstractions.ILogContext.LogId">
            <summary>
            日志标识
            </summary>
        </member>
        <member name="P:Bing.Logs.Abstractions.ILogContext.TraceId">
            <summary>
            跟踪号
            </summary>
        </member>
        <member name="P:Bing.Logs.Abstractions.ILogContext.Stopwatch">
            <summary>
            计时器
            </summary>
        </member>
        <member name="P:Bing.Logs.Abstractions.ILogContext.Ip">
            <summary>
            IP
            </summary>
        </member>
        <member name="P:Bing.Logs.Abstractions.ILogContext.Host">
            <summary>
            主机
            </summary>
        </member>
        <member name="P:Bing.Logs.Abstractions.ILogContext.Browser">
            <summary>
            浏览器
            </summary>
        </member>
        <member name="P:Bing.Logs.Abstractions.ILogContext.Url">
            <summary>
            请求地址
            </summary>
        </member>
        <member name="T:Bing.Logs.Abstractions.ILogConvert">
            <summary>
            日志转换器
            </summary>
        </member>
        <member name="M:Bing.Logs.Abstractions.ILogConvert.To">
            <summary>
            转换
            </summary>
        </member>
        <member name="T:Bing.Logs.Abstractions.ILogFactory">
            <summary>
            日志工厂
            </summary>
        </member>
        <member name="M:Bing.Logs.Abstractions.ILogFactory.GetLog(System.String)">
            <summary>
            获取日志
            </summary>
            <param name="name">日志名称</param>
        </member>
        <member name="T:Bing.Logs.Abstractions.ILogFormat">
            <summary>
            日志格式化器
            </summary>
        </member>
        <member name="M:Bing.Logs.Abstractions.ILogFormat.Format(Bing.Logs.Abstractions.ILogContent)">
            <summary>
            格式化
            </summary>
            <param name="content">日志内容</param>
        </member>
        <member name="T:Bing.Logs.Abstractions.ILogProvider">
            <summary>
            日志提供程序
            </summary>
        </member>
        <member name="P:Bing.Logs.Abstractions.ILogProvider.LogName">
            <summary>
            日志名称
            </summary>
        </member>
        <member name="P:Bing.Logs.Abstractions.ILogProvider.IsDebugEnabled">
            <summary>
            调试级别是否启用
            </summary>
        </member>
        <member name="P:Bing.Logs.Abstractions.ILogProvider.IsTraceEnabled">
            <summary>
            跟踪级别是否启用
            </summary>
        </member>
        <member name="P:Bing.Logs.Abstractions.ILogProvider.IsDistributedLog">
            <summary>
            是否分布式日志
            </summary>
        </member>
        <member name="M:Bing.Logs.Abstractions.ILogProvider.WriteLog(Bing.Logs.LogLevel,Bing.Logs.Abstractions.ILogContent)">
            <summary>
            写日志
            </summary>
            <param name="level">日志等级</param>
            <param name="content">日志内容</param>
        </member>
        <member name="T:Bing.Logs.Abstractions.ILogProviderFactory">
            <summary>
            日志提供程序工厂
            </summary>
        </member>
        <member name="M:Bing.Logs.Abstractions.ILogProviderFactory.Create(System.String,Bing.Logs.Abstractions.ILogFormat)">
            <summary>
            创建日志提供程序
            </summary>
            <param name="logName">日志名称</param>
            <param name="format">日志格式化器</param>
        </member>
        <member name="T:Bing.Logs.Core.DefaultLogFactory">
            <summary>
            默认日志工厂
            </summary>
        </member>
        <member name="F:Bing.Logs.Core.DefaultLogFactory._logs">
            <summary>
            日志列表
            </summary>
        </member>
        <member name="M:Bing.Logs.Core.DefaultLogFactory.#ctor(System.Collections.Generic.IEnumerable{Bing.Logs.ILog})">
            <summary>
            初始化一个<see cref="T:Bing.Logs.Core.DefaultLogFactory"/>类型的实例
            </summary>
            <param name="logs">日志列表</param>
        </member>
        <member name="M:Bing.Logs.Core.DefaultLogFactory.GetLog(System.String)">
            <summary>
            获取日志
            </summary>
            <param name="name">日志名称</param>
        </member>
        <member name="T:Bing.Logs.Core.LogBase`1">
            <summary>
            日志操作抽象基类
            </summary>
            <typeparam name="TContent">日志内容类型</typeparam>
        </member>
        <member name="F:Bing.Logs.Core.LogBase`1._content">
            <summary>
            日志内容
            </summary>
        </member>
        <member name="P:Bing.Logs.Core.LogBase`1.LogContent">
            <summary>
            日志内容
            </summary>
        </member>
        <member name="P:Bing.Logs.Core.LogBase`1.Provider">
            <summary>
            日志提供程序
            </summary>
        </member>
        <member name="P:Bing.Logs.Core.LogBase`1.Context">
            <summary>
            日志上下文
            </summary>
        </member>
        <member name="P:Bing.Logs.Core.LogBase`1.Session">
            <summary>
            用户会话
            </summary>
        </member>
        <member name="P:Bing.Logs.Core.LogBase`1.IsDebugEnabled">
            <summary>
            调试级别是否启用
            </summary>
        </member>
        <member name="P:Bing.Logs.Core.LogBase`1.IsTraceEnabled">
            <summary>
            跟踪级别是否启用
            </summary>
        </member>
        <member name="P:Bing.Logs.Core.LogBase`1.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="M:Bing.Logs.Core.LogBase`1.#ctor(Bing.Logs.Abstractions.ILogProvider,Bing.Logs.Abstractions.ILogContext,Bing.Sessions.ISession)">
            <summary>
            初始化一个<see cref="T:Bing.Logs.Core.LogBase`1"/>类型的实例
            </summary>
            <param name="provider">日志提供程序</param>
            <param name="context">日志上下文</param>
            <param name="session">用户会话</param>
        </member>
        <member name="M:Bing.Logs.Core.LogBase`1.#ctor(System.String,Bing.Logs.Abstractions.ILogProvider,Bing.Logs.Abstractions.ILogContext,Bing.Sessions.ISession)">
            <summary>
            初始化一个<see cref="T:Bing.Logs.Core.LogBase`1"/>类型的实例
            </summary>
            <param name="name">名称</param>
            <param name="provider">日志提供程序</param>
            <param name="context">日志上下文</param>
            <param name="session">用户会话</param>
        </member>
        <member name="M:Bing.Logs.Core.LogBase`1.GetContent">
            <summary>
            获取日志内容
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bing.Logs.Core.LogBase`1.Set``1(System.Action{``0})">
            <summary>
            设置内容
            </summary>
            <typeparam name="T">日志内容类型</typeparam>
            <param name="action">设置内容操作</param>
        </member>
        <member name="M:Bing.Logs.Core.LogBase`1.Get``1">
            <summary>
            获取内容
            </summary>
            <typeparam name="T">日志内容类型</typeparam>
        </member>
        <member name="M:Bing.Logs.Core.LogBase`1.Trace">
            <summary>
            跟踪
            </summary>
        </member>
        <member name="M:Bing.Logs.Core.LogBase`1.Trace(System.String)">
            <summary>
            跟踪
            </summary>
            <param name="message">日志消息</param>
        </member>
        <member name="M:Bing.Logs.Core.LogBase`1.Debug">
            <summary>
            调试
            </summary>
        </member>
        <member name="M:Bing.Logs.Core.LogBase`1.Debug(System.String)">
            <summary>
            调试
            </summary>
            <param name="message">日志消息</param>
        </member>
        <member name="M:Bing.Logs.Core.LogBase`1.Info">
            <summary>
            信息
            </summary>
        </member>
        <member name="M:Bing.Logs.Core.LogBase`1.Info(System.String)">
            <summary>
            信息
            </summary>
            <param name="message">日志消息</param>
        </member>
        <member name="M:Bing.Logs.Core.LogBase`1.Warn">
            <summary>
            警告
            </summary>
        </member>
        <member name="M:Bing.Logs.Core.LogBase`1.Warn(System.String)">
            <summary>
            警告
            </summary>
            <param name="message">日志消息</param>
        </member>
        <member name="M:Bing.Logs.Core.LogBase`1.Error">
            <summary>
            错误
            </summary>
        </member>
        <member name="M:Bing.Logs.Core.LogBase`1.Error(System.String)">
            <summary>
            错误
            </summary>
            <param name="message">日志消息</param>
        </member>
        <member name="M:Bing.Logs.Core.LogBase`1.Fatal">
            <summary>
            致命错误
            </summary>
        </member>
        <member name="M:Bing.Logs.Core.LogBase`1.Fatal(System.String)">
            <summary>
            致命错误
            </summary>
            <param name="message">日志消息</param>
        </member>
        <member name="M:Bing.Logs.Core.LogBase`1.Init(`0)">
            <summary>
            初始化
            </summary>
            <param name="content">日志内容</param>
        </member>
        <member name="M:Bing.Logs.Core.LogBase`1.Execute(Bing.Logs.LogLevel,`0@)">
            <summary>
            执行
            </summary>
            <param name="level">日志级别</param>
            <param name="content">日志内容</param>
        </member>
        <member name="M:Bing.Logs.Core.LogBase`1.Enabled(Bing.Logs.LogLevel)">
            <summary>
            是否启用
            </summary>
            <param name="level">日志级别</param>
        </member>
        <member name="T:Bing.Logs.Core.LogContext">
            <summary>
            日志上下文
            </summary>
        </member>
        <member name="F:Bing.Logs.Core.LogContext._info">
            <summary>
            日志上下文信息
            </summary>
        </member>
        <member name="F:Bing.Logs.Core.LogContext._orderId">
            <summary>
            序号
            </summary>
        </member>
        <member name="F:Bing.Logs.Core.LogContext._context">
            <summary>
            上下文
            </summary>
        </member>
        <member name="P:Bing.Logs.Core.LogContext.LogId">
            <summary>
            日志标识
            </summary>
        </member>
        <member name="P:Bing.Logs.Core.LogContext.TraceId">
            <summary>
            跟踪号
            </summary>
        </member>
        <member name="P:Bing.Logs.Core.LogContext.Stopwatch">
            <summary>
            计时器
            </summary>
        </member>
        <member name="P:Bing.Logs.Core.LogContext.Ip">
            <summary>
            IP
            </summary>
        </member>
        <member name="P:Bing.Logs.Core.LogContext.Host">
            <summary>
            主机
            </summary>
        </member>
        <member name="P:Bing.Logs.Core.LogContext.Browser">
            <summary>
            浏览器
            </summary>
        </member>
        <member name="P:Bing.Logs.Core.LogContext.Url">
            <summary>
            请求地址
            </summary>
        </member>
        <member name="P:Bing.Logs.Core.LogContext.Context">
            <summary>
            上下文
            </summary>
        </member>
        <member name="M:Bing.Logs.Core.LogContext.#ctor">
            <summary>
            初始化一个<see cref="T:Bing.Logs.Core.LogContext"/>类型的实例
            </summary>
        </member>
        <member name="M:Bing.Logs.Core.LogContext.GetInfo">
            <summary>
            获取日志上下文信息
            </summary>
        </member>
        <member name="M:Bing.Logs.Core.LogContext.CreateInfo">
            <summary>
            创建日志上下文信息
            </summary>
        </member>
        <member name="M:Bing.Logs.Core.LogContext.GetTraceId">
            <summary>
            获取跟踪号
            </summary>
        </member>
        <member name="M:Bing.Logs.Core.LogContext.GetStopwatch">
            <summary>
            获取计时器
            </summary>
        </member>
        <member name="T:Bing.Logs.Core.NullLog">
            <summary>
            空日志操作
            </summary>
        </member>
        <member name="P:Bing.Logs.Core.NullLog.Instance">
            <summary>
            日志操作实例
            </summary>
        </member>
        <member name="P:Bing.Logs.Core.NullLog.IsDebugEnabled">
            <summary>
            调试级别是否启用
            </summary>
        </member>
        <member name="P:Bing.Logs.Core.NullLog.IsTraceEnabled">
            <summary>
            跟踪级别是否启用
            </summary>
        </member>
        <member name="P:Bing.Logs.Core.NullLog.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="M:Bing.Logs.Core.NullLog.#ctor">
            <summary>
            初始化一个<see cref="T:Bing.Logs.Core.NullLog"/>类型的实例
            </summary>
        </member>
        <member name="M:Bing.Logs.Core.NullLog.Set``1(System.Action{``0})">
            <summary>
            设置内容
            </summary>
            <typeparam name="TContent">日志内容类型</typeparam>
            <param name="action">设置内容操作</param>
        </member>
        <member name="M:Bing.Logs.Core.NullLog.Get``1">
            <summary>
            获取内容
            </summary>
            <typeparam name="TContent">日志内容类型</typeparam>
        </member>
        <member name="M:Bing.Logs.Core.NullLog.Trace">
            <summary>
            跟踪
            </summary>
        </member>
        <member name="M:Bing.Logs.Core.NullLog.Trace(System.String)">
            <summary>
            跟踪
            </summary>
            <param name="message">日志消息</param>
        </member>
        <member name="M:Bing.Logs.Core.NullLog.Debug">
            <summary>
            调试
            </summary>
        </member>
        <member name="M:Bing.Logs.Core.NullLog.Debug(System.String)">
            <summary>
            调试
            </summary>
            <param name="message">日志消息</param>
        </member>
        <member name="M:Bing.Logs.Core.NullLog.Info">
            <summary>
            信息
            </summary>
        </member>
        <member name="M:Bing.Logs.Core.NullLog.Info(System.String)">
            <summary>
            信息
            </summary>
            <param name="message">日志消息</param>
        </member>
        <member name="M:Bing.Logs.Core.NullLog.Warn">
            <summary>
            警告
            </summary>
        </member>
        <member name="M:Bing.Logs.Core.NullLog.Warn(System.String)">
            <summary>
            警告
            </summary>
            <param name="message">日志消息</param>
        </member>
        <member name="M:Bing.Logs.Core.NullLog.Error">
            <summary>
            错误
            </summary>
        </member>
        <member name="M:Bing.Logs.Core.NullLog.Error(System.String)">
            <summary>
            错误
            </summary>
            <param name="message">日志消息</param>
        </member>
        <member name="M:Bing.Logs.Core.NullLog.Fatal">
            <summary>
            致命错误
            </summary>
        </member>
        <member name="M:Bing.Logs.Core.NullLog.Fatal(System.String)">
            <summary>
            致命错误
            </summary>
            <param name="message">日志消息</param>
        </member>
        <member name="T:Bing.Logs.Core.NullLogContext">
            <summary>
            空日志上下文
            </summary>
        </member>
        <member name="P:Bing.Logs.Core.NullLogContext.LogId">
            <summary>
            日志标识
            </summary>
        </member>
        <member name="P:Bing.Logs.Core.NullLogContext.TraceId">
            <summary>
            跟踪号
            </summary>
        </member>
        <member name="P:Bing.Logs.Core.NullLogContext.Stopwatch">
            <summary>
            计时器
            </summary>
        </member>
        <member name="P:Bing.Logs.Core.NullLogContext.Ip">
            <summary>
            IP
            </summary>
        </member>
        <member name="P:Bing.Logs.Core.NullLogContext.Host">
            <summary>
            主机
            </summary>
        </member>
        <member name="P:Bing.Logs.Core.NullLogContext.Browser">
            <summary>
            浏览器
            </summary>
        </member>
        <member name="P:Bing.Logs.Core.NullLogContext.Url">
            <summary>
            请求地址
            </summary>
        </member>
        <member name="P:Bing.Logs.Core.NullLogContext.Instance">
            <summary>
            空日志上下文实例
            </summary>
        </member>
        <member name="M:Bing.Logs.Core.NullLogContext.#ctor">
            <summary>
            初始化一个<see cref="T:Bing.Logs.Core.NullLogContext"/>类型的实例
            </summary>
        </member>
        <member name="T:Bing.Logs.Core.NullLogFormat">
            <summary>
            空日志格式器
            </summary>
        </member>
        <member name="P:Bing.Logs.Core.NullLogFormat.Instance">
            <summary>
            空日志格式器实例
            </summary>
        </member>
        <member name="M:Bing.Logs.Core.NullLogFormat.#ctor">
            <summary>
            初始化一个<see cref="T:Bing.Logs.Core.NullLogFormat"/>类型的实例
            </summary>
        </member>
        <member name="M:Bing.Logs.Core.NullLogFormat.Format(Bing.Logs.Abstractions.ILogContent)">
            <summary>
            格式化
            </summary>
            <param name="content">日志内容</param>
        </member>
        <member name="T:Bing.Logs.Core.NullLogProvider">
            <summary>
            空日志提供程序
            </summary>
        </member>
        <member name="P:Bing.Logs.Core.NullLogProvider.Instance">
            <summary>
            空日志提供程序实例
            </summary>
        </member>
        <member name="P:Bing.Logs.Core.NullLogProvider.LogName">
            <summary>
            日志名称
            </summary>
        </member>
        <member name="P:Bing.Logs.Core.NullLogProvider.IsDebugEnabled">
            <summary>
            调试级别是否启用
            </summary>
        </member>
        <member name="P:Bing.Logs.Core.NullLogProvider.IsTraceEnabled">
            <summary>
            跟踪级别是否启用
            </summary>
        </member>
        <member name="P:Bing.Logs.Core.NullLogProvider.IsDistributedLog">
            <summary>
            是否分布式日志
            </summary>
        </member>
        <member name="M:Bing.Logs.Core.NullLogProvider.#ctor">
            <summary>
            初始化一个<see cref="T:Bing.Logs.Core.NullLogProvider"/>类型的实例
            </summary>
        </member>
        <member name="M:Bing.Logs.Core.NullLogProvider.WriteLog(Bing.Logs.LogLevel,Bing.Logs.Abstractions.ILogContent)">
            <summary>
            写日志
            </summary>
            <param name="level">日志等级</param>
            <param name="content">日志内容</param>
        </member>
        <member name="T:Bing.Logs.Core.NullLogProviderFactory">
            <summary>
            空日志提供程序工厂
            </summary>
        </member>
        <member name="P:Bing.Logs.Core.NullLogProviderFactory.Instance">
            <summary>
            空日志提供程序工厂实例
            </summary>
        </member>
        <member name="M:Bing.Logs.Core.NullLogProviderFactory.#ctor">
            <summary>
            初始化一个<see cref="T:Bing.Logs.Core.NullLogProviderFactory"/>类型的实例
            </summary>
        </member>
        <member name="M:Bing.Logs.Core.NullLogProviderFactory.Create(System.String,Bing.Logs.Abstractions.ILogFormat)">
            <summary>
            创建日志提供程序
            </summary>
            <param name="logName">日志名称</param>
            <param name="format">日志格式化器</param>
        </member>
        <member name="T:Bing.Logs.Extensions.LogContentExtensions">
            <summary>
            日志内容 扩展
            </summary>
        </member>
        <member name="M:Bing.Logs.Extensions.LogContentExtensions.Append(Bing.Logs.Abstractions.ILogContent,System.Text.StringBuilder,System.String)">
            <summary>
            追加内容
            </summary>
            <param name="content">日志内容</param>
            <param name="result">拼接字符串</param>
            <param name="value">值</param>
        </member>
        <member name="M:Bing.Logs.Extensions.LogContentExtensions.AppendLine(Bing.Logs.Abstractions.ILogContent,System.Text.StringBuilder,System.String)">
            <summary>
            追加内容并换行
            </summary>
            <param name="content">日志内容</param>
            <param name="result">拼接字符串</param>
            <param name="value">值</param>
        </member>
        <member name="M:Bing.Logs.Extensions.LogContentExtensions.Content(Bing.Logs.Abstractions.ILogContent,System.String)">
            <summary>
            设置内容并换行
            </summary>
            <param name="content">日志内容</param>
            <param name="value">值</param>
        </member>
        <member name="T:Bing.Logs.Extensions.LogExtensions">
            <summary>
            日志操作 扩展
            </summary>
        </member>
        <member name="M:Bing.Logs.Extensions.LogExtensions.Content(Bing.Logs.ILog)">
            <summary>
            设置内容
            </summary>
            <param name="log">日志操作</param>
        </member>
        <member name="M:Bing.Logs.Extensions.LogExtensions.Content(Bing.Logs.ILog,System.String)">
            <summary>
            设置内容
            </summary>
            <param name="log">日志操作</param>
            <param name="value">值</param>
        </member>
        <member name="M:Bing.Logs.Extensions.LogExtensions.Content(Bing.Logs.ILog,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            设置内容
            </summary>
            <param name="log">日志操作</param>
            <param name="dictionary">字典</param>
        </member>
        <member name="M:Bing.Logs.Extensions.LogExtensions.Content(Bing.Logs.ILog,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            设置内容
            </summary>
            <param name="log">日志操作</param>
            <param name="dictionary">字典</param>
        </member>
        <member name="M:Bing.Logs.Extensions.LogExtensions.Tag(Bing.Logs.ILog,System.String)">
            <summary>
            设置标签
            </summary>
            <param name="log">日志操作</param>
            <param name="tag">标签</param>
        </member>
        <member name="M:Bing.Logs.Extensions.LogExtensions.Tags(Bing.Logs.ILog,System.String[])">
            <summary>
            设置标签
            </summary>
            <param name="log">日志操作</param>
            <param name="tags">标签</param>
        </member>
        <member name="T:Bing.Logs.ILog">
            <summary>
            日志操作
            </summary>    
        </member>
        <member name="P:Bing.Logs.ILog.IsDebugEnabled">
            <summary>
            调试级别是否启用
            </summary>
        </member>
        <member name="P:Bing.Logs.ILog.IsTraceEnabled">
            <summary>
            跟踪级别是否启用
            </summary>
        </member>
        <member name="P:Bing.Logs.ILog.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="M:Bing.Logs.ILog.Set``1(System.Action{``0})">
            <summary>
            设置内容
            </summary>
            <typeparam name="TContent">日志内容类型</typeparam>
            <param name="action">设置内容操作</param>
        </member>
        <member name="M:Bing.Logs.ILog.Get``1">
            <summary>
            获取内容
            </summary>
            <typeparam name="TContent">日志内容类型</typeparam>
        </member>
        <member name="M:Bing.Logs.ILog.Trace">
            <summary>
            跟踪
            </summary>
        </member>
        <member name="M:Bing.Logs.ILog.Trace(System.String)">
            <summary>
            跟踪
            </summary>
            <param name="message">日志消息</param>
        </member>
        <member name="M:Bing.Logs.ILog.Debug">
            <summary>
            调试
            </summary>
        </member>
        <member name="M:Bing.Logs.ILog.Debug(System.String)">
            <summary>
            调试
            </summary>
            <param name="message">日志消息</param>
        </member>
        <member name="M:Bing.Logs.ILog.Info">
            <summary>
            信息
            </summary>
        </member>
        <member name="M:Bing.Logs.ILog.Info(System.String)">
            <summary>
            信息
            </summary>
            <param name="message">日志消息</param>
        </member>
        <member name="M:Bing.Logs.ILog.Warn">
            <summary>
            警告
            </summary>
        </member>
        <member name="M:Bing.Logs.ILog.Warn(System.String)">
            <summary>
            警告
            </summary>
            <param name="message">日志消息</param>
        </member>
        <member name="M:Bing.Logs.ILog.Error">
            <summary>
            错误
            </summary>
        </member>
        <member name="M:Bing.Logs.ILog.Error(System.String)">
            <summary>
            错误
            </summary>
            <param name="message">日志消息</param>
        </member>
        <member name="M:Bing.Logs.ILog.Fatal">
            <summary>
            致命错误
            </summary>
        </member>
        <member name="M:Bing.Logs.ILog.Fatal(System.String)">
            <summary>
            致命错误
            </summary>
            <param name="message">日志消息</param>
        </member>
        <member name="T:Bing.Logs.Internal.LogContextInfo">
            <summary>
            日志上下文信息
            </summary>
        </member>
        <member name="P:Bing.Logs.Internal.LogContextInfo.TraceId">
            <summary>
            跟踪号
            </summary>
        </member>
        <member name="P:Bing.Logs.Internal.LogContextInfo.Stopwatch">
            <summary>
            计时器
            </summary>
        </member>
        <member name="P:Bing.Logs.Internal.LogContextInfo.Ip">
            <summary>
            IP
            </summary>
        </member>
        <member name="P:Bing.Logs.Internal.LogContextInfo.Host">
            <summary>
            主机
            </summary>
        </member>
        <member name="P:Bing.Logs.Internal.LogContextInfo.Browser">
            <summary>
            浏览器
            </summary>
        </member>
        <member name="P:Bing.Logs.Internal.LogContextInfo.Url">
            <summary>
            请求地址
            </summary>
        </member>
        <member name="T:Bing.Logs.LogConst">
            <summary>
            日志常量
            </summary>
        </member>
        <member name="F:Bing.Logs.LogConst.DefaultNLogName">
            <summary>
            默认 NLog 名称
            </summary>
        </member>
        <member name="F:Bing.Logs.LogConst.DefaultLog4NetName">
            <summary>
            默认 Log4Net 名称
            </summary>
        </member>
        <member name="F:Bing.Logs.LogConst.DefaultExceptionlessName">
            <summary>
            默认 Exceptionless 名称
            </summary>
        </member>
        <member name="F:Bing.Logs.LogConst.DefaultSerilogName">
            <summary>
            默认 Serilog 名称
            </summary>
        </member>
        <member name="T:Bing.Logs.LogLevel">
            <summary>
            日志等级
            </summary>
        </member>
        <member name="F:Bing.Logs.LogLevel.Trace">
            <summary>
            跟踪
            </summary>
        </member>
        <member name="F:Bing.Logs.LogLevel.Debug">
            <summary>
            调试
            </summary>
        </member>
        <member name="F:Bing.Logs.LogLevel.Information">
            <summary>
            信息
            </summary>
        </member>
        <member name="F:Bing.Logs.LogLevel.Warning">
            <summary>
            警告
            </summary>
        </member>
        <member name="F:Bing.Logs.LogLevel.Error">
            <summary>
            错误
            </summary>
        </member>
        <member name="F:Bing.Logs.LogLevel.Fatal">
            <summary>
            致命错误
            </summary>
        </member>
        <member name="F:Bing.Logs.LogLevel.None">
            <summary>
            关闭所有日志，不输出日志
            </summary>
        </member>
        <member name="T:Bing.Net.Mail.Abstractions.IAttachment">
            <summary>
            附件
            </summary>
        </member>
        <member name="M:Bing.Net.Mail.Abstractions.IAttachment.GetFileStream">
            <summary>
            获取文件流
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bing.Net.Mail.Abstractions.IAttachment.GetName">
            <summary>
            获取文件名称 
            </summary>
            <returns></returns>
        </member>
        <member name="T:Bing.Net.Mail.Abstractions.IEmailSender">
            <summary>
            电子邮件发送器
            </summary>
        </member>
        <member name="M:Bing.Net.Mail.Abstractions.IEmailSender.Send(System.String,System.String,System.String,System.Boolean)">
            <summary>
            发送邮件
            </summary>
            <param name="to">收件人</param>
            <param name="subject">邮件主题</param>
            <param name="body">正文</param>
            <param name="isBodyHtml">是否html内容</param>
        </member>
        <member name="M:Bing.Net.Mail.Abstractions.IEmailSender.SendAsync(System.String,System.String,System.String,System.Boolean)">
            <summary>
            发送邮件
            </summary>
            <param name="to">收件人</param>
            <param name="subject">邮件主题</param>
            <param name="body">正文</param>
            <param name="isBodyHtml">是否html内容</param>
        </member>
        <member name="M:Bing.Net.Mail.Abstractions.IEmailSender.Send(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            发送邮件
            </summary>
            <param name="from">发件人</param>
            <param name="to">收件人</param>
            <param name="subject">邮件主题</param>
            <param name="body">正文</param>
            <param name="isBodyHtml">是否html内容</param>
        </member>
        <member name="M:Bing.Net.Mail.Abstractions.IEmailSender.SendAsync(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            发送邮件
            </summary>
            <param name="from">发件人</param>
            <param name="to">收件人</param>
            <param name="subject">邮件主题</param>
            <param name="body">正文</param>
            <param name="isBodyHtml">是否html内容</param>
        </member>
        <member name="M:Bing.Net.Mail.Abstractions.IEmailSender.Send(Bing.Net.Mail.Core.EmailBox)">
            <summary>
            发送邮件
            </summary>
            <param name="box">邮件</param>
        </member>
        <member name="M:Bing.Net.Mail.Abstractions.IEmailSender.SendAsync(Bing.Net.Mail.Core.EmailBox)">
            <summary>
            发送邮件
            </summary>
            <param name="box">邮件</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Net.Mail.Abstractions.IEmailSender.Send(System.Net.Mail.MailMessage,System.Boolean)">
            <summary>
            发送邮件
            </summary>
            <param name="mail">邮件消息</param>
            <param name="normalize">是否规范化邮件，如果是，则设置发件人地址/名称并使邮件编码为UTF-8</param>
        </member>
        <member name="M:Bing.Net.Mail.Abstractions.IEmailSender.SendAsync(System.Net.Mail.MailMessage,System.Boolean)">
            <summary>
            发送邮件
            </summary>
            <param name="mail">邮件消息</param>
            <param name="normalize">是否规范化邮件，如果是，则设置发件人地址/名称并使邮件编码为UTF-8</param>
        </member>
        <member name="T:Bing.Net.Mail.Abstractions.IMailQueueManager">
            <summary>
            邮件队列管理器
            </summary>
        </member>
        <member name="P:Bing.Net.Mail.Abstractions.IMailQueueManager.IsRunning">
            <summary>
            是否正在运行
            </summary>
        </member>
        <member name="P:Bing.Net.Mail.Abstractions.IMailQueueManager.Count">
            <summary>
            队列数
            </summary>
        </member>
        <member name="M:Bing.Net.Mail.Abstractions.IMailQueueManager.Run">
            <summary>
            运行
            </summary>
        </member>
        <member name="M:Bing.Net.Mail.Abstractions.IMailQueueManager.Stop">
            <summary>
            停止
            </summary>
        </member>
        <member name="T:Bing.Net.Mail.Abstractions.IMailQueueProvider">
            <summary>
            邮件队列提供程序
            </summary>
        </member>
        <member name="P:Bing.Net.Mail.Abstractions.IMailQueueProvider.Count">
            <summary>
            队列邮件数量
            </summary>
        </member>
        <member name="P:Bing.Net.Mail.Abstractions.IMailQueueProvider.IsEmpty">
            <summary>
            队列是否为空
            </summary>
        </member>
        <member name="M:Bing.Net.Mail.Abstractions.IMailQueueProvider.Enqueue(Bing.Net.Mail.Core.EmailBox)">
            <summary>
            入队
            </summary>
            <param name="box">电子邮件</param>
        </member>
        <member name="M:Bing.Net.Mail.Abstractions.IMailQueueProvider.TryDequeue(Bing.Net.Mail.Core.EmailBox@)">
            <summary>
            尝试出队，获取电子邮件
            </summary>
            <param name="box">电子邮件</param>
            <returns></returns>
        </member>
        <member name="T:Bing.Net.Mail.Abstractions.IMailQueueService">
            <summary>
            邮件队列服务
            </summary>
        </member>
        <member name="M:Bing.Net.Mail.Abstractions.IMailQueueService.Enqueue(Bing.Net.Mail.Core.EmailBox)">
            <summary>
            入队
            </summary>
            <param name="box">邮件</param>
        </member>
        <member name="T:Bing.Net.Mail.Attachments.MemoryStreamAttachment">
            <summary>
            内存流附件
            </summary>
        </member>
        <member name="F:Bing.Net.Mail.Attachments.MemoryStreamAttachment._stream">
            <summary>
            内存流
            </summary>
        </member>
        <member name="F:Bing.Net.Mail.Attachments.MemoryStreamAttachment._fileName">
            <summary>
            文件名
            </summary>
        </member>
        <member name="M:Bing.Net.Mail.Attachments.MemoryStreamAttachment.#ctor(System.IO.MemoryStream,System.String)">
            <summary>
            初始化一个<see cref="T:Bing.Net.Mail.Attachments.MemoryStreamAttachment"/>类型的实例
            </summary>
            <param name="stream">内存流</param>
            <param name="fileName">文件名</param>
        </member>
        <member name="M:Bing.Net.Mail.Attachments.MemoryStreamAttachment.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:Bing.Net.Mail.Attachments.MemoryStreamAttachment.GetFileStream">
            <summary>
            获取文件流
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bing.Net.Mail.Attachments.MemoryStreamAttachment.GetName">
            <summary>
            获取文件名称 
            </summary>
            <returns></returns>
        </member>
        <member name="T:Bing.Net.Mail.Attachments.PhysicalFileAttachment">
            <summary>
            物理文件附件
            </summary>
        </member>
        <member name="F:Bing.Net.Mail.Attachments.PhysicalFileAttachment._stream">
            <summary>
            文件流
            </summary>
        </member>
        <member name="P:Bing.Net.Mail.Attachments.PhysicalFileAttachment.AbsolutePath">
            <summary>
            绝对路径
            </summary>
        </member>
        <member name="M:Bing.Net.Mail.Attachments.PhysicalFileAttachment.#ctor(System.String)">
            <summary>
            初始化一个<see cref="T:Bing.Net.Mail.Attachments.PhysicalFileAttachment"/>类型的实例
            </summary>
            <param name="absolutePath">绝对路径</param>
        </member>
        <member name="M:Bing.Net.Mail.Attachments.PhysicalFileAttachment.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:Bing.Net.Mail.Attachments.PhysicalFileAttachment.GetFileStream">
            <summary>
            获取文件流
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bing.Net.Mail.Attachments.PhysicalFileAttachment.GetName">
            <summary>
            获取文件名
            </summary>
            <returns></returns>
        </member>
        <member name="T:Bing.Net.Mail.Configs.DefaultEmailConfigProvider">
            <summary>
            电子邮件默认配置提供器
            </summary>
        </member>
        <member name="F:Bing.Net.Mail.Configs.DefaultEmailConfigProvider._config">
            <summary>
            配置
            </summary>
        </member>
        <member name="M:Bing.Net.Mail.Configs.DefaultEmailConfigProvider.#ctor(Bing.Net.Mail.Configs.EmailConfig)">
            <summary>
            初始化一个<see cref="T:Bing.Net.Mail.Configs.DefaultEmailConfigProvider"/>类型的实例
            </summary>
            <param name="config">电子邮件配置</param>
        </member>
        <member name="M:Bing.Net.Mail.Configs.DefaultEmailConfigProvider.GetConfig">
            <summary>
            获取配置
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bing.Net.Mail.Configs.DefaultEmailConfigProvider.GetConfigAsync">
            <summary>
            获取配置
            </summary>
            <returns></returns>
        </member>
        <member name="T:Bing.Net.Mail.Configs.EmailConfig">
            <summary>
            电子邮件配置
            </summary>
        </member>
        <member name="P:Bing.Net.Mail.Configs.EmailConfig.Host">
            <summary>
            主机
            </summary>
        </member>
        <member name="P:Bing.Net.Mail.Configs.EmailConfig.Port">
            <summary>
            端口号
            </summary>
        </member>
        <member name="P:Bing.Net.Mail.Configs.EmailConfig.UserName">
            <summary>
            用户名
            </summary>
        </member>
        <member name="P:Bing.Net.Mail.Configs.EmailConfig.Password">
            <summary>
            密码
            </summary>
        </member>
        <member name="P:Bing.Net.Mail.Configs.EmailConfig.Domain">
            <summary>
            域名
            </summary>
        </member>
        <member name="P:Bing.Net.Mail.Configs.EmailConfig.EnableSsl">
            <summary>
            是否启用SSL
            </summary>
        </member>
        <member name="P:Bing.Net.Mail.Configs.EmailConfig.UseDefaultCredentials">
            <summary>
            是否使用默认证书
            </summary>
        </member>
        <member name="P:Bing.Net.Mail.Configs.EmailConfig.DisplayName">
            <summary>
            显示名称
            </summary>
        </member>
        <member name="P:Bing.Net.Mail.Configs.EmailConfig.FromAddress">
            <summary>
            发送地址
            </summary>
        </member>
        <member name="P:Bing.Net.Mail.Configs.EmailConfig.SleepInterval">
            <summary>
            睡眠间隔。默认：3秒
            </summary>
        </member>
        <member name="T:Bing.Net.Mail.Configs.IEmailConfigProvider">
            <summary>
            电子邮件配置提供器
            </summary>
        </member>
        <member name="M:Bing.Net.Mail.Configs.IEmailConfigProvider.GetConfig">
            <summary>
            获取配置
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bing.Net.Mail.Configs.IEmailConfigProvider.GetConfigAsync">
            <summary>
            获取配置
            </summary>
            <returns></returns>
        </member>
        <member name="T:Bing.Net.Mail.Core.EmailBox">
            <summary>
            电子邮件
            </summary>
        </member>
        <member name="P:Bing.Net.Mail.Core.EmailBox.Attachments">
            <summary>
            附件列表
            </summary>
        </member>
        <member name="P:Bing.Net.Mail.Core.EmailBox.Body">
            <summary>
            正文
            </summary>
        </member>
        <member name="P:Bing.Net.Mail.Core.EmailBox.Cc">
            <summary>
            抄送人
            </summary>
        </member>
        <member name="P:Bing.Net.Mail.Core.EmailBox.IsBodyHtml">
            <summary>
            是否Html内容
            </summary>
        </member>
        <member name="P:Bing.Net.Mail.Core.EmailBox.Subject">
            <summary>
            主题
            </summary>
        </member>
        <member name="P:Bing.Net.Mail.Core.EmailBox.To">
            <summary>
            收件人
            </summary>
        </member>
        <member name="P:Bing.Net.Mail.Core.EmailBox.Bcc">
            <summary>
            秘密抄送人
            </summary>
        </member>
        <member name="T:Bing.Net.Mail.Core.EmailSenderBase">
            <summary>
            电子邮件发送器基类
            </summary>
        </member>
        <member name="P:Bing.Net.Mail.Core.EmailSenderBase.ConfigProvider">
            <summary>
            电子邮件配置提供器
            </summary>
        </member>
        <member name="M:Bing.Net.Mail.Core.EmailSenderBase.#ctor(Bing.Net.Mail.Configs.IEmailConfigProvider)">
            <summary>
            初始化一个<see cref="T:Bing.Net.Mail.Core.EmailSenderBase"/>类型的实例
            </summary>
            <param name="provider">电子邮件配置提供器</param>
        </member>
        <member name="M:Bing.Net.Mail.Core.EmailSenderBase.Send(System.String,System.String,System.String,System.Boolean)">
            <summary>
            发送邮件
            </summary>
            <param name="to">收件人</param>
            <param name="subject">邮件主题</param>
            <param name="body">正文</param>
            <param name="isBodyHtml">是否html内容</param>
        </member>
        <member name="M:Bing.Net.Mail.Core.EmailSenderBase.SendAsync(System.String,System.String,System.String,System.Boolean)">
            <summary>
            发送邮件
            </summary>
            <param name="to">收件人</param>
            <param name="subject">邮件主题</param>
            <param name="body">正文</param>
            <param name="isBodyHtml">是否html内容</param>
        </member>
        <member name="M:Bing.Net.Mail.Core.EmailSenderBase.Send(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            发送邮件
            </summary>
            <param name="from">发件人</param>
            <param name="to">收件人</param>
            <param name="subject">邮件主题</param>
            <param name="body">正文</param>
            <param name="isBodyHtml">是否html内容</param>
        </member>
        <member name="M:Bing.Net.Mail.Core.EmailSenderBase.SendAsync(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            发送邮件
            </summary>
            <param name="from">发件人</param>
            <param name="to">收件人</param>
            <param name="subject">邮件主题</param>
            <param name="body">正文</param>
            <param name="isBodyHtml">是否html内容</param>
        </member>
        <member name="M:Bing.Net.Mail.Core.EmailSenderBase.Send(Bing.Net.Mail.Core.EmailBox)">
            <summary>
            发送邮件
            </summary>
            <param name="box">邮件</param>
        </member>
        <member name="M:Bing.Net.Mail.Core.EmailSenderBase.SendAsync(Bing.Net.Mail.Core.EmailBox)">
            <summary>
            发送邮件
            </summary>
            <param name="box">邮件</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Net.Mail.Core.EmailSenderBase.Send(System.Net.Mail.MailMessage,System.Boolean)">
            <summary>
            发送邮件
            </summary>
            <param name="mail">邮件消息</param>
            <param name="normalize">是否规范化邮件，如果是，则设置发件人地址/名称并使邮件编码为UTF-8</param>
        </member>
        <member name="M:Bing.Net.Mail.Core.EmailSenderBase.SendAsync(System.Net.Mail.MailMessage,System.Boolean)">
            <summary>
            发送邮件
            </summary>
            <param name="mail">邮件消息</param>
            <param name="normalize">是否规范化邮件，如果是，则设置发件人地址/名称并使邮件编码为UTF-8</param>
        </member>
        <member name="M:Bing.Net.Mail.Core.EmailSenderBase.SendEmail(System.Net.Mail.MailMessage)">
            <summary>
            发送邮件
            </summary>
            <param name="mail">邮件</param>
        </member>
        <member name="M:Bing.Net.Mail.Core.EmailSenderBase.SendEmailAsync(System.Net.Mail.MailMessage)">
            <summary>
            发送邮件
            </summary>
            <param name="mail">邮件</param>
        </member>
        <member name="M:Bing.Net.Mail.Core.EmailSenderBase.HandlerAttachments(System.Collections.Generic.IList{Bing.Net.Mail.Abstractions.IAttachment},System.Net.Mail.AttachmentCollection)">
            <summary>
            处理附件
            </summary>
            <param name="attachments">附件集合</param>
            <param name="attachmentCollection">附件集合对象</param>
        </member>
        <member name="M:Bing.Net.Mail.Core.EmailSenderBase.NormalizeMail(System.Net.Mail.MailMessage)">
            <summary>
            规范化邮件，设置发件人地址/名称并使邮件编码为UTF-8
            </summary>
            <param name="mail">邮件</param>
        </member>
        <member name="M:Bing.Net.Mail.Core.EmailSenderBase.PaserMailAddress(System.String,System.Net.Mail.MailAddressCollection)">
            <summary>
            解析分解邮件地址
            </summary>
            <param name="mailAddress">邮件地址</param>
            <param name="mailAddressCollection">邮件地址对象</param>
        </member>
        <member name="M:Bing.Net.Mail.Core.EmailSenderBase.PaserMailAddress(System.Collections.Generic.List{System.String},System.Net.Mail.MailAddressCollection)">
            <summary>
            解析分解邮件地址
            </summary>
            <param name="mailAddress">邮件地址列表</param>
            <param name="mailAddressCollection">邮件地址对象</param>
        </member>
        <member name="T:Bing.Net.Mail.Core.MailQueueManagerBase">
            <summary>
            邮件队列管理器基类
            </summary>
        </member>
        <member name="F:Bing.Net.Mail.Core.MailQueueManagerBase._mailQueueProvider">
            <summary>
            邮件队列提供程序
            </summary>
        </member>
        <member name="F:Bing.Net.Mail.Core.MailQueueManagerBase._emailConfigProvider">
            <summary>
            电子邮件配置提供器
            </summary>
        </member>
        <member name="F:Bing.Net.Mail.Core.MailQueueManagerBase._tryStop">
            <summary>
            尝试停止运行
            </summary>
        </member>
        <member name="F:Bing.Net.Mail.Core.MailQueueManagerBase._thread">
            <summary>
            线程
            </summary>
        </member>
        <member name="P:Bing.Net.Mail.Core.MailQueueManagerBase.IsRunning">
            <summary>
            是否正在运行
            </summary>
        </member>
        <member name="P:Bing.Net.Mail.Core.MailQueueManagerBase.Count">
            <summary>
            队列数
            </summary>
        </member>
        <member name="M:Bing.Net.Mail.Core.MailQueueManagerBase.#ctor(Bing.Net.Mail.Configs.IEmailConfigProvider,Bing.Net.Mail.Abstractions.IMailQueueProvider)">
            <summary>
            初始化一个<see cref="T:Bing.Net.Mail.Core.MailQueueManagerBase"/>类型的实例
            </summary>
            <param name="emailConfigProvider">电子邮件配置提供器</param>
            <param name="mailQueueProvider">邮件队列提供程序</param>
        </member>
        <member name="M:Bing.Net.Mail.Core.MailQueueManagerBase.Run">
            <summary>
            运行
            </summary>
        </member>
        <member name="M:Bing.Net.Mail.Core.MailQueueManagerBase.Stop">
            <summary>
            停止
            </summary>
        </member>
        <member name="M:Bing.Net.Mail.Core.MailQueueManagerBase.StartSendMail">
            <summary>
            开始发送邮件
            </summary>
        </member>
        <member name="M:Bing.Net.Mail.Core.MailQueueManagerBase.SendMail(Bing.Net.Mail.Core.EmailBox)">
            <summary>
            发送邮件
            </summary>
            <param name="box">电子邮件</param>
        </member>
        <member name="M:Bing.Net.Mail.Core.MailQueueManagerBase.WriteLog(System.String,Bing.Logs.LogLevel)">
            <summary>
            写入日志
            </summary>
            <param name="log">日志</param>
            <param name="level">日志等级</param>
        </member>
        <member name="T:Bing.Net.Mail.Core.MailQueueProvider">
            <summary>
            邮件队列提供程序
            </summary>
        </member>
        <member name="F:Bing.Net.Mail.Core.MailQueueProvider.MailQueue">
            <summary>
            线程安全的邮件队列
            </summary>
        </member>
        <member name="P:Bing.Net.Mail.Core.MailQueueProvider.Count">
            <summary>
            队列邮件数量
            </summary>
        </member>
        <member name="P:Bing.Net.Mail.Core.MailQueueProvider.IsEmpty">
            <summary>
            队列是否为空
            </summary>
        </member>
        <member name="M:Bing.Net.Mail.Core.MailQueueProvider.Enqueue(Bing.Net.Mail.Core.EmailBox)">
            <summary>
            入队
            </summary>
            <param name="box">电子邮件</param>
        </member>
        <member name="M:Bing.Net.Mail.Core.MailQueueProvider.TryDequeue(Bing.Net.Mail.Core.EmailBox@)">
            <summary>
            尝试出队，获取电子邮件
            </summary>
            <param name="box">电子邮件</param>
            <returns></returns>
        </member>
        <member name="T:Bing.Net.Mail.Core.MailQueueService">
            <summary>
            邮件队列服务
            </summary>
        </member>
        <member name="F:Bing.Net.Mail.Core.MailQueueService._provider">
            <summary>
            邮件队列提供程序
            </summary>
        </member>
        <member name="M:Bing.Net.Mail.Core.MailQueueService.#ctor(Bing.Net.Mail.Abstractions.IMailQueueProvider)">
            <summary>
            初始化一个<see cref="T:Bing.Net.Mail.Core.MailQueueService"/>类型的实例
            </summary>
            <param name="provider">邮件队列提供程序</param>
        </member>
        <member name="M:Bing.Net.Mail.Core.MailQueueService.Enqueue(Bing.Net.Mail.Core.EmailBox)">
            <summary>
            入队
            </summary>
            <param name="box">电子邮件</param>
        </member>
        <member name="T:Bing.Net.Mail.Core.NullEmailSender">
            <summary>
            空电子邮件发送器
            </summary>
        </member>
        <member name="M:Bing.Net.Mail.Core.NullEmailSender.#ctor(Bing.Net.Mail.Configs.IEmailConfigProvider)">
            <summary>
            初始化一个<see cref="T:Bing.Net.Mail.Core.NullEmailSender"/>类型的实例
            </summary>
            <param name="provider">电子邮件配置提供器</param>
        </member>
        <member name="M:Bing.Net.Mail.Core.NullEmailSender.SendEmail(System.Net.Mail.MailMessage)">
            <summary>
            发送邮件
            </summary>
            <param name="mail">邮件</param>
        </member>
        <member name="M:Bing.Net.Mail.Core.NullEmailSender.SendEmailAsync(System.Net.Mail.MailMessage)">
            <summary>
            发送邮件
            </summary>
            <param name="mail">邮件</param>
            <returns></returns>
        </member>
        <member name="T:Bing.Net.Mail.Smtp.Extensions">
            <summary>
            邮件扩展
            </summary>
        </member>
        <member name="M:Bing.Net.Mail.Smtp.Extensions.AddSmtpEmail(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Bing.Net.Mail.Configs.EmailConfig})">
            <summary>
            注册MailKit邮件操作
            </summary>
            <param name="services">服务集合</param>
            <param name="setupAcion">配置操作</param>
        </member>
        <member name="M:Bing.Net.Mail.Smtp.Extensions.AddMailKit``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            注册MailKit邮件操作
            </summary>
            <typeparam name="TEmailConfigProvider">邮件配置提供器</typeparam>
            <param name="services">服务集合</param>
        </member>
        <member name="T:Bing.Net.Mail.Smtp.ISmtpEmailSender">
            <summary>
            基于SMTP的电子邮件发送器
            </summary>
        </member>
        <member name="M:Bing.Net.Mail.Smtp.ISmtpEmailSender.BuildClient">
            <summary>
            生成SMTP客户端
            </summary>
            <returns></returns>
        </member>
        <member name="T:Bing.Net.Mail.Smtp.SmtpEmailSender">
            <summary>
            基于SMTP的电子邮件发送器
            </summary>
        </member>
        <member name="F:Bing.Net.Mail.Smtp.SmtpEmailSender._configProvider">
            <summary>
            电子邮件配置提供器
            </summary>
        </member>
        <member name="M:Bing.Net.Mail.Smtp.SmtpEmailSender.#ctor(Bing.Net.Mail.Configs.IEmailConfigProvider)">
            <summary>
            初始化一个<see cref="T:Bing.Net.Mail.Smtp.SmtpEmailSender"/>类型的实例
            </summary>
            <param name="provider">电子邮件配置提供器</param>
        </member>
        <member name="M:Bing.Net.Mail.Smtp.SmtpEmailSender.SendEmail(System.Net.Mail.MailMessage)">
            <summary>
            发送邮件
            </summary>
            <param name="mail">邮件</param>
        </member>
        <member name="M:Bing.Net.Mail.Smtp.SmtpEmailSender.SendEmailAsync(System.Net.Mail.MailMessage)">
            <summary>
            发送邮件
            </summary>
            <param name="mail">邮件</param>
        </member>
        <member name="M:Bing.Net.Mail.Smtp.SmtpEmailSender.BuildClient">
            <summary>
            生成SMTP客户端
            </summary>
            <returns></returns>
        </member>
        <member name="T:Bing.Net.Mail.Smtp.SmtpMailQueueManager">
            <summary>
            基于SMTP的邮件队列管理器
            </summary>
        </member>
        <member name="F:Bing.Net.Mail.Smtp.SmtpMailQueueManager._smtpEmailSender">
            <summary>
            SMTP电子邮件发送器
            </summary>
        </member>
        <member name="M:Bing.Net.Mail.Smtp.SmtpMailQueueManager.#ctor(Bing.Net.Mail.Configs.IEmailConfigProvider,Bing.Net.Mail.Abstractions.IMailQueueProvider,Bing.Net.Mail.Smtp.ISmtpEmailSender)">
            <summary>
            初始化一个<see cref="T:Bing.Net.Mail.Smtp.SmtpMailQueueManager"/>类型的实例
            </summary>
            <param name="emailConfigProvider">电子邮件配置提供器</param>
            <param name="mailQueueProvider">邮件队列提供程序</param>
            <param name="smtpEmailSender">SMTP电子邮件发送器</param>
        </member>
        <member name="M:Bing.Net.Mail.Smtp.SmtpMailQueueManager.SendMail(Bing.Net.Mail.Core.EmailBox)">
            <summary>
            发送邮件
            </summary>
            <param name="box">电子邮件</param>
        </member>
        <member name="M:Bing.Net.Mail.Smtp.SmtpMailQueueManager.WriteLog(System.String,Bing.Logs.LogLevel)">
            <summary>
            写入日志
            </summary>
            <param name="log">日志</param>
            <param name="level">日志等级</param>
        </member>
        <member name="T:Bing.Properties.LibraryResource">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:Bing.Properties.LibraryResource.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:Bing.Properties.LibraryResource.Culture">
            <summary>
              重写当前线程的 CurrentUICulture 属性
              重写当前线程的 CurrentUICulture 属性。
            </summary>
        </member>
        <member name="P:Bing.Properties.LibraryResource.ConcurrencyExceptionMessage">
            <summary>
              查找类似 当前操作的数据已被其他人修改，请刷新后重试 的本地化字符串。
            </summary>
        </member>
        <member name="P:Bing.Properties.LibraryResource.InvalidIdCard">
            <summary>
              查找类似 身份证不正确 的本地化字符串。
            </summary>
        </member>
        <member name="P:Bing.Properties.LibraryResource.InvalidMobilePhone">
            <summary>
              查找类似 手机号不正确 的本地化字符串。
            </summary>
        </member>
        <member name="P:Bing.Properties.LibraryResource.NotSupportMoveToChildren">
            <summary>
              查找类似 不允许将节点移动到自己或子节点下 的本地化字符串。
            </summary>
        </member>
        <member name="P:Bing.Properties.LibraryResource.OnlyOnePredicate">
            <summary>
              查找类似 仅允许添加一个条件,条件：{0} 的本地化字符串。
            </summary>
        </member>
        <member name="P:Bing.Properties.LibraryResource.OrderIsEmptyForPage">
            <summary>
              查找类似 分页必须设置排序字段 的本地化字符串。
            </summary>
        </member>
        <member name="P:Bing.Properties.LibraryResource.TableIsEmpty">
            <summary>
              查找类似 必须设置表名 的本地化字符串。
            </summary>
        </member>
        <member name="T:Bing.Properties.R">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:Bing.Properties.R.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:Bing.Properties.R.Culture">
            <summary>
              重写当前线程的 CurrentUICulture 属性
              重写当前线程的 CurrentUICulture 属性。
            </summary>
        </member>
        <member name="P:Bing.Properties.R.DeleteSuccess">
            <summary>
              查找类似 删除成功 的本地化字符串。
            </summary>
        </member>
        <member name="P:Bing.Properties.R.GlobalDuplicateRequest">
            <summary>
              查找类似 其他用户正在执行该操作,请稍后再试 的本地化字符串。
            </summary>
        </member>
        <member name="P:Bing.Properties.R.IdIsEmpty">
            <summary>
              查找类似 Id不能为空 的本地化字符串。
            </summary>
        </member>
        <member name="P:Bing.Properties.R.Map_MapperIsNull">
            <summary>
              查找类似 MapperExtensions.Mapper不能为空，请先设置值 的本地化字符串。
            </summary>
        </member>
        <member name="P:Bing.Properties.R.Success">
            <summary>
              查找类似 操作成功 的本地化字符串。
            </summary>
        </member>
        <member name="P:Bing.Properties.R.SystemError">
            <summary>
              查找类似 系统忙，请稍后再试 的本地化字符串。
            </summary>
        </member>
        <member name="P:Bing.Properties.R.UserDuplicateRequest">
            <summary>
              查找类似 请不要重复提交 的本地化字符串。
            </summary>
        </member>
        <member name="T:Bing.Schedulers.IJob">
            <summary>
            作业
            </summary>
        </member>
        <member name="T:Bing.Schedulers.IScheduler">
            <summary>
            调度器
            </summary>
        </member>
        <member name="M:Bing.Schedulers.IScheduler.StartAsync">
            <summary>
            启动
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bing.Schedulers.IScheduler.PauseAsync">
            <summary>
            暂停
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bing.Schedulers.IScheduler.ResumeAsync">
            <summary>
            恢复
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bing.Schedulers.IScheduler.StopAsync">
            <summary>
            停止
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bing.Schedulers.IScheduler.AddJobAsync``1">
            <summary>
            添加作业
            </summary>
            <typeparam name="TJob">作业类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:Bing.Schedulers.IScheduler.ScanJobAsync(System.Reflection.Assembly[])">
            <summary>
            扫描并添加作业
            </summary>
            <param name="assemblies">程序集列表</param>
            <returns></returns>
        </member>
        <member name="T:Bing.Security.AuthorizationStatus">
            <summary>
            权限检查结果状态
            </summary>
        </member>
        <member name="F:Bing.Security.AuthorizationStatus.Ok">
            <summary>
            权限检查通过
            </summary>
        </member>
        <member name="F:Bing.Security.AuthorizationStatus.Unauthorized">
            <summary>
            未登录而被拒绝
            </summary>
        </member>
        <member name="F:Bing.Security.AuthorizationStatus.LoginTimeout">
            <summary>
            已登录，但已超时
            </summary>
        </member>
        <member name="F:Bing.Security.AuthorizationStatus.Forbidden">
            <summary>
            已登录，但权限不足
            </summary>
        </member>
        <member name="F:Bing.Security.AuthorizationStatus.NoFound">
            <summary>
            找不到指定资源
            </summary>
        </member>
        <member name="F:Bing.Security.AuthorizationStatus.Locked">
            <summary>
            资源被锁定
            </summary>
        </member>
        <member name="F:Bing.Security.AuthorizationStatus.OtherDeviceLogin">
            <summary>
            其它设备登录
            </summary>
        </member>
        <member name="F:Bing.Security.AuthorizationStatus.Error">
            <summary>
            权限检查出现错误
            </summary>
        </member>
        <member name="T:Bing.Security.DataAuthOperation">
            <summary>
            数据权限操作
            </summary>
        </member>
        <member name="F:Bing.Security.DataAuthOperation.Read">
            <summary>
            读取
            </summary>
        </member>
        <member name="F:Bing.Security.DataAuthOperation.Update">
            <summary>
            更新
            </summary>
        </member>
        <member name="F:Bing.Security.DataAuthOperation.Delete">
            <summary>
            删除
            </summary>
        </member>
        <member name="T:Bing.Security.Encryptors.IEncryptor">
            <summary>
            加密器
            </summary>
        </member>
        <member name="M:Bing.Security.Encryptors.IEncryptor.Encrypt(System.String)">
            <summary>
            加密
            </summary>
            <param name="data">原始数据</param>
        </member>
        <member name="M:Bing.Security.Encryptors.IEncryptor.Decrypt(System.String)">
            <summary>
            解密
            </summary>
            <param name="data">已加密数据</param>
        </member>
        <member name="T:Bing.Security.Encryptors.NullEncryptor">
            <summary>
            空加密器
            </summary>
        </member>
        <member name="F:Bing.Security.Encryptors.NullEncryptor.Instance">
            <summary>
            空加密器实例
            </summary>
        </member>
        <member name="M:Bing.Security.Encryptors.NullEncryptor.Encrypt(System.String)">
            <summary>
            加密
            </summary>
            <param name="data">原始数据</param>
        </member>
        <member name="M:Bing.Security.Encryptors.NullEncryptor.Decrypt(System.String)">
            <summary>
            解密
            </summary>
            <param name="data">已加密数据</param>
        </member>
        <member name="T:Bing.Security.Principals.UnauthenticatedIdentity">
            <summary>
            未认证的身份标识
            </summary>
        </member>
        <member name="P:Bing.Security.Principals.UnauthenticatedIdentity.IsAuthenticated">
            <summary>
            是否认证
            </summary>
        </member>
        <member name="F:Bing.Security.Principals.UnauthenticatedIdentity.Instance">
            <summary>
            未认证的身份标识实例
            </summary>
        </member>
        <member name="T:Bing.Security.Principals.UnauthenticatedPrincipal">
            <summary>
            未认证安全主体
            </summary>
        </member>
        <member name="P:Bing.Security.Principals.UnauthenticatedPrincipal.Identity">
            <summary>
            身份标识
            </summary>
        </member>
        <member name="M:Bing.Security.Principals.UnauthenticatedPrincipal.#ctor">
            <summary>
            初始化一个<see cref="T:Bing.Security.Principals.UnauthenticatedPrincipal"/>类型的实例
            </summary>
        </member>
        <member name="F:Bing.Security.Principals.UnauthenticatedPrincipal.Instance">
            <summary>
            未认证安全主体
            </summary>
        </member>
        <member name="T:Bing.Serialization.Binary.BinarySerializationUtil">
            <summary>
            二进制序列化工具
            </summary>
        </member>
        <member name="M:Bing.Serialization.Binary.BinarySerializationUtil.Serialize(System.Object)">
            <summary>
            序列化
            </summary>
            <param name="obj">对象</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Serialization.Binary.BinarySerializationUtil.Serialize(System.Object,System.IO.Stream)">
            <summary>
            序列化
            </summary>
            <param name="obj">对象</param>
            <param name="stream">流</param>
        </member>
        <member name="M:Bing.Serialization.Binary.BinarySerializationUtil.Deserialize(System.Byte[])">
            <summary>
            反序列化
            </summary>
            <param name="bytes">字节数组</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Serialization.Binary.BinarySerializationUtil.Deserialize(System.IO.Stream)">
            <summary>
            反序列化
            </summary>
            <param name="stream">流</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Serialization.Binary.BinarySerializationUtil.DeserializeExtended(System.Byte[])">
            <summary>
            反序列化。允许反序列化运行时加载的程序集定义的对象
            </summary>
            <param name="bytes">字节数组</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Serialization.Binary.BinarySerializationUtil.DeserializeExtended(System.IO.Stream)">
            <summary>
            反序列化。允许反序列化运行时加载的程序集定义的对象
            </summary>
            <param name="stream">流</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Serialization.Binary.BinarySerializationUtil.CreateBinaryFormatter(System.Boolean)">
            <summary>
            创建二进制格式化程序
            </summary>
            <param name="extended">是否允许序列化运行时对象</param>
            <returns></returns>
        </member>
        <member name="T:Bing.Serialization.Binary.BinarySerializationUtil.ExtendedSerializationBinder">
            <summary>
            扩展序列化绑定器。允许序列化在运行时加载的程序集中定义的对象
            </summary>
        </member>
        <member name="M:Bing.Serialization.Binary.BinarySerializationUtil.ExtendedSerializationBinder.BindToType(System.String,System.String)">
            <summary>
            绑定类型
            </summary>
            <param name="assemblyName">程序集名称</param>
            <param name="typeName">类型名称</param>
            <returns></returns>
        </member>
        <member name="T:Bing.Serialization.DefaultObjectSerializer">
            <summary>
            默认对象序列化器
            </summary>
        </member>
        <member name="F:Bing.Serialization.DefaultObjectSerializer._serviceProvider">
            <summary>
            服务提供程序
            </summary>
        </member>
        <member name="M:Bing.Serialization.DefaultObjectSerializer.#ctor(System.IServiceProvider)">
            <summary>
            初始化一个<see cref="T:Bing.Serialization.DefaultObjectSerializer"/>类型的实例
            </summary>
            <param name="serviceProvider">服务提供程序</param>
        </member>
        <member name="M:Bing.Serialization.DefaultObjectSerializer.Serialize``1(``0)">
            <summary>
            序列化
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="obj">对象</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Serialization.DefaultObjectSerializer.Deserialize``1(System.Byte[])">
            <summary>
            反序列化
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="bytes">字节数组</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Serialization.DefaultObjectSerializer.AutoSerialize``1(``0)">
            <summary>
            自动序列化
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="obj">对象</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Serialization.DefaultObjectSerializer.AutoDeserialize``1(System.Byte[])">
            <summary>
            自动反序列化
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="bytes">字节数组</param>
            <returns></returns>
        </member>
        <member name="T:Bing.Serialization.IObjectSerializer">
            <summary>
            对象序列化器
            </summary>
        </member>
        <member name="M:Bing.Serialization.IObjectSerializer.Serialize``1(``0)">
            <summary>
            序列化
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="obj">对象</param>
        </member>
        <member name="M:Bing.Serialization.IObjectSerializer.Deserialize``1(System.Byte[])">
            <summary>
            反序列化
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="bytes">字节数组</param>
        </member>
        <member name="T:Bing.Serialization.IObjectSerializer`1">
            <summary>
            对象序列化器
            </summary>
            <typeparam name="T">数据类型</typeparam>
        </member>
        <member name="M:Bing.Serialization.IObjectSerializer`1.Serialize(`0)">
            <summary>
            序列化
            </summary>
            <param name="obj">对象</param>
        </member>
        <member name="M:Bing.Serialization.IObjectSerializer`1.Deserialize(System.Byte[])">
            <summary>
            反序列化
            </summary>
            <param name="bytes">字节数组</param>
        </member>
        <member name="T:Bing.Sessions.ISession">
            <summary>
            用户会话
            </summary>
        </member>
        <member name="P:Bing.Sessions.ISession.UserId">
            <summary>
            用户标识
            </summary>
        </member>
        <member name="P:Bing.Sessions.ISession.IsAuthenticated">
            <summary>
            是否认证
            </summary>
        </member>
        <member name="T:Bing.Sessions.NullSession">
            <summary>
            空用户会话
            </summary>
        </member>
        <member name="P:Bing.Sessions.NullSession.UserId">
            <summary>
            用户编号
            </summary>
        </member>
        <member name="P:Bing.Sessions.NullSession.UserName">
            <summary>
            用户名
            </summary>
        </member>
        <member name="P:Bing.Sessions.NullSession.IsAuthenticated">
            <summary>
            是否认证
            </summary>
        </member>
        <member name="F:Bing.Sessions.NullSession.Instance">
            <summary>
            空用户会话实例
            </summary>
        </member>
        <member name="T:Bing.Sessions.Session">
            <summary>
            用户会话
            </summary>
        </member>
        <member name="P:Bing.Sessions.Session.UserId">
            <summary>
            用户标识
            </summary>
        </member>
        <member name="P:Bing.Sessions.Session.IsAuthenticated">
            <summary>
            是否认证
            </summary>
        </member>
        <member name="F:Bing.Sessions.Session.Instance">
            <summary>
            用户会话
            </summary>
        </member>
        <member name="F:Bing.Sessions.Session.Null">
            <summary>
            空用户会话
            </summary>
        </member>
        <member name="T:Bing.SqlBuilder.Conditions.ConditionBuilder">
            <summary>
            条件生成器
            </summary>
        </member>
        <member name="M:Bing.SqlBuilder.Conditions.ConditionBuilder.#ctor(System.Boolean,System.String,System.Boolean)">
            <summary>
            初始化一个<see cref="T:Bing.SqlBuilder.Conditions.ConditionBuilder"/>类型的实例
            </summary>
            <param name="isExcludeEmpty">是否排除空或null值</param>
            <param name="parameterKey">参数键</param>
            <param name="isBuildParameterSql">否生成参数化Sql语句</param>
        </member>
        <member name="M:Bing.SqlBuilder.Conditions.ConditionBuilder.Clone">
            <summary>
            克隆对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bing.SqlBuilder.Conditions.ConditionBuilder.ToString">
            <summary>
            转化成Sql条件语句（包含Where关键字）
            </summary>
            <returns></returns>
        </member>
        <member name="T:Bing.SqlBuilder.Conditions.ConditionBuilderBase">
            <summary>
            条件生成器基类
            </summary>
        </member>
        <member name="F:Bing.SqlBuilder.Conditions.ConditionBuilderBase.ParameterPrefix">
            <summary>
            参数前缀
            </summary>
        </member>
        <member name="F:Bing.SqlBuilder.Conditions.ConditionBuilderBase.ParameterKey">
            <summary>
            参数键
            </summary>
        </member>
        <member name="F:Bing.SqlBuilder.Conditions.ConditionBuilderBase.ConditionAppendBuilder">
            <summary>
            条件拼接器
            </summary>
        </member>
        <member name="F:Bing.SqlBuilder.Conditions.ConditionBuilderBase.IsExcludeEmpty">
            <summary>
            是否排除空或null值，true:排除字段为空或null时则不作为查询条件
            </summary>
        </member>
        <member name="F:Bing.SqlBuilder.Conditions.ConditionBuilderBase.IsBuildParameterSql">
            <summary>
            是否生成参数化Sql语句
            </summary>
        </member>
        <member name="P:Bing.SqlBuilder.Conditions.ConditionBuilderBase.Length">
            <summary>
            参数长度
            </summary>
        </member>
        <member name="F:Bing.SqlBuilder.Conditions.ConditionBuilderBase.ParamDictionary">
            <summary>
            参数字典，记录参数信息（参数名-参数值）
            </summary>
        </member>
        <member name="P:Bing.SqlBuilder.Conditions.ConditionBuilderBase.ParamContext">
            <summary>
            参数上下文
            </summary>
        </member>
        <member name="M:Bing.SqlBuilder.Conditions.ConditionBuilderBase.#ctor(System.Boolean,System.String,System.Boolean)">
            <summary>
            初始化一个<see cref="T:Bing.SqlBuilder.Conditions.ConditionBuilderBase"/>类型的实例
            </summary>
            <param name="isExcludeEmpty">是否排除空或null值</param>
            <param name="parameterKey">参数键</param>
            <param name="isBuildParameterSql">否生成参数化Sql语句</param>
        </member>
        <member name="M:Bing.SqlBuilder.Conditions.ConditionBuilderBase.Clear">
            <summary>
            清空条件
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bing.SqlBuilder.Conditions.ConditionBuilderBase.Append(Bing.SqlBuilder.Conditions.SqlOperator,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            添加条件
            </summary>
            <param name="operator">操作符</param>
            <param name="conditionDict">条件字典，例如：A.Name 1</param>
            <returns></returns>
        </member>
        <member name="M:Bing.SqlBuilder.Conditions.ConditionBuilderBase.Append(Bing.SqlBuilder.Conditions.RelationType,Bing.SqlBuilder.Conditions.SqlOperator,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            添加条件
            </summary>
            <param name="relationType">关联运算符</param>
            <param name="operator">操作符</param>
            <param name="conditionDict">条件字典，例如：A.Name 1</param>
            <returns></returns>
        </member>
        <member name="M:Bing.SqlBuilder.Conditions.ConditionBuilderBase.Append``1(Bing.SqlBuilder.Conditions.RelationType,System.String,Bing.SqlBuilder.Conditions.SqlOperator,``0[])">
            <summary>
            添加条件
            </summary>
            <typeparam name="T">字段值类型</typeparam>
            <param name="relationType">关联运算符</param>
            <param name="fieldName">字段名</param>
            <param name="operator">操作符</param>
            <param name="fieldValue">字段值，注：1、不可谓数组;2、Between时，此字段必须填两个值</param>
            <returns></returns>
        </member>
        <member name="M:Bing.SqlBuilder.Conditions.ConditionBuilderBase.Append``1(System.String,Bing.SqlBuilder.Conditions.SqlOperator,``0[])">
            <summary>
            添加条件
            </summary>
            <typeparam name="T">字段值类型</typeparam>
            <param name="fieldName">字段名</param>
            <param name="operator">操作符</param>
            <param name="fieldValue">字段值，注：1、不可谓数组;2、Between时，此字段必须填两个值</param>
            <returns></returns>
        </member>
        <member name="M:Bing.SqlBuilder.Conditions.ConditionBuilderBase.AppendRaw(Bing.SqlBuilder.Conditions.RelationType,System.String)">
            <summary>
            添加Sql语句条件，允许你写任何不支持上面的方法，所有它会给你最大的灵活性
            </summary>
            <param name="relationType">关联运算符</param>
            <param name="sql">Sql语句</param>
            <returns></returns>
        </member>
        <member name="M:Bing.SqlBuilder.Conditions.ConditionBuilderBase.AppendRaw(System.String,System.Object[])">
            <summary>
            添加Sql语句条件，允许你写任何不支持上面的方法，所有它会给你最大的灵活性
            </summary>
            <param name="sql">Sql语句</param>
            <param name="param">参数</param>
            <returns></returns>
        </member>
        <member name="M:Bing.SqlBuilder.Conditions.ConditionBuilderBase.Block(Bing.SqlBuilder.Conditions.RelationType,Bing.SqlBuilder.Conditions.IConditionBuilder)">
            <summary>
            添加含有括号的条件
            </summary>
            <param name="relationType">关联运算符</param>
            <param name="condition">条件生成器</param>
            <returns></returns>
        </member>
        <member name="M:Bing.SqlBuilder.Conditions.ConditionBuilderBase.Clone">
            <summary>
            克隆对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bing.SqlBuilder.Conditions.ConditionBuilderBase.IsContinue``1(``0[])">
            <summary>
            是否跳过此拼接条件
            </summary>
            <typeparam name="T">字段值类型</typeparam>
            <param name="fieldValue">字段值</param>
            <returns>true:跳过,false:不跳过</returns>
        </member>
        <member name="M:Bing.SqlBuilder.Conditions.ConditionBuilderBase.GetFieldName(System.String)">
            <summary>
            获取字段名
            </summary>
            <param name="fieldName">字段名</param>
            <returns></returns>
        </member>
        <member name="M:Bing.SqlBuilder.Conditions.ConditionBuilderBase.GetFieldValue``1(``0[])">
            <summary>
            获取字段值
            </summary>
            <typeparam name="T">字段值类型</typeparam>
            <param name="fieldValue">字段值</param>
            <returns></returns>
        </member>
        <member name="M:Bing.SqlBuilder.Conditions.ConditionBuilderBase.GetArrayFieldValue``1(``0[])">
            <summary>
            获取数组字段值
            </summary>
            <typeparam name="T">字段值类型</typeparam>
            <param name="fieldValue">字段值</param>
            <returns></returns>
        </member>
        <member name="M:Bing.SqlBuilder.Conditions.ConditionBuilderBase.AddParameter(System.Object)">
            <summary>
            添加参数
            </summary>
            <param name="fieldValue">字段值</param>
            <returns></returns>
        </member>
        <member name="M:Bing.SqlBuilder.Conditions.ConditionBuilderBase.AddParameter(System.String,System.Object)">
            <summary>
            添加参数
            </summary>
            <param name="fieldName">字段名</param>
            <param name="fieldValue">字段值</param>
            <returns></returns>
        </member>
        <member name="M:Bing.SqlBuilder.Conditions.ConditionBuilderBase.GetParamDict">
            <summary>
            获取参数字典
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bing.SqlBuilder.Conditions.ConditionBuilderBase.GetRelation(Bing.SqlBuilder.Conditions.RelationType)">
            <summary>
            获取关联类型字符串
            </summary>
            <param name="relationType">关联类型</param>
            <returns></returns>
        </member>
        <member name="M:Bing.SqlBuilder.Conditions.ConditionBuilderBase.GetOperator(Bing.SqlBuilder.Conditions.SqlOperator)">
            <summary>
            获取操作符字符串
            </summary>
            <param name="operator">操作符类型</param>
            <returns></returns>
        </member>
        <member name="M:Bing.SqlBuilder.Conditions.ConditionBuilderBase.ToString(Bing.SqlBuilder.Conditions.IConditionBuilder)">
            <summary>
            获取 ConditionBuilder 中Sql条件语句（包含Where关键字）
            </summary>
            <param name="condition">条件生成器</param>
            <returns>若condition为null时，返回空字符串</returns>
        </member>
        <member name="M:Bing.SqlBuilder.Conditions.ConditionBuilderBase.GetParamDict(Bing.SqlBuilder.Conditions.IConditionBuilder)">
            <summary>
            获取 ConditionBuilder 中Sql参数字典
            </summary>
            <param name="conditionBuilder">条件生成器</param>
            <returns></returns>
        </member>
        <member name="T:Bing.SqlBuilder.Conditions.IConditionBuilder">
            <summary>
            条件生成器
            </summary>
        </member>
        <member name="M:Bing.SqlBuilder.Conditions.IConditionBuilder.Clear">
            <summary>
            清空条件
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bing.SqlBuilder.Conditions.IConditionBuilder.Append(Bing.SqlBuilder.Conditions.SqlOperator,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            添加条件
            </summary>
            <param name="operator">操作符</param>
            <param name="conditionDict">条件字典，例如：A.Name 1</param>
            <returns></returns>
        </member>
        <member name="M:Bing.SqlBuilder.Conditions.IConditionBuilder.Append(Bing.SqlBuilder.Conditions.RelationType,Bing.SqlBuilder.Conditions.SqlOperator,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            添加条件
            </summary>
            <param name="relationType">关联运算符</param>
            <param name="operator">操作符</param>
            <param name="conditionDict">条件字典，例如：A.Name 1</param>
            <returns></returns>
        </member>
        <member name="M:Bing.SqlBuilder.Conditions.IConditionBuilder.Append``1(Bing.SqlBuilder.Conditions.RelationType,System.String,Bing.SqlBuilder.Conditions.SqlOperator,``0[])">
            <summary>
            添加条件
            </summary>
            <typeparam name="T">字段值类型</typeparam>
            <param name="relationType">关联运算符</param>
            <param name="fieldName">字段名</param>
            <param name="operator">操作符</param>
            <param name="fieldValue">字段值，注：1、不可谓数组;2、Between时，此字段必须填两个值</param>
            <returns></returns>
        </member>
        <member name="M:Bing.SqlBuilder.Conditions.IConditionBuilder.Append``1(System.String,Bing.SqlBuilder.Conditions.SqlOperator,``0[])">
            <summary>
            添加条件
            </summary>
            <typeparam name="T">字段值类型</typeparam>
            <param name="fieldName">字段名</param>
            <param name="operator">操作符</param>
            <param name="fieldValue">字段值，注：1、不可谓数组;2、Between时，此字段必须填两个值</param>
            <returns></returns>
        </member>
        <member name="M:Bing.SqlBuilder.Conditions.IConditionBuilder.AppendRaw(Bing.SqlBuilder.Conditions.RelationType,System.String)">
            <summary>
            添加Sql语句条件，允许你写任何不支持上面的方法，所有它会给你最大的灵活性
            </summary>
            <param name="relationType">关联运算符</param>
            <param name="sql">Sql语句</param>
            <returns></returns>
        </member>
        <member name="M:Bing.SqlBuilder.Conditions.IConditionBuilder.AppendRaw(System.String,System.Object[])">
            <summary>
            添加Sql语句条件，默认And连接，允许你写任何不支持上面的方法，所有它会给你最大的灵活性
            </summary>
            <param name="sql">Sql语句</param>
            <param name="param">参数</param>
            <returns></returns>
        </member>
        <member name="M:Bing.SqlBuilder.Conditions.IConditionBuilder.Block(Bing.SqlBuilder.Conditions.RelationType,Bing.SqlBuilder.Conditions.IConditionBuilder)">
            <summary>
            添加含有括号的条件
            </summary>
            <param name="relationType">关联运算符</param>
            <param name="condition">条件生成器</param>
            <returns></returns>
        </member>
        <member name="M:Bing.SqlBuilder.Conditions.IConditionBuilder.Clone">
            <summary>
            克隆对象
            </summary>
            <returns></returns>
        </member>
        <member name="T:Bing.SqlBuilder.Conditions.ParamContext">
            <summary>
            参数上下文
            </summary>
        </member>
        <member name="F:Bing.SqlBuilder.Conditions.ParamContext.Index">
            <summary>
            参数索引
            </summary>
        </member>
        <member name="T:Bing.SqlBuilder.Conditions.RelationType">
            <summary>
            关联类型：And、Or
            </summary>
        </member>
        <member name="F:Bing.SqlBuilder.Conditions.RelationType.And">
            <summary>
            And
            </summary>
        </member>
        <member name="F:Bing.SqlBuilder.Conditions.RelationType.Or">
            <summary>
            Or
            </summary>
        </member>
        <member name="T:Bing.SqlBuilder.Conditions.SqlOperator">
            <summary>
            Sql操作符
            </summary>
        </member>
        <member name="F:Bing.SqlBuilder.Conditions.SqlOperator.Equal">
            <summary>
            等于 =
            </summary>
        </member>
        <member name="F:Bing.SqlBuilder.Conditions.SqlOperator.NotEqual">
            <summary>
            不等于 &lt;&gt;
            </summary>
        </member>
        <member name="F:Bing.SqlBuilder.Conditions.SqlOperator.GreaterThan">
            <summary>
            大于 &gt;
            </summary>
        </member>
        <member name="F:Bing.SqlBuilder.Conditions.SqlOperator.GreaterEqual">
            <summary>
            大于等于 &gt;=
            </summary>
        </member>
        <member name="F:Bing.SqlBuilder.Conditions.SqlOperator.LessThan">
            <summary>
            小于 &lt;
            </summary>
        </member>
        <member name="F:Bing.SqlBuilder.Conditions.SqlOperator.LessEqual">
            <summary>
            小于等于 &lt;=
            </summary>
        </member>
        <member name="F:Bing.SqlBuilder.Conditions.SqlOperator.Starts">
            <summary>
            头匹配
            </summary>
        </member>
        <member name="F:Bing.SqlBuilder.Conditions.SqlOperator.Ends">
            <summary>
            尾匹配
            </summary>
        </member>
        <member name="F:Bing.SqlBuilder.Conditions.SqlOperator.Contains">
            <summary>
            模糊匹配 like
            </summary>
        </member>
        <member name="F:Bing.SqlBuilder.Conditions.SqlOperator.NotContains">
            <summary>
            模糊非匹配 not like
            </summary>
        </member>
        <member name="F:Bing.SqlBuilder.Conditions.SqlOperator.In">
            <summary>
            In
            </summary>
        </member>
        <member name="F:Bing.SqlBuilder.Conditions.SqlOperator.NotIn">
            <summary>
            Not In
            </summary>
        </member>
        <member name="F:Bing.SqlBuilder.Conditions.SqlOperator.Between">
            <summary>
            范围
            </summary>
        </member>
        <member name="F:Bing.SqlBuilder.Conditions.SqlOperator.IsNull">
            <summary>
            Is Null
            </summary>
        </member>
        <member name="F:Bing.SqlBuilder.Conditions.SqlOperator.IsNotNull">
            <summary>
            Is Not Null
            </summary>
        </member>
        <member name="T:Bing.SqlBuilder.SqlBuilderException">
            <summary>
            Sql生成器异常
            </summary>
        </member>
        <member name="M:Bing.SqlBuilder.SqlBuilderException.#ctor(System.String)">
            <summary>
            初始化一个<see cref="T:Bing.SqlBuilder.SqlBuilderException"/>类型的实例
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:Bing.SqlBuilder.SqlBusinessLogicOptions">
            <summary>
            Sql业务逻辑配置
            </summary>
        </member>
        <member name="F:Bing.SqlBuilder.SqlBusinessLogicOptions.FieldId">
            <summary>
            主键字段
            </summary>
        </member>
        <member name="F:Bing.SqlBuilder.SqlBusinessLogicOptions.FieldParentId">
            <summary>
            上级字段
            </summary>
        </member>
        <member name="F:Bing.SqlBuilder.SqlBusinessLogicOptions.FieldCode">
            <summary>
            编码字段
            </summary>
        </member>
        <member name="T:Bing.Tracing.CorrelationIdOptions">
            <summary>
            跟踪关联ID配置选项信息
            </summary>
        </member>
        <member name="P:Bing.Tracing.CorrelationIdOptions.HttpHeaderName">
            <summary>
            Http请求头名称
            </summary>
        </member>
        <member name="P:Bing.Tracing.CorrelationIdOptions.SetResponseHeader">
            <summary>
            是否将跟踪关联ID设置在响应头
            </summary>
        </member>
        <member name="T:Bing.Tracing.DefaultCorrelationIdProvider">
            <summary>
            默认跟踪关联ID提供程序
            </summary>
        </member>
        <member name="M:Bing.Tracing.DefaultCorrelationIdProvider.Get">
            <summary>
            跟踪关联ID提供程序
            </summary>
        </member>
        <member name="M:Bing.Tracing.DefaultCorrelationIdProvider.CreateNewCorrelationId">
            <summary>
            创建新跟踪关联ID
            </summary>
        </member>
        <member name="T:Bing.Tracing.ICorrelationIdProvider">
            <summary>
            跟踪关联ID提供程序
            </summary>
        </member>
        <member name="M:Bing.Tracing.ICorrelationIdProvider.Get">
            <summary>
            获取跟踪关联ID
            </summary>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.ServiceCollectionCommonExtensions">
            <summary>
            服务集合 - 通用 扩展
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionCommonExtensions.IsAdded``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            是否已注册指定类型
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="services">服务集合</param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionCommonExtensions.IsAdded(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type)">
            <summary>
            是否已注册指定类型
            </summary>
            <param name="services">服务集合</param>
            <param name="type">类型</param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionCommonExtensions.GetSingletonInstanceOrNull``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            获取单例注册服务对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="services">服务集合</param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionCommonExtensions.GetSingletonInstance``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            获取单例注册服务对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="services">服务集合</param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionCommonExtensions.GetOrAdd(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.DependencyInjection.ServiceDescriptor)">
            <summary>
            如果指定服务不存在，则添加指定服务
            </summary>
            <param name="services">服务集合</param>
            <param name="toAddDescriptor">服务描述</param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionCommonExtensions.GetOrAddTypeFinder``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{Bing.Reflections.IAllAssemblyFinder,``0})">
            <summary>
            获取或添加指定类型查找器
            </summary>
            <typeparam name="TTypeFinder">类型查找器类型</typeparam>
            <param name="services">服务集合</param>
            <param name="factory">实例工厂</param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionCommonExtensions.GetOrAddSingletonInstance``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{``0})">
            <summary>
            如果指定服务不存在，创建实例并添加
            </summary>
            <typeparam name="TServiceType">服务类型</typeparam>
            <param name="services">服务集合</param>
            <param name="factory">实例工厂</param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionCommonExtensions.BatchRegisterService(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type[],Microsoft.Extensions.DependencyInjection.ServiceLifetime)">
            <summary>
            批量注册服务
            </summary>
            <param name="services">服务集合</param>
            <param name="types">类型集合</param>
            <param name="serviceLifetime">服务生命周期</param>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.ChineseAttribute">
            <summary>
            中文验证
            </summary>
        </member>
        <member name="F:System.ComponentModel.DataAnnotations.ChineseAttribute.ErrorMsg">
            <summary>
            错误消息
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.ChineseAttribute.FormatErrorMessage(System.String)">
            <summary>
            格式化错误消息
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.ChineseAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            是否验证通过
            </summary>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.HttpUrlAddressAttribute">
            <summary>
            Url地址验证
            </summary>
        </member>
        <member name="F:System.ComponentModel.DataAnnotations.HttpUrlAddressAttribute.ErrorMsg">
            <summary>
            错误消息
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.HttpUrlAddressAttribute.FormatErrorMessage(System.String)">
            <summary>
            格式化错误消息
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.HttpUrlAddressAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            是否验证通过
            </summary>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.IdCardAttribute">
            <summary>
            身份证验证
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.IdCardAttribute.FormatErrorMessage(System.String)">
            <summary>
            格式化错误消息
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.IdCardAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            是否验证通过
            </summary>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.LetterAttribute">
            <summary>
            英文字母验证
            </summary>
        </member>
        <member name="F:System.ComponentModel.DataAnnotations.LetterAttribute.ErrorMsg">
            <summary>
            错误消息
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.LetterAttribute.FormatErrorMessage(System.String)">
            <summary>
            格式化错误消息
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.LetterAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            是否验证通过
            </summary>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.MoneyAttribute">
            <summary>
            金额验证
            </summary>
        </member>
        <member name="F:System.ComponentModel.DataAnnotations.MoneyAttribute.ErrorMsg">
            <summary>
            错误消息
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.MoneyAttribute.Min">
            <summary>
            最小值
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.MoneyAttribute.Max">
            <summary>
            最大值
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.MoneyAttribute.#ctor(System.Decimal,System.Decimal)">
            <summary>
            初始化一个<see cref="T:System.ComponentModel.DataAnnotations.MoneyAttribute"/>类型的实例
            </summary>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.MoneyAttribute.FormatErrorMessage(System.String)">
            <summary>
            格式化错误消息
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.MoneyAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            是否验证通过
            </summary>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.PlateNumberOfChinaAttribute">
            <summary>
            车牌号验证
            </summary>
        </member>
        <member name="F:System.ComponentModel.DataAnnotations.PlateNumberOfChinaAttribute.ErrorMsg">
            <summary>
            错误消息
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.PlateNumberOfChinaAttribute.FormatErrorMessage(System.String)">
            <summary>
            格式化错误消息
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.PlateNumberOfChinaAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            是否验证通过
            </summary>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.PostalCodeOfChinaAttribute">
            <summary>
            邮政编码验证
            </summary>
        </member>
        <member name="F:System.ComponentModel.DataAnnotations.PostalCodeOfChinaAttribute.ErrorMsg">
            <summary>
            错误消息
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.PostalCodeOfChinaAttribute.FormatErrorMessage(System.String)">
            <summary>
            格式化错误消息
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.PostalCodeOfChinaAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            是否验证通过
            </summary>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.QQAttribute">
            <summary>
            QQ验证
            </summary>
        </member>
        <member name="F:System.ComponentModel.DataAnnotations.QQAttribute.ErrorMsg">
            <summary>
            错误消息
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.QQAttribute.FormatErrorMessage(System.String)">
            <summary>
            格式化错误消息
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.QQAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            是否验证通过
            </summary>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.TelNoOfChinaAttribute">
            <summary>
            固定电话号码验证
            </summary>
        </member>
        <member name="F:System.ComponentModel.DataAnnotations.TelNoOfChinaAttribute.ErrorMsg">
            <summary>
            错误消息
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.TelNoOfChinaAttribute.FormatErrorMessage(System.String)">
            <summary>
            格式化错误消息
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.TelNoOfChinaAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            是否验证通过
            </summary>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.WechatNoAttribute">
            <summary>
            微信号验证
            </summary>
        </member>
        <member name="F:System.ComponentModel.DataAnnotations.WechatNoAttribute.ErrorMsg">
            <summary>
            错误消息
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.WechatNoAttribute.FormatErrorMessage(System.String)">
            <summary>
            格式化错误消息
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.WechatNoAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            是否验证通过
            </summary>
        </member>
    </members>
</doc>
