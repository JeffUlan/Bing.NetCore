<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Bing.Datas.EntityFramework</name>
    </assembly>
    <members>
        <member name="T:Bing.Datas.EntityFramework.Conventions.BingCoreConventionSetBuilder">
            <summary>
            Bing 核心约束集合生成器
            </summary>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Conventions.BingCoreConventionSetBuilder.#ctor(Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.CoreConventionSetBuilderDependencies)">
            <summary>
            初始化一个<see cref="T:Bing.Datas.EntityFramework.Conventions.BingCoreConventionSetBuilder"/>类型的实例
            </summary>
            <param name="dependencies">依赖</param>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Conventions.BingCoreConventionSetBuilder.CreateConventionSet">
            <summary>
            创建约束集合
            </summary>
            <returns></returns>
        </member>
        <member name="T:Bing.Datas.EntityFramework.Conventions.DecimalPrecisionAttributeConvention">
            <summary>
            Decimal精确度约定，用于ModelBuilder全局设置Decimal精确度属性
            </summary>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Conventions.DecimalPrecisionAttributeConvention.Apply(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder,Bing.Datas.Attributes.DecimalPrecisionAttribute,System.Reflection.MemberInfo)">
            <summary>
            应用
            </summary>
        </member>
        <member name="T:Bing.Datas.EntityFramework.Conventions.HasMaxLengthAttributeConvention">
            <summary>
            最大长度约定，用于ModelBuilder全局设置最大长度
            </summary>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Conventions.HasMaxLengthAttributeConvention.Apply(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder,Bing.Datas.Attributes.HasMaxLengthAttribute,System.Reflection.MemberInfo)">
            <summary>
            应用
            </summary>
        </member>
        <member name="T:Bing.Datas.EntityFramework.Core.CompactRepositoryBase`2">
            <summary>
            仓储 - 配合持久化对象使用
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TPo">持久化对象类型</typeparam>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.CompactRepositoryBase`2.#ctor(Bing.Datas.Stores.IStore{`1,System.Guid})">
            <summary>
            初始化一个<see cref="T:Bing.Datas.EntityFramework.Core.CompactRepositoryBase`2"/>类型的实例
            </summary>
            <param name="store">存储器</param>
        </member>
        <member name="T:Bing.Datas.EntityFramework.Core.CompactRepositoryBase`3">
            <summary>
            仓储 - 配合持久化对象使用
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TPo">持久化对象类型</typeparam>
            <typeparam name="TKey">实体标识类型</typeparam>
        </member>
        <member name="F:Bing.Datas.EntityFramework.Core.CompactRepositoryBase`3._store">
            <summary>
            存储器
            </summary>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.CompactRepositoryBase`3.#ctor(Bing.Datas.Stores.IStore{`1,`2})">
            <summary>
            初始化一个<see cref="T:Bing.Datas.EntityFramework.Core.CompactRepositoryBase`3"/>类型的实例
            </summary>
            <param name="store">存储器</param>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.CompactRepositoryBase`3.ToEntity(`1)">
            <summary>
            将持久化对象转成实体
            </summary>
            <param name="po">持久化对象</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.CompactRepositoryBase`3.ToPo(`0)">
            <summary>
            将实体转换成持久化对象
            </summary>
            <param name="entity">实体</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.CompactRepositoryBase`3.Find(System.Object)">
            <summary>
            查找实体
            </summary>
            <param name="id">标识</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.CompactRepositoryBase`3.FindAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            查找实体
            </summary>
            <param name="id">标识</param>
            <param name="cancellationToken">取消令牌</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.CompactRepositoryBase`3.FindByIds(`2[])">
            <summary>
            查找实体列表
            </summary>
            <param name="ids">标识列表</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.CompactRepositoryBase`3.FindByIds(System.Collections.Generic.IEnumerable{`2})">
            <summary>
            查找实体列表
            </summary>
            <param name="ids">标识列表</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.CompactRepositoryBase`3.FindByIds(System.String)">
            <summary>
            查找实体列表
            </summary>
            <param name="ids">逗号分隔的标识列表，范例："1,2"</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.CompactRepositoryBase`3.FindByIdsAsync(`2[])">
            <summary>
            查找实体列表
            </summary>
            <param name="ids">标识列表</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.CompactRepositoryBase`3.FindByIdsAsync(System.Collections.Generic.IEnumerable{`2},System.Threading.CancellationToken)">
            <summary>
            查找实体列表
            </summary>
            <param name="ids">标识列表</param>
            <param name="cancellationToken">取消令牌</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.CompactRepositoryBase`3.FindByIdsAsync(System.String)">
            <summary>
            查找实体列表
            </summary>
            <param name="ids">逗号分隔的标识列表，范例："1,2"</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.CompactRepositoryBase`3.Exists(`2[])">
            <summary>
            判断是否存在
            </summary>
            <param name="ids">标识列表</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.CompactRepositoryBase`3.ExistsAsync(`2[])">
            <summary>
            判断是否存在
            </summary>
            <param name="ids">标识列表</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.CompactRepositoryBase`3.Add(`0)">
            <summary>
            添加实体
            </summary>
            <param name="entity">实体</param>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.CompactRepositoryBase`3.Add(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            添加实体集合
            </summary>
            <param name="entities">实体集合</param>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.CompactRepositoryBase`3.AddAsync(`0,System.Threading.CancellationToken)">
            <summary>
            添加实体
            </summary>
            <param name="entity">实体</param>
            <param name="cancellationToken">取消令牌</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.CompactRepositoryBase`3.AddAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <summary>
            添加实体集合
            </summary>
            <param name="entities">实体集合</param>
            <param name="cancellationToken">取消令牌</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.CompactRepositoryBase`3.Update(`0)">
            <summary>
            修改实体
            </summary>
            <param name="entity">实体</param>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.CompactRepositoryBase`3.Update(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            修改实体集合
            </summary>
            <param name="entities">实体集合</param>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.CompactRepositoryBase`3.UpdateAsync(`0)">
            <summary>
            修改实体
            </summary>
            <param name="entity">实体</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.CompactRepositoryBase`3.UpdateAsync(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            修改实体集合
            </summary>
            <param name="entities">实体集合</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.CompactRepositoryBase`3.Remove(System.Object)">
            <summary>
            移除实体
            </summary>
            <param name="id">标识</param>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.CompactRepositoryBase`3.Remove(`0)">
            <summary>
            移除实体
            </summary>
            <param name="entity">实体</param>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.CompactRepositoryBase`3.Remove(System.Collections.Generic.IEnumerable{`2})">
            <summary>
            移除实体集合
            </summary>
            <param name="ids">标识集合</param>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.CompactRepositoryBase`3.Remove(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            移除实体集合
            </summary>
            <param name="entities">实体集合</param>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.CompactRepositoryBase`3.RemoveAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            移除实体
            </summary>
            <param name="id">标识</param>
            <param name="cancellationToken">取消令牌</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.CompactRepositoryBase`3.RemoveAsync(`0,System.Threading.CancellationToken)">
            <summary>
            移除实体
            </summary>
            <param name="entity">实体</param>
            <param name="cancellationToken">取消令牌</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.CompactRepositoryBase`3.RemoveAsync(System.Collections.Generic.IEnumerable{`2},System.Threading.CancellationToken)">
            <summary>
            移除实体集合
            </summary>
            <param name="ids">标识集合</param>
            <param name="cancellationToken">取消令牌</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.CompactRepositoryBase`3.RemoveAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <summary>
            移除实体集合
            </summary>
            <param name="entities">实体集合</param>
            <param name="cancellationToken">取消令牌</param>
        </member>
        <member name="T:Bing.Datas.EntityFramework.Core.IMap">
            <summary>
            映射
            </summary>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.IMap.Map(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            映射配置
            </summary>
            <param name="builder">模型生成器</param>
        </member>
        <member name="T:Bing.Datas.EntityFramework.Core.MapBase`1">
            <summary>
            映射配置
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
        </member>
        <member name="P:Bing.Datas.EntityFramework.Core.MapBase`1.ModelBuilder">
            <summary>
            模型生成器
            </summary>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.MapBase`1.Map(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            映射配置
            </summary>
            <param name="modelBuilder">模型生成器</param>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.MapBase`1.MapTable(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{`0})">
            <summary>
            映射表
            </summary>
            <param name="builder">实体类型生成器</param>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.MapBase`1.MapVersion(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{`0})">
            <summary>
            映射乐观离线锁
            </summary>
            <param name="builder">实体类型生成器</param>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.MapBase`1.MapProperties(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{`0})">
            <summary>
            映射属性
            </summary>
            <param name="builder">实体类型生成器</param>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.MapBase`1.MapAssociations(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{`0})">
            <summary>
            映射导航属性
            </summary>
            <param name="builder">实体类型生成器</param>
        </member>
        <member name="T:Bing.Datas.EntityFramework.Core.QueryStoreBase`1">
            <summary>
            查询存储器
            </summary>
            <typeparam name="TEntity">对象类型</typeparam>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.QueryStoreBase`1.#ctor(Bing.Datas.UnitOfWorks.IUnitOfWork)">
            <summary>
            初始化一个<see cref="T:Bing.Datas.EntityFramework.Core.QueryStoreBase`1"/>类型的实例
            </summary>
            <param name="unitOfWork">工作单元</param>
        </member>
        <member name="T:Bing.Datas.EntityFramework.Core.QueryStoreBase`2">
            <summary>
            查询存储器
            </summary>
            <typeparam name="TEntity">对象类型</typeparam>
            <typeparam name="TKey">对象标识类型</typeparam>
        </member>
        <member name="P:Bing.Datas.EntityFramework.Core.QueryStoreBase`2.UnitOfWork">
            <summary>
            工作单元
            </summary>
        </member>
        <member name="P:Bing.Datas.EntityFramework.Core.QueryStoreBase`2.Set">
            <summary>
            实体集
            </summary>
        </member>
        <member name="F:Bing.Datas.EntityFramework.Core.QueryStoreBase`2._sqlQuery">
            <summary>
            Sql查询对象
            </summary>
        </member>
        <member name="P:Bing.Datas.EntityFramework.Core.QueryStoreBase`2.Sql">
            <summary>
            Sql查询对象
            </summary>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.QueryStoreBase`2.CreateSqlQuery">
            <summary>
            创建Sql查询对象
            </summary>
            <returns></returns>
        </member>
        <member name="P:Bing.Datas.EntityFramework.Core.QueryStoreBase`2.Connection">
            <summary>
            数据库连接
            </summary>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.QueryStoreBase`2.#ctor(Bing.Datas.UnitOfWorks.IUnitOfWork)">
            <summary>
            初始化一个<see cref="T:Bing.Datas.EntityFramework.Core.QueryStoreBase`2"/>类型的实例
            </summary>
            <param name="unitOfWork">工作单元</param>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.QueryStoreBase`2.FindAsNoTracking">
            <summary>
            获取未跟踪查询对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.QueryStoreBase`2.Find">
            <summary>
            获取查询对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.QueryStoreBase`2.Find(Bing.Domains.Repositories.ICriteria{`0})">
            <summary>
            查找
            </summary>
            <param name="criteria">查询条件</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.QueryStoreBase`2.Find(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            查找
            </summary>
            <param name="predicate">查询条件</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.QueryStoreBase`2.Find(System.Object)">
            <summary>
            查找实体
            </summary>
            <param name="id">标识</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.QueryStoreBase`2.FindAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            查找实体
            </summary>
            <param name="id">标识</param>
            <param name="cancellationToken">取消令牌</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.QueryStoreBase`2.FindByIds(`1[])">
            <summary>
            查找实体列表
            </summary>
            <param name="ids">标识列表</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.QueryStoreBase`2.FindByIds(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            查找实体列表
            </summary>
            <param name="ids">标识列表</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.QueryStoreBase`2.FindByIds(System.String)">
            <summary>
            查找实体列表
            </summary>
            <param name="ids">逗号分隔的标识列表，范例："1,2"</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.QueryStoreBase`2.FindByIdsAsync(`1[])">
            <summary>
            查找实体列表
            </summary>
            <param name="ids">标识列表</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.QueryStoreBase`2.FindByIdsAsync(System.Collections.Generic.IEnumerable{`1},System.Threading.CancellationToken)">
            <summary>
            查找实体列表
            </summary>
            <param name="ids">标识列表</param>
            <param name="cancellationToken">取消令牌</param>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.QueryStoreBase`2.FindByIdsAsync(System.String)">
            <summary>
            查找实体列表
            </summary>
            <param name="ids">逗号分隔的标识列表，范例："1,2"</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.QueryStoreBase`2.FindByIdNoTracking(`1)">
            <summary>
            查找未跟踪单个实体
            </summary>
            <param name="id">标识</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.QueryStoreBase`2.FindByIdNoTrackingAsync(`1,System.Threading.CancellationToken)">
            <summary>
            查找未跟踪单个实体
            </summary>
            <param name="id">标识</param>
            <param name="cancellationToken">取消令牌</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.QueryStoreBase`2.FindByIdsNoTracking(`1[])">
            <summary>
            查找实体列表，不跟踪
            </summary>
            <param name="ids">标识列表</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.QueryStoreBase`2.FindByIdsNoTracking(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            查找实体列表，不跟踪
            </summary>
            <param name="ids">标识列表</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.QueryStoreBase`2.FindByIdsNoTracking(System.String)">
            <summary>
            查找实体列表，不跟踪
            </summary>
            <param name="ids">逗号分隔的标识列表，范例："1,2"</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.QueryStoreBase`2.FindByIdsNoTrackingAsync(`1[])">
            <summary>
            查找实体列表，不跟踪
            </summary>
            <param name="ids">标识列表</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.QueryStoreBase`2.FindByIdsNoTrackingAsync(System.Collections.Generic.IEnumerable{`1},System.Threading.CancellationToken)">
            <summary>
            查找实体列表，不跟踪
            </summary>
            <param name="ids">标识列表</param>
            <param name="cancellationToken">取消令牌</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.QueryStoreBase`2.FindByIdsNoTrackingAsync(System.String)">
            <summary>
            查找实体列表，不跟踪
            </summary>
            <param name="ids">逗号分隔的标识列表，范例："1,2"</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.QueryStoreBase`2.Single(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            查找单个实体
            </summary>
            <param name="predicate">查询条件</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.QueryStoreBase`2.SingleAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            查找单个实体
            </summary>
            <param name="predicate">查询条件</param>
            <param name="cancellationToken">取消令牌</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.QueryStoreBase`2.FindAll(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            查找实体列表
            </summary>
            <param name="predicate">查询条件</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.QueryStoreBase`2.FindAllAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            查找实体列表
            </summary>
            <param name="predicate">查询条件</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.QueryStoreBase`2.FindAllNoTracking(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            查找实体列表，不跟踪
            </summary>
            <param name="predicate">查询条件</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.QueryStoreBase`2.FindAllNoTrackingAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            查找实体列表，不跟踪
            </summary>
            <param name="predicate">查询条件</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.QueryStoreBase`2.Exists(`1[])">
            <summary>
            判断是否存在
            </summary>
            <param name="ids">标识列表</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.QueryStoreBase`2.ExistsAsync(`1[])">
            <summary>
            判断是否存在
            </summary>
            <param name="ids">标识列表</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.QueryStoreBase`2.Exists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            判断是否存在
            </summary>
            <param name="predicate">查询条件</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.QueryStoreBase`2.ExistsAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            判断是否存在
            </summary>
            <param name="predicate">查询条件</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.QueryStoreBase`2.Count(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            查找数量
            </summary>
            <param name="predicate">查询条件</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.QueryStoreBase`2.CountAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            查找数量
            </summary>
            <param name="predicate">查询条件</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.QueryStoreBase`2.Query(Bing.Domains.Repositories.IQueryBase{`0})">
            <summary>
            查询
            </summary>
            <param name="query">查询对象</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.QueryStoreBase`2.Query(System.Linq.IQueryable{`0},Bing.Domains.Repositories.IQueryBase{`0})">
            <summary>
            获取查询结果
            </summary>
            <param name="queryable">数据源</param>
            <param name="query">查询对象</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.QueryStoreBase`2.QueryAsNoTracking(Bing.Domains.Repositories.IQueryBase{`0})">
            <summary>
            查询 - 返回未跟踪的实体
            </summary>
            <param name="query">查询对象</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.QueryStoreBase`2.PagerQuery(Bing.Domains.Repositories.IQueryBase{`0})">
            <summary>
            分页查询
            </summary>
            <param name="query">查询对象</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.QueryStoreBase`2.PagerQueryAsNoTracking(Bing.Domains.Repositories.IQueryBase{`0})">
            <summary>
            分页查询 - 返回未跟踪的实体
            </summary>
            <param name="query">查询对象</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.QueryStoreBase`2.QueryAsync(Bing.Domains.Repositories.IQueryBase{`0})">
            <summary>
            查询
            </summary>
            <param name="query">查询对象</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.QueryStoreBase`2.QueryAsNoTrackingAsync(Bing.Domains.Repositories.IQueryBase{`0})">
            <summary>
            查询 - 返回未跟踪的实体
            </summary>
            <param name="query">查询对象</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.QueryStoreBase`2.PagerQueryAsync(Bing.Domains.Repositories.IQueryBase{`0})">
            <summary>
            分页查询
            </summary>
            <param name="query">查询对象</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.QueryStoreBase`2.PagerQueryAsNoTrackingAsync(Bing.Domains.Repositories.IQueryBase{`0})">
            <summary>
            分页查询 - 返回未跟踪的实体
            </summary>
            <param name="query">查询对象</param>
            <returns></returns>
        </member>
        <member name="T:Bing.Datas.EntityFramework.Core.RepositoryBase`1">
            <summary>
            仓储
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.RepositoryBase`1.#ctor(Bing.Datas.UnitOfWorks.IUnitOfWork)">
            <summary>
            初始化一个<see cref="T:Bing.Datas.EntityFramework.Core.RepositoryBase`1"/>类型的实例
            </summary>
            <param name="unitOfWork">工作单元</param>
        </member>
        <member name="T:Bing.Datas.EntityFramework.Core.RepositoryBase`2">
            <summary>
            仓储
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TKey">实体标识类型</typeparam>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.RepositoryBase`2.#ctor(Bing.Datas.UnitOfWorks.IUnitOfWork)">
            <summary>
            初始化一个<see cref="T:Bing.Datas.EntityFramework.Core.RepositoryBase`2"/>类型的实例
            </summary>
            <param name="unitOfWork">工作单元</param>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.RepositoryBase`2.GetUnitOfWork">
            <summary>
            获取工作单元
            </summary>
        </member>
        <member name="T:Bing.Datas.EntityFramework.Core.StoreBase`1">
            <summary>
            存储器
            </summary>
            <typeparam name="TEntity">对象类型</typeparam>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.StoreBase`1.#ctor(Bing.Datas.UnitOfWorks.IUnitOfWork)">
            <summary>
            初始化一个<see cref="T:Bing.Datas.EntityFramework.Core.StoreBase`1"/>类型的实例
            </summary>
            <param name="unitOfWork">工作单元</param>
        </member>
        <member name="T:Bing.Datas.EntityFramework.Core.StoreBase`2">
            <summary>
            存储器
            </summary>
            <typeparam name="TEntity">对象类型</typeparam>
            <typeparam name="TKey">对象标识类型</typeparam>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.StoreBase`2.#ctor(Bing.Datas.UnitOfWorks.IUnitOfWork)">
            <summary>
            初始化一个<see cref="T:Bing.Datas.EntityFramework.Core.StoreBase`2"/>类型的实例
            </summary>
            <param name="unitOfWork">工作单元</param>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.StoreBase`2.Add(`0)">
            <summary>
            添加实体
            </summary>
            <param name="entity">实体</param>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.StoreBase`2.Add(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            添加实体集合
            </summary>
            <param name="entities">实体集合</param>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.StoreBase`2.AddAsync(`0,System.Threading.CancellationToken)">
            <summary>
            添加实体
            </summary>
            <param name="entity">实体</param>
            <param name="cancellationToken">取消令牌</param>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.StoreBase`2.AddAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <summary>
            添加实体集合
            </summary>
            <param name="entities">实体集合</param>
            <param name="cancellationToken">取消令牌</param>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.StoreBase`2.Update(`0)">
            <summary>
            修改实体
            </summary>
            <param name="entity">实体</param>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.StoreBase`2.Update(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            修改实体集合
            </summary>
            <param name="entities">实体集合</param>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.StoreBase`2.UpdateAsync(`0)">
            <summary>
            修改实体
            </summary>
            <param name="entity">实体</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.StoreBase`2.UpdateAsync(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            修改实体集合
            </summary>
            <param name="entities">实体集合</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.StoreBase`2.Remove(System.Object)">
            <summary>
            移除实体
            </summary>
            <param name="id">标识</param>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.StoreBase`2.Delete(`0)">
            <summary>
            删除
            </summary>
            <param name="entity">实体</param>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.StoreBase`2.Remove(`0)">
            <summary>
            移除实体
            </summary>
            <param name="entity">实体</param>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.StoreBase`2.Remove(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            移除实体集合
            </summary>
            <param name="ids">标识集合</param>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.StoreBase`2.Delete(System.Collections.Generic.List{`0})">
            <summary>
            删除实体集合
            </summary>
            <param name="list">实体集合</param>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.StoreBase`2.Remove(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            移除实体集合
            </summary>
            <param name="entities">实体集合</param>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.StoreBase`2.RemoveAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            移除实体
            </summary>
            <param name="id">标识</param>
            <param name="cancellationToken">取消令牌</param>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.StoreBase`2.RemoveAsync(`0,System.Threading.CancellationToken)">
            <summary>
            移除实体
            </summary>
            <param name="entity">实体</param>
            <param name="cancellationToken">取消令牌</param>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.StoreBase`2.RemoveAsync(System.Collections.Generic.IEnumerable{`1},System.Threading.CancellationToken)">
            <summary>
            移除实体集合
            </summary>
            <param name="ids">标识集合</param>
            <param name="cancellationToken">取消令牌</param>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.StoreBase`2.RemoveAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <summary>
            移除实体集合
            </summary>
            <param name="entities">实体集合</param>
            <param name="cancellationToken">取消令牌</param>
        </member>
        <member name="T:Bing.Datas.EntityFramework.Core.TreeCompactRepositoryBase`2">
            <summary>
            树型仓储
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TPo">持久化对象类型</typeparam>
        </member>
        <member name="F:Bing.Datas.EntityFramework.Core.TreeCompactRepositoryBase`2._store">
            <summary>
            存储器
            </summary>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.TreeCompactRepositoryBase`2.#ctor(Bing.Datas.Stores.IStore{`1,System.Guid})">
            <summary>
            初始化一个<see cref="T:Bing.Datas.EntityFramework.Core.TreeCompactRepositoryBase`2"/>类型的实例
            </summary>
            <param name="store">存储器</param>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.TreeCompactRepositoryBase`2.GenerateSortIdAsync(System.Nullable{System.Guid})">
            <summary>
            生成排序号
            </summary>
            <param name="parentId">父标识</param>
            <returns></returns>
        </member>
        <member name="T:Bing.Datas.EntityFramework.Core.TreeCompactRepositoryBase`4">
            <summary>
            树型仓储
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TPo">持久化对象类型</typeparam>
            <typeparam name="TKey">实体标识类型</typeparam>
            <typeparam name="TParentId">父标识类型</typeparam>
        </member>
        <member name="F:Bing.Datas.EntityFramework.Core.TreeCompactRepositoryBase`4._store">
            <summary>
            存储器
            </summary>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.TreeCompactRepositoryBase`4.#ctor(Bing.Datas.Stores.IStore{`1,`2})">
            <summary>
            初始化一个<see cref="T:Bing.Datas.EntityFramework.Core.TreeCompactRepositoryBase`4"/>类型的实例
            </summary>
            <param name="store">存储器</param>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.TreeCompactRepositoryBase`4.GenerateSortIdAsync(`3)">
            <summary>
            生成排序号
            </summary>
            <param name="parentId">父标识</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.TreeCompactRepositoryBase`4.GetAllChildrenAsync(`0)">
            <summary>
            获取全部下级实体
            </summary>
            <param name="parent">父实体</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.TreeCompactRepositoryBase`4.FindByIdNoTrackingAsync(`2,System.Threading.CancellationToken)">
            <summary>
            查找未跟踪单个实体
            </summary>
            <param name="id">标识</param>
            <param name="cancellationToken">取消令牌</param>
            <returns></returns>
        </member>
        <member name="T:Bing.Datas.EntityFramework.Core.TreeRepositoryBase`1">
            <summary>
            树型仓储
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.TreeRepositoryBase`1.#ctor(Bing.Datas.UnitOfWorks.IUnitOfWork)">
            <summary>
            初始化一个<see cref="T:Bing.Datas.EntityFramework.Core.TreeRepositoryBase`1"/>类型的实例
            </summary>
            <param name="unitOfWork">工作单元</param>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.TreeRepositoryBase`1.GenerateSortIdAsync(System.Nullable{System.Guid})">
            <summary>
            生成排序号
            </summary>
            <param name="parentId">父标识</param>
            <returns></returns>
        </member>
        <member name="T:Bing.Datas.EntityFramework.Core.TreeRepositoryBase`3">
            <summary>
            树型仓储
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TKey">实体标识类型</typeparam>
            <typeparam name="TParentId">父标识类型</typeparam>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.TreeRepositoryBase`3.#ctor(Bing.Datas.UnitOfWorks.IUnitOfWork)">
            <summary>
            初始化一个<see cref="T:Bing.Datas.EntityFramework.Core.TreeRepositoryBase`3"/>类型的实例
            </summary>
            <param name="unitOfWork">工作单元</param>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.TreeRepositoryBase`3.GenerateSortIdAsync(`2)">
            <summary>
            生成排序号
            </summary>
            <param name="parentId">父标识</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.TreeRepositoryBase`3.GetAllChildrenAsync(`0)">
            <summary>
            获取全部下级实体
            </summary>
            <param name="parent">父实体</param>
            <returns></returns>
        </member>
        <member name="T:Bing.Datas.EntityFramework.Core.UnitOfWorkBase">
            <summary>
            工作单元
            </summary>
        </member>
        <member name="F:Bing.Datas.EntityFramework.Core.UnitOfWorkBase.Maps">
            <summary>
            映射字典
            </summary>
        </member>
        <member name="F:Bing.Datas.EntityFramework.Core.UnitOfWorkBase.LoggerFactory">
            <summary>
            日志工厂
            </summary>
        </member>
        <member name="F:Bing.Datas.EntityFramework.Core.UnitOfWorkBase._serviceProvider">
            <summary>
            服务提供器
            </summary>
        </member>
        <member name="P:Bing.Datas.EntityFramework.Core.UnitOfWorkBase.TraceId">
            <summary>
            跟踪号
            </summary>
        </member>
        <member name="P:Bing.Datas.EntityFramework.Core.UnitOfWorkBase.Session">
            <summary>
            用户会话
            </summary>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.UnitOfWorkBase.#cctor">
            <summary>
            初始化一个<see cref="T:Bing.Datas.EntityFramework.Core.UnitOfWorkBase"/>类型的静态实例
            </summary>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.UnitOfWorkBase.#ctor(Microsoft.EntityFrameworkCore.DbContextOptions,System.IServiceProvider)">
            <summary>
            初始化一个<see cref="T:Bing.Datas.EntityFramework.Core.UnitOfWorkBase"/>类型的实例
            </summary>
            <param name="options">配置</param>
            <param name="serviceProvider">服务提供器</param>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.UnitOfWorkBase.RegisterToManager">
            <summary>
            注册到工作单元管理器
            </summary>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.UnitOfWorkBase.Create``1">
            <summary>
            创建实例
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.UnitOfWorkBase.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)">
            <summary>
            配置
            </summary>
            <param name="builder">配置生成器</param>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.UnitOfWorkBase.EnableLog(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)">
            <summary>
            启用日志
            </summary>
            <param name="builder"></param>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.UnitOfWorkBase.GetLog">
            <summary>
            获取日志操作
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.UnitOfWorkBase.IsEnabled(Bing.Logs.ILog)">
            <summary>
            是否启用EF日志
            </summary>
            <param name="log">日志操作</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.UnitOfWorkBase.GetConfig">
            <summary>
            获取配置
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.UnitOfWorkBase.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            配置映射
            </summary>
            <param name="modelBuilder">映射生成器</param>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.UnitOfWorkBase.GetMaps">
            <summary>
            获取映射配置列表
            </summary>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.UnitOfWorkBase.GetMapType">
            <summary>
            获取映射接口类型
            </summary>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.UnitOfWorkBase.GetMapsFromAssemblies">
            <summary>
            从程序集获取映射配置列表
            </summary>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.UnitOfWorkBase.GetMapInstances(System.Reflection.Assembly)">
            <summary>
            获取映射实例列表
            </summary>
            <param name="assembly">程序集</param>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.UnitOfWorkBase.GetAssemblies">
            <summary>
            获取定义映射配置的程序集列表
            </summary>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.UnitOfWorkBase.Commit">
            <summary>
            提交，返回影响的行数
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.UnitOfWorkBase.CommitAsync">
            <summary>
            异步提交，返回影响的行数
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.UnitOfWorkBase.SaveChanges">
            <summary>
            保存更改
            </summary>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.UnitOfWorkBase.SaveChangesBefore">
            <summary>
            保存更改前操作
            </summary>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.UnitOfWorkBase.InterceptAddedOperation(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry)">
            <summary>
            拦截添加操作
            </summary>
            <param name="entry">输入实体</param>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.UnitOfWorkBase.InitCreationAudited(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry)">
            <summary>
            初始化创建审计信息
            </summary>
            <param name="entry">输入实体</param>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.UnitOfWorkBase.GetUserId">
            <summary>
            获取用户标识
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.UnitOfWorkBase.GetUserName">
            <summary>
            获取用户名称
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.UnitOfWorkBase.GetSession">
            <summary>
            获取用户会话
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.UnitOfWorkBase.InitModificationAudited(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry)">
            <summary>
            初始化修改审计信息
            </summary>
            <param name="entry">输入实体</param>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.UnitOfWorkBase.InterceptModifiedOperation(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry)">
            <summary>
            拦截修改操作
            </summary>
            <param name="entry">输入实体</param>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.UnitOfWorkBase.InterceptDeletedOperation(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry)">
            <summary>
            拦截删除操作
            </summary>
            <param name="entry">输入实体</param>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.UnitOfWorkBase.SaveChangesAsync(System.Threading.CancellationToken)">
            <summary>
            异步保存更改
            </summary>
            <param name="cancellationToken">取消令牌</param>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.UnitOfWorkBase.TransactionCommit(Bing.Datas.Transactions.ITransactionActionManager,System.Threading.CancellationToken)">
            <summary>
            手工创建事务提交
            </summary>
            <param name="transactionActionManager">事务操作管理器</param>
            <param name="cancellationToken">取消令牌</param>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.UnitOfWorkBase.InitVersion(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry)">
            <summary>
            初始化版本号
            </summary>
            <param name="entry">输入实体</param>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.UnitOfWorkBase.GetConnection">
            <summary>
            获取数据库连接
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.UnitOfWorkBase.GetTable(System.Type)">
            <summary>
            获取表名
            </summary>
            <param name="entity">实体类型</param>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.UnitOfWorkBase.GetSchema(System.Type)">
            <summary>
            获取架构
            </summary>
            <param name="entity">实体类型</param>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Core.UnitOfWorkBase.GetColumn(System.Type,System.String)">
            <summary>
            获取列名
            </summary>
            <param name="entity">实体类型</param>
            <param name="property">属性名</param>
        </member>
        <member name="T:Bing.Datas.EntityFramework.Extensions.Extensions">
            <summary>
            数据服务 扩展
            </summary>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Extensions.Extensions.AddUnitOfWork``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.EntityFrameworkCore.DbContextOptionsBuilder},System.Action{Bing.Datas.Configs.DataConfig},Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            注册工作单元服务
            </summary>
            <typeparam name="TService">工作单元接口类型</typeparam>
            <typeparam name="TImplementation">工作单元实现类型</typeparam>
            <param name="services">服务集合</param>
            <param name="configAction">配置操作</param>
            <param name="dataConfigAction">数据配置操作</param>
            <param name="configuration">配置</param>
            <returns></returns>
        </member>
        <member name="T:Bing.Datas.EntityFramework.Extensions.InternalPropertyBuilderExtensions">
            <summary>
            内部属性生成器扩展
            </summary>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Extensions.InternalPropertyBuilderExtensions.HasPrecision(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource,System.Int32,System.Int32)">
            <summary>
            设置精度
            </summary>
            <param name="propertyBuilder">内部属性生成器</param>
            <param name="configurationSource">配置源</param>
            <param name="precision">精度</param>
            <param name="scale">保留小数位</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Extensions.InternalPropertyBuilderExtensions.HasMaxLength(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder,Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSource,System.Nullable{System.Boolean})">
            <summary>
            设置最大长度
            </summary>
            <param name="propertyBuilder">内部属性生成器</param>
            <param name="configurationSource">配置源</param>
            <param name="hasMaxLength">是否最大长度</param>
            <returns></returns>
        </member>
        <member name="T:Bing.Datas.EntityFramework.Extensions.ModelBuilderExtensions">
            <summary>
            实体生成器(<see cref="T:Microsoft.EntityFrameworkCore.ModelBuilder"/>) 扩展
            </summary>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Extensions.ModelBuilderExtensions.SetSimpleUnderscoreTableNameConvention(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            设置简单下划线表名约定
            </summary>
            <param name="modelBuilder">实体生成器</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Extensions.ModelBuilderExtensions.SetOneToManyCascadeDeleteConvention(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            设置关闭所有主外键关系的级联删除
            </summary>
            <param name="modelBuilder">实体生成器</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Extensions.ModelBuilderExtensions.HasGlobalDeleteQueryFilter(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            全局逻辑删除查询过滤器
            </summary>
            <param name="modelBuilder">实体生成器</param>
            <returns></returns>
        </member>
        <member name="T:Bing.Datas.EntityFramework.Extensions.PropertyBuilderExtensions">
            <summary>
            属性生成器扩展
            </summary>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Extensions.PropertyBuilderExtensions.HasPrecision``1(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder{``0},System.Int32,System.Int32)">
            <summary>
            设置精度
            </summary>
            <typeparam name="TProperty">属性类型</typeparam>
            <param name="propertyBuilder">属性生成器</param>
            <param name="precision">精度</param>
            <param name="scale">保留小数位</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Extensions.PropertyBuilderExtensions.HasMaxLength``1(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder{``0},System.Nullable{System.Boolean})">
            <summary>
            设置最大长度
            </summary>
            <typeparam name="TProperty">属性类型</typeparam>
            <param name="propertyBuilder">属性生成器</param>
            <param name="hasMaxLength">是否最大长度</param>
            <returns></returns>
        </member>
        <member name="T:Bing.Datas.EntityFramework.Extensions.QueryableExtensions">
            <summary>
            <see cref="T:System.Linq.IQueryable`1"/> 扩展
            </summary>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Extensions.QueryableExtensions.PageAsync``1(System.Linq.IQueryable{``0},Bing.Domains.Repositories.IPager)">
            <summary>
            分页，包含排序
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="query">数据源</param>
            <param name="pager">分页对象</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Extensions.QueryableExtensions.ToPagerListAsync``1(System.Linq.IQueryable{``0},Bing.Domains.Repositories.IPager)">
            <summary>
            转换为分页列表，包含排序分页操作
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="query">数据源</param>
            <param name="pager">分页对象</param>
            <returns></returns>
        </member>
        <member name="T:Bing.Datas.EntityFramework.Extensions.UnitOfWorkExtensions">
            <summary>
            EF工作单元 扩展
            </summary>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Extensions.UnitOfWorkExtensions.ClearCache(Bing.Datas.UnitOfWorks.IUnitOfWork)">
            <summary>
            清空缓存
            </summary>
            <param name="unitOfWork">工作单元</param>
        </member>
        <member name="T:Bing.Datas.EntityFramework.Logs.EfLog">
            <summary>
            EF日志记录器
            </summary>
        </member>
        <member name="F:Bing.Datas.EntityFramework.Logs.EfLog.TraceLogName">
            <summary>
            EF跟踪日志名
            </summary>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Logs.EfLog.Log``1(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,``0,System.Exception,System.Func{``0,System.Exception,System.String})">
            <summary>
            日志记录
            </summary>
            <typeparam name="TState">状态类型</typeparam>
            <param name="logLevel">日志级别</param>
            <param name="eventId">事件编号</param>
            <param name="state">状态</param>
            <param name="exception">异常</param>
            <param name="formatter">日志内容</param>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Logs.EfLog.GetConfig">
            <summary>
            获取配置
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Logs.EfLog.GetLog">
            <summary>
            获取日志操作
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Logs.EfLog.GetUnitOfWork">
            <summary>
            获取工作单元
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Logs.EfLog.IsEnabled(Microsoft.Extensions.Logging.EventId,Bing.Datas.Configs.DataConfig)">
            <summary>
            是否启用EF日志
            </summary>
            <param name="eventId">事件ID</param>
            <param name="config">数据配置</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Logs.EfLog.AddContent``1(``0,Bing.Datas.Configs.DataConfig,Bing.Logs.ILog)">
            <summary>
            添加日志内容
            </summary>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Logs.EfLog.AddDictionary(System.Collections.Generic.IDictionary{System.String,System.String},Bing.Logs.ILog)">
            <summary>
            添加字典内容
            </summary>
            <param name="dictionary">字典</param>
            <param name="log">日志操作</param>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Logs.EfLog.GetValue(System.Collections.Generic.IDictionary{System.String,System.String},System.String)">
            <summary>
            获取值
            </summary>
            <param name="dictionary">参数字典</param>
            <param name="key">参数名</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Logs.EfLog.AddElapsed(System.String,Bing.Logs.ILog)">
            <summary>
            添加执行时间
            </summary>
            <param name="value">值</param>
            <param name="log">日志操作</param>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Logs.EfLog.AddSql(System.String,Bing.Logs.ILog)">
            <summary>
            添加Sql
            </summary>
            <param name="sql">Sql语句</param>
            <param name="log">日志操作</param>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Logs.EfLog.AddSqlParams(System.String,Bing.Logs.ILog)">
            <summary>
            添加Sql参数
            </summary>
            <param name="value">Sql参数</param>
            <param name="log">日志操作</param>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Logs.EfLog.IsEnabled(Microsoft.Extensions.Logging.LogLevel)">
            <summary>
            是否启用
            </summary>
            <param name="logLevel">日志级别</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Logs.EfLog.BeginScope``1(``0)">
            <summary>
            起始范围
            </summary>
        </member>
        <member name="T:Bing.Datas.EntityFramework.Logs.EfLogProvider">
            <summary>
            EF日志提供器
            </summary>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Logs.EfLogProvider.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Logs.EfLogProvider.CreateLogger(System.String)">
            <summary>
            初始化EF日志提供器
            </summary>
            <param name="categoryName">日志分类</param>
            <returns></returns>
        </member>
        <member name="T:Bing.Datas.EntityFramework.Logs.NullLogger">
            <summary>
            空日志记录器
            </summary>
        </member>
        <member name="F:Bing.Datas.EntityFramework.Logs.NullLogger.Instance">
            <summary>
            空日志记录器实例
            </summary>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Logs.NullLogger.Log``1(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,``0,System.Exception,System.Func{``0,System.Exception,System.String})">
            <summary>
            日志记录
            </summary>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Logs.NullLogger.IsEnabled(Microsoft.Extensions.Logging.LogLevel)">
            <summary>
            是否启用
            </summary>
            <param name="logLevel">日志级别</param>
            <returns></returns>
        </member>
        <member name="M:Bing.Datas.EntityFramework.Logs.NullLogger.BeginScope``1(``0)">
            <summary>
            起始范围
            </summary>
        </member>
    </members>
</doc>
